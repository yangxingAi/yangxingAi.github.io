<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>flutter3.x仿小米商城app</title>
    <link href="/2024/07/22/flutter3-x%E4%BB%BF%E5%B0%8F%E7%B1%B3%E5%95%86%E5%9F%8Eapp/"/>
    <url>/2024/07/22/flutter3-x%E4%BB%BF%E5%B0%8F%E7%B1%B3%E5%95%86%E5%9F%8Eapp/</url>
    
    <content type="html"><![CDATA[<h1 id="Fluuter3-x仿小米商城app全流程"><a href="#Fluuter3-x仿小米商城app全流程" class="headerlink" title="Fluuter3.x仿小米商城app全流程"></a>Fluuter3.x仿小米商城app全流程</h1><h3 id="一-为什么选择Flutter？"><a href="#一-为什么选择Flutter？" class="headerlink" title="一. 为什么选择Flutter？"></a>一. 为什么选择Flutter？</h3><p>​为什么要选择Flutter 作为跨平台的客户端开发技术，我想主要有以下几个方面：</p><ol><li>高性能</li></ol><ul><li><strong>原生性能</strong>：Flutter编译生成的原生代码，提供接近于原生的性能。</li><li><strong>高帧率</strong>： Flutter支持高帧率动画和流畅的用户体验。</li></ul><ol start="2"><li>统一的代码库</li></ol><p>​<strong>一次编写</strong>，<strong>多平台运行</strong>： Flutter允许开发者使用一套代码同时创建iOS和Android应用，减少了开发和维护的工作量。</p><ol start="3"><li>丰富的UI 组件</li></ol><ul><li><strong>UI组件</strong>： Flutter提供了一系列高度可定制的UI组件，方便快速构建美观的用户界面。</li><li><strong>一致性</strong>：由于Flutter的UI组件是独立于平台的，开发者可以确保在不同平台上的界面一致性。</li></ul><ol start="4"><li>开发效率</li></ol><ul><li><strong>热重载</strong>：Flutter的热重载功能允许开发者在不重启应用的情况下即时查看代码修改结果，提高了开发效率。</li><li><strong>强大的工具支持</strong>：Flutter与Visual Studio Code、Android Studio等流行的IDE无缝集成，提供了强大的开发和调试工具。</li></ul><ol start="5"><li>社区和生态系统</li></ol><ul><li><strong>活跃的社区</strong>：Flutter有一个活跃的开发者社区，提供大量的教程、插件和库，帮助开发者快速解决问题。</li><li><strong>Google的支持</strong>：作为Google开发的框架，Flutter有着强大的技术支持和不断更新的资源。</li></ul><h3 id="二-主页介绍"><a href="#二-主页介绍" class="headerlink" title="二. 主页介绍"></a>二. 主页介绍</h3><h4 id="2-1-效果"><a href="#2-1-效果" class="headerlink" title="2.1. 效果"></a>2.1. 效果</h4><p><img src="/%5Cimg%5Czhuye01.png" alt="image-20240722184511180"></p><h4 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2. 代码实现"></a>2.2. 代码实现</h4><blockquote><p>主页主要由最上方的固定banner， 轮播图，商品分类列表和网格商品布局，底部的tab选项组成。</p></blockquote><h5 id="2-2-1-启动main函数"><a href="#2-2-1-启动main函数" class="headerlink" title="2.2.1. 启动main函数"></a>2.2.1. 启动main函数</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() &#123;<br>  <span class="hljs-comment">//配置透明的状态栏</span><br>  SystemUiOverlayStyle systemUiOverlayStyle =<br>      <span class="hljs-keyword">const</span> SystemUiOverlayStyle(statusBarColor: Colors.transparent);<br>  SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle);<br>  runApp(ScreenUtilInit(<br>      designSize: <span class="hljs-keyword">const</span> Size(<span class="hljs-number">1080</span>, <span class="hljs-number">2400</span>), <span class="hljs-comment">//设计稿的宽度和高度 px</span><br>      minTextAdapt: <span class="hljs-keyword">true</span>,<br>      splitScreenMode: <span class="hljs-keyword">true</span>,<br>      builder: (context, child) &#123;<br>        <span class="hljs-keyword">return</span> GetMaterialApp(<br>          debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>          title: <span class="hljs-string">&quot;Application&quot;</span>,<br>          <span class="hljs-comment">//配置主题</span><br>          theme: ThemeData(primarySwatch: Colors.grey),<br>          initialRoute: AppPages.INITIAL,<br>          <span class="hljs-comment">//配置ios动画</span><br>          defaultTransition: Transition.rightToLeft,<br>          getPages: AppPages.routes,<br>        );<br>      &#125;));<br>&#125;<br></code></pre></td></tr></table></figure><p><code>main</code>方法是唯一入口。在入口处，我们设置了透明的状态栏，设计稿的尺寸，启用了文本适配来适配不同的机型显示效果，启用了分屏模式。而在返回的根app中，关闭了debug模式，配置了主题颜色是灰色，动画效果是ios的动画，左右滑动。初始路由，即进入APP显示的页面。</p><h5 id="2-2-2-底部tab切换"><a href="#2-2-2-底部tab切换" class="headerlink" title="2.2.2. 底部tab切换"></a>2.2.2. 底部tab切换</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TabsView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GetView</span>&lt;<span class="hljs-title">TabsController</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">const</span> TabsView(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Obx(() =&gt; Scaffold(<br>          body: PageView(<br>            controller: controller.pageController,<br>            physics: <span class="hljs-keyword">const</span> NeverScrollableScrollPhysics(), <span class="hljs-comment">//禁止左右滑动</span><br>            children: controller.pages,<br>            onPageChanged: (index) &#123;<br>              controller.setCurrentIndex(index);<br>            &#125;,<br>          ),<br>          bottomNavigationBar: BottomNavigationBar(<br>              fixedColor: Colors.red, <span class="hljs-comment">//选中的颜色</span><br>              currentIndex: controller.currentIndex.value, <span class="hljs-comment">//第几个菜单选中</span><br>              type:<br>                  BottomNavigationBarType.fixed, <span class="hljs-comment">//如果底部有4个或者4个以上的菜单的时候就需要配置这个参数</span><br>              onTap: (index) &#123;<br>                controller.setCurrentIndex(index);<br>                controller.pageController.jumpToPage(index);<br>              &#125;,<br>              items: <span class="hljs-keyword">const</span> [<br>                BottomNavigationBarItem(icon: Icon(Icons.home), label: <span class="hljs-string">&quot;首页&quot;</span>),<br>                BottomNavigationBarItem(<br>                    icon: Icon(Icons.category), label: <span class="hljs-string">&quot;分类&quot;</span>),<br>                BottomNavigationBarItem(<br>                    icon: Icon(Icons.room_service), label: <span class="hljs-string">&quot;服务&quot;</span>),<br>                BottomNavigationBarItem(<br>                    icon: Icon(Icons.shopping_cart), label: <span class="hljs-string">&quot;购物车&quot;</span>),<br>                BottomNavigationBarItem(icon: Icon(Icons.people), label: <span class="hljs-string">&quot;用户&quot;</span>)<br>              ]),<br>        ));<br>  &#125;<br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TabsController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GetxController</span> </span>&#123;<br>  <span class="hljs-comment">//用于控制默认加载的tabs选项</span><br>  RxInt currentIndex = <span class="hljs-number">0.</span>obs;<br>  PageController pageController=Get.arguments!=null?PageController(initialPage:Get.arguments[<span class="hljs-string">&quot;initialPage&quot;</span>]): PageController(initialPage:<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span>&lt;Widget&gt; pages =  [<br>    <span class="hljs-keyword">const</span> HomeView(),<br>    <span class="hljs-keyword">const</span> CategoryView(),<br>    <span class="hljs-keyword">const</span> GiveView(),<br>    CartView(),<br>    <span class="hljs-keyword">const</span> UserView()<br>  ];<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> onInit() &#123;<br>    <span class="hljs-keyword">if</span>(Get.arguments!=<span class="hljs-keyword">null</span>)&#123;<br>      currentIndex.value=Get.arguments[<span class="hljs-string">&quot;initialPage&quot;</span>];<br>      update();<br>    &#125;<br>    <br>    <span class="hljs-keyword">super</span>.onInit();<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> onClose() &#123;<br>    <span class="hljs-keyword">super</span>.onClose();<br>  &#125;<br><br>  <span class="hljs-keyword">void</span> setCurrentIndex(index) &#123;<br>    currentIndex.value = index;<br>    update();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​采用Flutter+Getx 可以方便我们开发。<code>TabsView</code> 类继承自 <code>GetView&lt;TabsController&gt;</code>，这是一个GetX提供的便捷类，用于与控制器关联的视图。<code>Obx</code> 是GetX提供的一个响应式小部件，能够监听并响应控制器中的状态变化。（记得在响应式数据变量后面加<code>.obs</code>）<code>controller: controller.pageController</code> 使用控制器中的 <code>PageController</code> 来管理页面的控制。<code>physics: const NeverScrollableScrollPhysics()</code> 禁用页面的左右滑动。<code>onPageChanged: (index) &#123; controller.setCurrentIndex(index); &#125;</code> 页面切换时，调用控制器的方法更新当前选中的页面索引。</p><h5 id="2-2-3-首页"><a href="#2-2-3-首页" class="headerlink" title="2.2.3. 首页"></a>2.2.3. 首页</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GetView</span>&lt;<span class="hljs-title">HomeController</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">const</span> HomeView(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-comment">//顶部导航</span><br>  Widget _appBar() &#123;<br>    <span class="hljs-keyword">return</span> Positioned(<br>      top: <span class="hljs-number">0</span>,<br>      left: <span class="hljs-number">0</span>,<br>      right: <span class="hljs-number">0</span>,<br>      child: Obx(() =&gt; AppBar(<br>            leading: controller.flag.value<br>                ? <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;&quot;</span>)<br>                : <span class="hljs-keyword">const</span> Icon(<br>                    ItyingFonts.xiaomi,<br>                    color: Colors.white,<br>                  ),<br>            leadingWidth: controller.flag.value<br>                ? ScreenAdapter.width(<span class="hljs-number">40</span>)<br>                : ScreenAdapter.width(<span class="hljs-number">140</span>),<br>            title: InkWell(<br>              child: AnimatedContainer(<br>                width: controller.flag.value<br>                    ? ScreenAdapter.width(<span class="hljs-number">800</span>)<br>                    : ScreenAdapter.width(<span class="hljs-number">620</span>),<br>                height: ScreenAdapter.height(<span class="hljs-number">96</span>),<br>                decoration: BoxDecoration(<br>                  color: <span class="hljs-keyword">const</span> Color.fromRGBO(<span class="hljs-number">246</span>, <span class="hljs-number">246</span>, <span class="hljs-number">246</span>, <span class="hljs-number">1</span>),<br>                  borderRadius: BorderRadius.circular(<span class="hljs-number">30</span>),<br>                ),<br>                duration: <span class="hljs-keyword">const</span> <span class="hljs-built_in">Duration</span>(milliseconds: <span class="hljs-number">600</span>),<br>                child: Row(<br>                  crossAxisAlignment: CrossAxisAlignment.center,<br>                  children: [<br>                    Padding(<br>                      padding: EdgeInsets.fromLTRB(ScreenAdapter.width(<span class="hljs-number">34</span>), <span class="hljs-number">0</span>,<br>                          ScreenAdapter.width(<span class="hljs-number">10</span>), <span class="hljs-number">0</span>),<br>                      child: <span class="hljs-keyword">const</span> Icon(Icons.search, color: Colors.black54),<br>                    ),<br>                    Text(<span class="hljs-string">&quot;手机&quot;</span>,<br>                        style: TextStyle(<br>                            color: Colors.black54,<br>                            fontSize: ScreenAdapter.fontSize(<span class="hljs-number">32</span>)))<br>                  ],<br>                ),<br>              ),<br>              onTap: () &#123;<br>                Get.toNamed(<span class="hljs-string">&quot;/search&quot;</span>);<br>              &#125;,<br>            ),<br>            centerTitle: <span class="hljs-keyword">true</span>,<br>            backgroundColor:<br>                controller.flag.value ? Colors.white : Colors.transparent,<br>            elevation: <span class="hljs-number">0</span>,<br>            actions: [<br>              IconButton(<br>                  onPressed: () &#123;&#125;,<br>                  icon: Icon(<br>                    Icons.qr_code,<br>                    color:<br>                        controller.flag.value ? Colors.black87 : Colors.white,<br>                  )),<br>              IconButton(<br>                  onPressed: () &#123;&#125;,<br>                  icon: Icon(Icons.message,<br>                      color: controller.flag.value<br>                          ? Colors.black87<br>                          : Colors.white))<br>            ],<br>          )),<br>    );<br>  &#125;<br><br>  <span class="hljs-comment">//轮播图</span><br>  Widget _focus() &#123;<br>    <span class="hljs-keyword">return</span> SizedBox(<br>      width: ScreenAdapter.width(<span class="hljs-number">1080</span>),<br>      height: ScreenAdapter.height(<span class="hljs-number">682</span>),<br>      child: Obx(() =&gt; Swiper(<br>            itemBuilder: (context, index) &#123;<br>              <span class="hljs-keyword">return</span> Image.network(<br>                HttpsClient.replaeUri(controller.swiperList[index].pic),<br>                fit: BoxFit.fill,<br>              );<br>            &#125;,<br>            itemCount: controller.swiperList.length,<br>            pagination: <span class="hljs-keyword">const</span> SwiperPagination(builder: SwiperPagination.rect),<br>            autoplay: <span class="hljs-keyword">true</span>,<br>            loop: <span class="hljs-keyword">true</span>,<br>            <span class="hljs-comment">// duration:3000</span><br>          )),<br>    );<br>  &#125;<br><br>  <span class="hljs-comment">//banner</span><br>  Widget _banner() &#123;<br>    <span class="hljs-keyword">return</span> SizedBox(<br>      width: ScreenAdapter.width(<span class="hljs-number">1080</span>),<br>      height: ScreenAdapter.height(<span class="hljs-number">92</span>),<br>      child: Image.asset(<br>        <span class="hljs-string">&quot;assets/images/xiaomiBanner.png&quot;</span>,<br>        fit: BoxFit.cover,<br>      ),<br>    );<br>  &#125;<br><br>  <span class="hljs-comment">//顶部滑动分类</span><br>  Widget _category() &#123;<br>    <span class="hljs-keyword">return</span> SizedBox(<br>      width: ScreenAdapter.width(<span class="hljs-number">1080</span>),<br>      height: ScreenAdapter.height(<span class="hljs-number">470</span>),<br>      <span class="hljs-comment">// color: Colors.red,</span><br>      child: Obx(() =&gt; Swiper(<br>            itemBuilder: (context, index) &#123;<br>              <span class="hljs-keyword">return</span> GridView.builder(<br>                  itemCount: <span class="hljs-number">10</span>,<br>                  gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(<br>                    crossAxisCount: <span class="hljs-number">5</span>,<br>                    crossAxisSpacing: ScreenAdapter.width(<span class="hljs-number">20</span>),<br>                    mainAxisSpacing: ScreenAdapter.height(<span class="hljs-number">20</span>),<br>                  ),<br>                  itemBuilder: (context, i) &#123;<br>                    <span class="hljs-keyword">return</span> Column(<br>                      children: [<br>                        Container(<br>                          alignment: Alignment.center,<br>                          width: ScreenAdapter.height(<span class="hljs-number">140</span>),<br>                          height: ScreenAdapter.height(<span class="hljs-number">140</span>),<br>                          child: Image.network(<br>                              HttpsClient.replaeUri(<br>                                  controller.categoryList[index * <span class="hljs-number">10</span> + i].pic),<br>                              fit: BoxFit.fitHeight),<br>                        ),<br>                        Padding(<br>                          padding: EdgeInsets.fromLTRB(<br>                              <span class="hljs-number">0</span>, ScreenAdapter.height(<span class="hljs-number">4</span>), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>),<br>                          child: Text(<br>                              <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;controller.categoryList[index * <span class="hljs-number">10</span> + i].title&#125;</span>&quot;</span>,<br>                              style: TextStyle(<br>                                  fontSize: ScreenAdapter.fontSize(<span class="hljs-number">34</span>))),<br>                        )<br>                      ],<br>                    );<br>                  &#125;);<br>            &#125;,<br>            itemCount: controller.categoryList.length ~/ <span class="hljs-number">10</span>, <span class="hljs-comment">//取整</span><br>            pagination: SwiperPagination(<br>                margin: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">0.0</span>),<br>                builder: SwiperCustomPagination(<br>                    builder: (BuildContext context, SwiperPluginConfig config) &#123;<br>                  <span class="hljs-keyword">return</span> ConstrainedBox(<br>                    constraints:<br>                        BoxConstraints.expand(height: ScreenAdapter.height(<span class="hljs-number">20</span>)),<br>                    child: Row(<br>                      children: &lt;Widget&gt;[<br>                        Expanded(<br>                          child: Align(<br>                            alignment: Alignment.center,<br>                            child: <span class="hljs-keyword">const</span> RectSwiperPaginationBuilder(<br>                              color: Colors.black12,<br>                              activeColor: Colors.black54,<br>                            ).build(context, config),<br>                          ),<br>                        )<br>                      ],<br>                    ),<br>                  );<br>                &#125;)),<br>          )),<br>    );<br>  &#125;<br><br>  <span class="hljs-comment">//banner</span><br>  Widget _banner2() &#123;<br>    <span class="hljs-keyword">return</span> Padding(<br>      padding: EdgeInsets.fromLTRB(ScreenAdapter.width(<span class="hljs-number">20</span>),<br>          ScreenAdapter.height(<span class="hljs-number">20</span>), ScreenAdapter.width(<span class="hljs-number">20</span>), <span class="hljs-number">0</span>),<br>      child: Container(<br>        decoration: BoxDecoration(<br>            borderRadius: BorderRadius.circular(ScreenAdapter.width(<span class="hljs-number">20</span>)),<br>            color: Colors.red,<br>            image: <span class="hljs-keyword">const</span> DecorationImage(<br>                fit: BoxFit.cover,<br>                image: AssetImage(<span class="hljs-string">&quot;assets/images/xiaomiBanner2.png&quot;</span>))),<br>        height: ScreenAdapter.height(<span class="hljs-number">420</span>),<br>      ),<br>    );<br>  &#125;<br><br><span class="hljs-comment">//热销臻选</span><br>  Widget _bestSelling() &#123;<br>    <span class="hljs-keyword">return</span> Column(<br>      children: [<br>        Padding(<br>            padding: EdgeInsets.fromLTRB(<br>                ScreenAdapter.width(<span class="hljs-number">30</span>),<br>                ScreenAdapter.height(<span class="hljs-number">40</span>),<br>                ScreenAdapter.width(<span class="hljs-number">30</span>),<br>                ScreenAdapter.height(<span class="hljs-number">20</span>)),<br>            child: Row(<br>              mainAxisAlignment: MainAxisAlignment.spaceBetween,<br>              crossAxisAlignment: CrossAxisAlignment.center,<br>              children: [<br>                Text(<span class="hljs-string">&quot;热销臻选&quot;</span>,<br>                    style: TextStyle(<br>                        fontWeight: FontWeight.bold,<br>                        fontSize: ScreenAdapter.fontSize(<span class="hljs-number">46</span>))),<br>                Text(<span class="hljs-string">&quot;更多手机推荐 &gt;&quot;</span>,<br>                    style: TextStyle(fontSize: ScreenAdapter.fontSize(<span class="hljs-number">38</span>)))<br>              ],<br>            )),<br>        Padding(<br>          padding: EdgeInsets.fromLTRB(ScreenAdapter.width(<span class="hljs-number">20</span>), <span class="hljs-number">0</span>,<br>              ScreenAdapter.width(<span class="hljs-number">20</span>), ScreenAdapter.height(<span class="hljs-number">20</span>)),<br>          child: Row(<br>            children: [<br>              <span class="hljs-comment">//左侧</span><br>              Expanded(<br>                  flex: <span class="hljs-number">1</span>,<br>                  child: SizedBox(<br>                    height: ScreenAdapter.height(<span class="hljs-number">738</span>),<br>                    child: Obx(() =&gt; Swiper(<br>                        itemBuilder: (context, index) &#123;<br>                          <span class="hljs-keyword">return</span> Image.network(<br>                            HttpsClient.replaeUri(<br>                                controller.bestSellingSwiperList[index].pic),<br>                            fit: BoxFit.fill,<br>                          );<br>                        &#125;,<br>                        itemCount: controller.bestSellingSwiperList.length,<br>                        autoplay: <span class="hljs-keyword">true</span>,<br>                        loop: <span class="hljs-keyword">true</span>,<br>                        pagination: SwiperPagination(<br>                            margin: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">0.0</span>),<br>                            builder: SwiperCustomPagination(builder:<br>                                (BuildContext context,<br>                                    SwiperPluginConfig config) &#123;<br>                              <span class="hljs-keyword">return</span> ConstrainedBox(<br>                                constraints: BoxConstraints.expand(<br>                                    height: ScreenAdapter.height(<span class="hljs-number">36</span>)),<br>                                child: Row(<br>                                  children: &lt;Widget&gt;[<br>                                    Expanded(<br>                                      child: Align(<br>                                        alignment: Alignment.center,<br>                                        child:<br>                                            <span class="hljs-keyword">const</span> RectSwiperPaginationBuilder(<br>                                          color: Colors.black12,<br>                                          activeColor: Colors.black54,<br>                                        ).build(context, config),<br>                                      ),<br>                                    )<br>                                  ],<br>                                ),<br>                              );<br>                            &#125;)))),<br>                  )),<br>              SizedBox(width: ScreenAdapter.width(<span class="hljs-number">20</span>)),<br>              <span class="hljs-comment">//右侧</span><br>              Expanded(<br>                  flex: <span class="hljs-number">1</span>,<br>                  child: SizedBox(<br>                    height: ScreenAdapter.height(<span class="hljs-number">738</span>),<br>                    child: Obx(() =&gt; Column(<br>                            children: controller.sellingPlist<br>                                .asMap()<br>                                .entries<br>                                .map((entrie) &#123;<br>                          <span class="hljs-keyword">var</span> value = entrie.value;<br>                          <span class="hljs-keyword">return</span> Expanded(<br>                              flex: <span class="hljs-number">1</span>,<br>                              child: Container(<br>                                color: <span class="hljs-keyword">const</span> Color.fromRGBO(<span class="hljs-number">246</span>, <span class="hljs-number">246</span>, <span class="hljs-number">246</span>, <span class="hljs-number">1</span>),<br>                                margin: EdgeInsets.fromLTRB(<br>                                    <span class="hljs-number">0</span>,<br>                                    <span class="hljs-number">0</span>,<br>                                    <span class="hljs-number">0</span>,<br>                                    entrie.key == <span class="hljs-number">2</span><br>                                        ? <span class="hljs-number">0</span><br>                                        : ScreenAdapter.height(<span class="hljs-number">20</span>)),<br>                                child: Row(<br>                                  children: [<br>                                    Expanded(<br>                                      flex: <span class="hljs-number">3</span>,<br>                                      child: Column(<br>                                        children: [<br>                                          SizedBox(<br>                                              height: ScreenAdapter.height(<span class="hljs-number">20</span>)),<br>                                          Text(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;value.title&#125;</span>&quot;</span>,<br>                                              style: TextStyle(<br>                                                  fontSize:<br>                                                      ScreenAdapter.fontSize(<br>                                                          <span class="hljs-number">38</span>),<br>                                                  fontWeight: FontWeight.bold)),<br>                                          SizedBox(<br>                                              height: ScreenAdapter.height(<span class="hljs-number">20</span>)),<br>                                          Text(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;value.subTitle&#125;</span>&quot;</span>,<br>                                              style: TextStyle(<br>                                                  fontSize:<br>                                                      ScreenAdapter.fontSize(<br>                                                          <span class="hljs-number">28</span>))),<br>                                          SizedBox(<br>                                              height: ScreenAdapter.height(<span class="hljs-number">20</span>)),<br>                                          Text(<span class="hljs-string">&quot;￥<span class="hljs-subst">$&#123;value.price&#125;</span>元&quot;</span>,<br>                                              style: TextStyle(<br>                                                  fontSize:<br>                                                      ScreenAdapter.fontSize(<br>                                                          <span class="hljs-number">34</span>)))<br>                                        ],<br>                                      ),<br>                                    ),<br>                                    Expanded(<br>                                      flex: <span class="hljs-number">2</span>,<br>                                      child: Padding(<br>                                        padding: EdgeInsets.all(<br>                                            ScreenAdapter.height(<span class="hljs-number">8</span>)),<br>                                        child: Image.network(<br>                                            HttpsClient.replaeUri(value.pic),<br>                                            fit: BoxFit.cover),<br>                                      ),<br>                                    )<br>                                  ],<br>                                ),<br>                              ));<br>                        &#125;).toList())),<br>                  )),<br>            ],<br>          ),<br>        )<br>      ],<br>    );<br>  &#125;<br><br>  Widget _bestGoods() &#123;<br>    <span class="hljs-keyword">return</span> Column(<br>      children: [<br>        Padding(<br>            padding: EdgeInsets.fromLTRB(<br>                ScreenAdapter.width(<span class="hljs-number">30</span>),<br>                ScreenAdapter.height(<span class="hljs-number">40</span>),<br>                ScreenAdapter.width(<span class="hljs-number">30</span>),<br>                ScreenAdapter.height(<span class="hljs-number">20</span>)),<br>            child: Row(<br>              mainAxisAlignment: MainAxisAlignment.spaceBetween,<br>              crossAxisAlignment: CrossAxisAlignment.center,<br>              children: [<br>                Text(<span class="hljs-string">&quot;省心优惠&quot;</span>,<br>                    style: TextStyle(<br>                        fontWeight: FontWeight.bold,<br>                        fontSize: ScreenAdapter.fontSize(<span class="hljs-number">46</span>))),<br>                Text(<span class="hljs-string">&quot;全部优惠 &gt;&quot;</span>,<br>                    style: TextStyle(fontSize: ScreenAdapter.fontSize(<span class="hljs-number">38</span>)))<br>              ],<br>            )),<br>        Obx(() =&gt; Container(<br>              padding: EdgeInsets.all(ScreenAdapter.width(<span class="hljs-number">26</span>)),<br>              color: <span class="hljs-keyword">const</span> Color.fromRGBO(<span class="hljs-number">246</span>, <span class="hljs-number">246</span>, <span class="hljs-number">246</span>, <span class="hljs-number">1</span>),<br>              child: MasonryGridView.count(<br>                crossAxisCount: <span class="hljs-number">2</span>,<br>                mainAxisSpacing: ScreenAdapter.width(<span class="hljs-number">26</span>),<br>                crossAxisSpacing: ScreenAdapter.width(<span class="hljs-number">26</span>),<br>                itemCount: controller.bestPlist.length, <span class="hljs-comment">//注意</span><br>                shrinkWrap: <span class="hljs-keyword">true</span>, <span class="hljs-comment">//收缩，让元素宽度自适应</span><br>                physics: <span class="hljs-keyword">const</span> NeverScrollableScrollPhysics(), <span class="hljs-comment">//禁止滑动</span><br>                itemBuilder: (context, index) &#123;<br>                  <span class="hljs-keyword">return</span> InkWell(<br>                    onTap: () &#123;<br>                      Get.toNamed(<span class="hljs-string">&quot;/product-content&quot;</span>,<br>                          arguments: &#123;<span class="hljs-string">&quot;id&quot;</span>: controller.bestPlist[index].sId&#125;);<br>                    &#125;,<br>                    child: Container(<br>                      padding: EdgeInsets.all(ScreenAdapter.width(<span class="hljs-number">20</span>)),<br>                      decoration: BoxDecoration(<br>                        borderRadius: BorderRadius.circular(<span class="hljs-number">10</span>),<br>                        color: Colors.white,<br>                      ),<br>                      child: Column(<br>                        children: [<br>                          Container(<br>                            padding: EdgeInsets.all(ScreenAdapter.width(<span class="hljs-number">10</span>)),<br>                            child: Image.network(<br>                              HttpsClient.replaeUri(<br>                                  controller.bestPlist[index].sPic),<br>                              fit: BoxFit.cover,<br>                            ),<br>                          ),<br>                          Container(<br>                            padding: EdgeInsets.all(ScreenAdapter.width(<span class="hljs-number">10</span>)),<br>                            width: <span class="hljs-built_in">double</span>.infinity,<br>                            child: Text(<br>                              <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;controller.bestPlist[index].title&#125;</span>&quot;</span>,<br>                              textAlign: TextAlign.start,<br>                              style: TextStyle(<br>                                  fontSize: ScreenAdapter.fontSize(<span class="hljs-number">42</span>),<br>                                  fontWeight: FontWeight.bold),<br>                            ),<br>                          ),<br>                          Container(<br>                            padding: EdgeInsets.all(ScreenAdapter.width(<span class="hljs-number">10</span>)),<br>                            width: <span class="hljs-built_in">double</span>.infinity,<br>                            child: Text(<br>                              <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;controller.bestPlist[index].subTitle&#125;</span>&quot;</span>,<br>                              textAlign: TextAlign.start,<br>                              style: TextStyle(<br>                                  fontSize: ScreenAdapter.fontSize(<span class="hljs-number">32</span>)),<br>                            ),<br>                          ),<br>                          Container(<br>                            padding: EdgeInsets.all(ScreenAdapter.width(<span class="hljs-number">10</span>)),<br>                            width: <span class="hljs-built_in">double</span>.infinity,<br>                            child: Text(<br>                              <span class="hljs-string">&quot;¥<span class="hljs-subst">$&#123;controller.bestPlist[index].price&#125;</span>&quot;</span>,<br>                              textAlign: TextAlign.start,<br>                              style: TextStyle(<br>                                  fontSize: ScreenAdapter.fontSize(<span class="hljs-number">32</span>),<br>                                  fontWeight: FontWeight.bold),<br>                            ),<br>                          ),<br>                        ],<br>                      ),<br>                    ),<br>                  );<br>                &#125;,<br>              ),<br>            ))<br>      ],<br>    );<br>  &#125;<br><br>  <span class="hljs-comment">//内容区域</span><br>  Widget _homePage() &#123;<br>    <span class="hljs-keyword">return</span> Positioned(<br>        top: <span class="hljs-number">-40</span>,<br>        left: <span class="hljs-number">0</span>,<br>        right: <span class="hljs-number">0</span>,<br>        bottom: <span class="hljs-number">0</span>,<br>        child: ListView(<br>          controller: controller.scrollController,<br>          children: [<br>            _focus(),<br>            _banner(),<br>            _category(),<br>            _banner2(),<br>            _bestSelling(),<br>            _bestGoods(),<br>          ],<br>        ));<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> KeepAliveWrapper(<br>        child: Scaffold(<br>      body: Stack(<br>        children: [_homePage(), _appBar()],<br>      ),<br>    ));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要布局为， 顶部一个导航栏，点击搜索框进入到 搜索页面， 下拉滑动页面的时候，顶部导航图标会执行一个大小变化的动画 。 接下来是轮播图，可以通过<code>Swiper</code>组件来设置属性，， 也可以用来做下面的滑动分类。其中首页数据请求接口来获得。接口<code>controller</code> 如下 </p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomeController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GetxController</span> </span>&#123;<br>  <span class="hljs-comment">//浮动导航开关</span><br>  RxBool flag = <span class="hljs-keyword">false</span>.obs;<br>  <span class="hljs-comment">//ScrollController</span><br>  <span class="hljs-keyword">final</span> ScrollController scrollController = ScrollController();<br>  RxList&lt;FocusItemModel&gt; swiperList = &lt;FocusItemModel&gt;[].obs; <span class="hljs-comment">//注意需要定义成响应式数据</span><br>  RxList&lt;FocusItemModel&gt; bestSellingSwiperList = &lt;FocusItemModel&gt;[].obs;<br>  RxList&lt;CategoryItemModel&gt; categoryList = &lt;CategoryItemModel&gt;[].obs;<br>  RxList&lt;PlistItemModel&gt; sellingPlist = &lt;PlistItemModel&gt;[].obs;<br>  RxList&lt;PlistItemModel&gt; bestPlist = &lt;PlistItemModel&gt;[].obs;<br>  HttpsClient httpsClient = HttpsClient();<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> onInit() &#123;<br>    <span class="hljs-keyword">super</span>.onInit();<br><br>    scrollControllerListener();<br>    <span class="hljs-comment">//请求接口</span><br>    getFocusData();<br>    <span class="hljs-comment">//获取分类数据</span><br>    getCategoryData();<br>    <span class="hljs-comment">//获取热销臻选里面的轮播图</span><br>    getSellingSwiperData();<br>    <span class="hljs-comment">//获取热销臻选里面的商品</span><br>    getSellingPlistData();<br>    <span class="hljs-comment">// 获取热门商品</span><br>    getBestPlistData();<br>  &#125;<br><br>  <span class="hljs-comment">//监听滚动条滚动事件</span><br>  <span class="hljs-keyword">void</span> scrollControllerListener() &#123;<br>    scrollController.addListener(() &#123;<br>      <span class="hljs-keyword">if</span> (scrollController.position.pixels &gt; <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-keyword">if</span> (flag.value == <span class="hljs-keyword">false</span>) &#123;<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;position.pixels &gt; 10&quot;</span>);<br>          flag.value = <span class="hljs-keyword">true</span>;<br>          update();<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (scrollController.position.pixels &lt; <span class="hljs-number">10</span>) &#123;<br>        <span class="hljs-keyword">if</span> (flag.value == <span class="hljs-keyword">true</span>) &#123;<br>          <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;position.pixels &lt; 10&quot;</span>);<br>          flag.value = <span class="hljs-keyword">false</span>;<br>          update();<br>        &#125;<br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">//获取轮播图数据</span><br>  getFocusData() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">var</span> response = <span class="hljs-keyword">await</span> httpsClient.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;api/focus&quot;</span>);<br>    <span class="hljs-keyword">if</span> (response != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">var</span> focus = FocusModel.fromJson(response.data);<br>      swiperList.value = focus.result!;<br>      update();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//获取热销臻选里面的轮播图</span><br>  getSellingSwiperData() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">var</span> response = <span class="hljs-keyword">await</span> httpsClient.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;api/focus?position=2&quot;</span>);<br>    <span class="hljs-keyword">if</span> (response != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">var</span> sellingSwiper = FocusModel.fromJson(response.data);<br>      bestSellingSwiperList.value = sellingSwiper.result!;<br>      update();<br>    &#125;<br>  &#125;<br><br><span class="hljs-comment">//获取热销臻选里面的商品数据</span><br>  getSellingPlistData() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">var</span> response = <span class="hljs-keyword">await</span> httpsClient.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;api/plist?is_hot=1&amp;pageSize=3&quot;</span>);<br>    <span class="hljs-keyword">if</span> (response != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">var</span> plist = PlistModel.fromJson(response.data);<br>      sellingPlist.value = plist.result!;<br>      update();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//获取分类数据</span><br>  getCategoryData() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">var</span> response = <span class="hljs-keyword">await</span> httpsClient.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;api/bestCate&quot;</span>);<br>    <span class="hljs-keyword">if</span> (response != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">var</span> category = CategoryModel.fromJson(response.data);<br>      categoryList.value = category.result!;<br>      update();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//获取热门商品数据</span><br>  getBestPlistData() <span class="hljs-keyword">async</span> &#123;<br>    <span class="hljs-keyword">var</span> response = <span class="hljs-keyword">await</span> httpsClient.<span class="hljs-keyword">get</span>(<span class="hljs-string">&quot;api/plist?is_best=1&quot;</span>);<br>    <span class="hljs-keyword">if</span> (response != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">var</span> plist = PlistModel.fromJson(response.data);<br>      bestPlist.value = plist.result!;<br>      update();<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​通过<code>Dio</code> 来进行接口获取数据，在进入首页初始化首页的时候， 在<code>onInit</code>方法中进行接口数据的获取。</p>]]></content>
    
    
    <categories>
      
      <category>客户端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简易打字算数游戏</title>
    <link href="/2024/06/14/%E7%AE%80%E6%98%93%E6%89%93%E5%AD%97%E7%AE%97%E6%95%B0%E6%B8%B8%E6%88%8F/"/>
    <url>/2024/06/14/%E7%AE%80%E6%98%93%E6%89%93%E5%AD%97%E7%AE%97%E6%95%B0%E6%B8%B8%E6%88%8F/</url>
    
    <content type="html"><![CDATA[<p>项目简介</p><blockquote><p>游戏开始，会随机从屏幕上方的随机位置落下一些十以内的加法，通过操作屏幕下的键盘按钮输入对应的答案，如果答案正确那么该算数会消失，并累加得分，如果下落的算数到底部了还没有输入正确答案，则扣分。</p></blockquote><p><img src="/img%5Ctypegame.png"></p><h2 id="一-创建键盘"><a href="#一-创建键盘" class="headerlink" title="一. 创建键盘"></a>一. 创建键盘</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//键盘 子组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyPad</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> StreamController&lt;<span class="hljs-built_in">int</span>&gt; inputController;<br>  <span class="hljs-keyword">const</span> KeyPad(&#123;<span class="hljs-keyword">super</span>.key, <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.inputController&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Align(<br>      alignment: Alignment.bottomCenter,<br>      child: Container(<br>        color: Colors.red,<br>        child: GridView.count(<br>          shrinkWrap: <span class="hljs-keyword">true</span>, <span class="hljs-comment">//收缩</span><br>          crossAxisCount: <span class="hljs-number">3</span>,<br>          childAspectRatio: <span class="hljs-number">5</span> / <span class="hljs-number">2</span>,<br>          children: <span class="hljs-built_in">List</span>.generate(<span class="hljs-number">9</span>, (index) &#123;<br>            <span class="hljs-keyword">return</span> TextButton(<br>                style: ButtonStyle(<br>                    shape: MaterialStateProperty.all(<br>                        <span class="hljs-keyword">const</span> RoundedRectangleBorder()),<br>                    backgroundColor:<br>                        MaterialStateProperty.all(Colors.primaries[index][<span class="hljs-number">300</span>]),<br>                    foregroundColor: MaterialStateProperty.all(Colors.black)),<br>                onPressed: () &#123;<br>                  inputController.add(index + <span class="hljs-number">1</span>);<br>                &#125;,<br>                child: Text(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;index + <span class="hljs-number">1</span>&#125;</span>&quot;</span>,<br>                    style: Theme.of(context).textTheme.headline4));<br>          &#125;),<br>        ),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码创建了一个键盘组件，利用<code>GridView</code>网格布局创建了一个每行具有3列的网格，<code>childAspectRatio</code>表示是子项的一个宽高比。利用<code>List.generate</code>生成一个9个按钮组件。</p><p>二. 游戏子组件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">//算数  游戏 子组件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Game</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> StreamController&lt;<span class="hljs-built_in">int</span>&gt; inputController;<br>  <span class="hljs-keyword">final</span> StreamController&lt;<span class="hljs-built_in">int</span>&gt; scoreController;<br><br>  <span class="hljs-keyword">const</span> Game(<br>      &#123;<span class="hljs-keyword">super</span>.key,<br>      <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.inputController,<br>      <span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.scoreController&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;Game&gt; createState() =&gt; _GameState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_GameState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">Game</span>&gt; <span class="hljs-title">with</span> <span class="hljs-title">SingleTickerProviderStateMixin</span> </span>&#123;<br>  <span class="hljs-keyword">late</span> <span class="hljs-built_in">int</span> a, b;<br>  <span class="hljs-keyword">late</span> <span class="hljs-built_in">double</span> x;<br>  <span class="hljs-keyword">late</span> AnimationController _animationController;<br>  <span class="hljs-keyword">late</span> Color color;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> reset() &#123;<br>    a = Random().nextInt(<span class="hljs-number">5</span>) + <span class="hljs-number">1</span>;<br>    b = Random().nextInt(<span class="hljs-number">5</span>);<br>    x = Random().nextDouble() * <span class="hljs-number">320</span>;<br>    color = Colors.primaries[Random().nextInt(Colors.primaries.length)];<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-keyword">super</span>.initState();<br><br>    reset();<br>    _animationController = AnimationController(<br>        vsync: <span class="hljs-keyword">this</span>,<br>        duration: <span class="hljs-built_in">Duration</span>(milliseconds: Random().nextInt(<span class="hljs-number">5000</span>) + <span class="hljs-number">5000</span>));<br><br>    _animationController.forward(); <span class="hljs-comment">//执行一次动画</span><br><br>    _animationController.addStatusListener((status) &#123;<br>      <span class="hljs-keyword">if</span> (status == AnimationStatus.completed) &#123;<br>        <span class="hljs-comment">//监听动画执行完成</span><br>        <span class="hljs-comment">//生成随机数</span><br>        reset();<br>        widget.scoreController.add(<span class="hljs-number">-1</span>); <span class="hljs-comment">//最底部减去1分</span><br>        _animationController.forward(from: <span class="hljs-number">0.0</span>); <span class="hljs-comment">//重新执行一次动画</span><br>      &#125;<br>    &#125;);<br><br>    <span class="hljs-comment">//监听键盘按键</span><br>    widget.inputController.stream.listen((event) &#123;<br>      <span class="hljs-built_in">print</span>(event);<br>      <span class="hljs-keyword">if</span> (a + b == event) &#123;<br>        reset();<br>        widget.scoreController.add(<span class="hljs-number">3</span>); <span class="hljs-comment">//打中加3分</span><br>        _animationController.forward(from: <span class="hljs-number">0.0</span>);<br>      &#125;<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> AnimatedBuilder(<br>        animation: _animationController,<br>        builder: (context, child) &#123;<br>          <span class="hljs-keyword">return</span> Positioned(<br>            top: Tween(begin: <span class="hljs-number">-50.0</span>, end: <span class="hljs-number">560.0</span>)<br>                .animate(_animationController)<br>                .value,<br>            left: x,<br>            child: Container(<br>              padding: <span class="hljs-keyword">const</span> EdgeInsets.fromLTRB(<span class="hljs-number">8</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>),<br>              decoration: BoxDecoration(<br>                  color: color, borderRadius: BorderRadius.circular(<span class="hljs-number">18</span>)),<br>              child: Text(<span class="hljs-string">&quot;<span class="hljs-subst">$a</span>+<span class="hljs-subst">$b</span>=？&quot;</span>, style: TextStyle(fontSize: <span class="hljs-number">24</span>)),<br>            ),<br>          );<br>        &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个组件中，主要定义了一些随机数用来随机生成一个向下掉落的算数组件，其中<code>inputController</code>监听键盘输入，<code>scoreController</code> 监听输入得到正确答案后加分计数。</p><p>三. 页面展示</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> HomePage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;HomePage&gt; createState() =&gt; _HomePageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_HomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">HomePage</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">final</span> StreamController&lt;<span class="hljs-built_in">int</span>&gt; _inputController =<br>      StreamController.broadcast(); <span class="hljs-comment">//可以有多个监听者</span><br>  <span class="hljs-keyword">final</span> StreamController&lt;<span class="hljs-built_in">int</span>&gt; _scoreController = StreamController.broadcast();<br><br>  <span class="hljs-built_in">int</span> score = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(<br>        centerTitle: <span class="hljs-keyword">true</span>,<br>        title: StreamBuilder(<br>            stream: _scoreController.stream,<br>            builder: (context, snapshot) &#123;<br>              <span class="hljs-keyword">if</span> (snapshot.hasData) &#123;<br>                score += snapshot.data <span class="hljs-keyword">as</span> <span class="hljs-built_in">int</span>;<br>                <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&quot;得分：<span class="hljs-subst">$&#123;score&#125;</span>&quot;</span>);<br>              &#125;<br>              <span class="hljs-keyword">if</span> (snapshot.hasError) &#123;<br>                <span class="hljs-keyword">return</span> Text(<span class="hljs-string">&quot;Error:<span class="hljs-subst">$&#123;snapshot.error&#125;</span>&quot;</span>);<br>              &#125;<br>              <span class="hljs-keyword">return</span> <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;监听中..&quot;</span>);<br>            &#125;),<br>      ),<br>      body: Stack(<br>        children: [<br>          ...<span class="hljs-built_in">List</span>.generate(<span class="hljs-number">3</span>, (index) &#123;<br>            <span class="hljs-keyword">return</span> Game(<br>              inputController: _inputController,<br>              scoreController: _scoreController,<br>            );<br>          &#125;),<br>          KeyPad(<br>            inputController: _inputController,<br>          )<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>客户端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>duolinguo学习越南语1</title>
    <link href="/2024/06/10/duolinguo%E5%AD%A6%E4%B9%A0%E8%B6%8A%E5%8D%97%E8%AF%AD1/"/>
    <url>/2024/06/10/duolinguo%E5%AD%A6%E4%B9%A0%E8%B6%8A%E5%8D%97%E8%AF%AD1/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">Tiếng Trung</th><th align="center">Tiếng Việt</th><th align="center">Câu</th></tr></thead><tbody><tr><td align="center">桌子</td><td align="center">bàn</td><td align="center">Vui long cho  một bàn cho bốn người</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>越南语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>越南语坚持学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>animation动画</title>
    <link href="/2024/06/09/animation%E5%8A%A8%E7%94%BB/"/>
    <url>/2024/06/09/animation%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      title: <span class="hljs-string">&#x27;Flutter Demo&#x27;</span>,<br>      theme: ThemeData(primarySwatch: Colors.blue),<br>      home: <span class="hljs-keyword">const</span> MyHomePage(),<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyHomePage(&#123;<span class="hljs-keyword">super</span>.key&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyHomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyHomePage</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">bool</span> flag = <span class="hljs-keyword">true</span>;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>        floatingActionButton: FloatingActionButton(<br>          onPressed: () &#123;<br>            setState(() &#123;<br>              flag = !flag;<br>            &#125;);<br>          &#125;,<br>          child: <span class="hljs-keyword">const</span> Icon(Icons.refresh),<br>        ),<br>        appBar: AppBar(<br>          title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;TweenAnimationBuilder&#x27;</span>),<br>        ),<br>        body: Center(<br>          child: TweenAnimationBuilder(<br>              <span class="hljs-comment">// 当改变tween 的 end 参数的时候就会触发动画</span><br>              tween: Tween(begin: <span class="hljs-number">60.0</span>, end: flag ? <span class="hljs-number">60.0</span> : <span class="hljs-number">200.0</span>),<br>              duration: <span class="hljs-keyword">const</span> <span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">1</span>),<br>              builder: (context, value, child) &#123;<br>                <span class="hljs-keyword">return</span> Icon(<br>                  Icons.star,<br>                  size: value,<br>                );<br>              &#125;),<br>        ));<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>每当Tween 的 end参数发生变化的时候就会触发动画~ 上述案例是一个star图标，进行一个size 的动画缩放。  在Tween() 函数里，初始大小是60 ， 而结束大小是 200 ，记得参数是double类型，duration设置了动画时间是1秒。其中我们定义了一个 浮动按钮来控制flag的正反，这样可以看见图标的动画效果。同理，如果控制一个widget 的透明度也是如此。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs dart"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_MyHomePageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">MyHomePage</span>&gt; </span>&#123;<br>  <span class="hljs-built_in">bool</span> flag = <span class="hljs-keyword">true</span>;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>        floatingActionButton: FloatingActionButton(<br>          onPressed: () &#123;<br>            setState(() &#123;<br>              flag = !flag;<br>            &#125;);<br>          &#125;,<br>          child: <span class="hljs-keyword">const</span> Icon(Icons.refresh),<br>        ),<br>        appBar: AppBar(<br>          title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&#x27;TweenAnimationBuilder&#x27;</span>),<br>        ),<br>        body: Center(<br>          child: TweenAnimationBuilder(<br>              <span class="hljs-comment">// 当改变tween 的 end 参数的时候就会触发动画</span><br>              tween: Tween(begin: <span class="hljs-number">0.5</span>, end: flag ? <span class="hljs-number">0.5</span> : <span class="hljs-number">1.0</span>),<br>              duration: <span class="hljs-keyword">const</span> <span class="hljs-built_in">Duration</span>(seconds: <span class="hljs-number">1</span>),<br>              builder: (context, value, child) &#123;<br>                <span class="hljs-keyword">return</span> Opacity(<br>                  opacity: value,<br>                  child: Container(<br>                    width: <span class="hljs-number">200</span>,<br>                    height: <span class="hljs-number">200</span>,<br>                    color: Colors.red,<br>                  ),<br>                );<br>              &#125;),<br>        ));<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>flutter</category>
      
    </categories>
    
    
    <tags>
      
      <tag>客户端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>越南语日常句子2</title>
    <link href="/2024/05/30/%E8%B6%8A%E5%8D%97%E8%AF%AD%E6%97%A5%E5%B8%B8%E5%8F%A5%E5%AD%902/"/>
    <url>/2024/05/30/%E8%B6%8A%E5%8D%97%E8%AF%AD%E6%97%A5%E5%B8%B8%E5%8F%A5%E5%AD%902/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">Tiếng Việt</th><th align="center">Tiếng Trung</th></tr></thead><tbody><tr><td align="center">rất tốt</td><td align="center">很好</td></tr><tr><td align="center">tức cười quá</td><td align="center">很可笑</td></tr><tr><td align="center">rất lợi hại</td><td align="center">很厉害</td></tr><tr><td align="center">thật là tốt quá</td><td align="center">真是太好了</td></tr><tr><td align="center">tốt quá</td><td align="center">好极了</td></tr><tr><td align="center">giỏi quá</td><td align="center">好棒</td></tr><tr><td align="center">thoải mái quá</td><td align="center">很舒服</td></tr><tr><td align="center">dễ chịu quá</td><td align="center">好舒服</td></tr><tr><td align="center">thật là phiền quá</td><td align="center">太麻烦了</td></tr><tr><td align="center">thật chẳng ra gì</td><td align="center">真不像话</td></tr><tr><td align="center">tôi rất vui</td><td align="center">我很开心</td></tr><tr><td align="center">tôi rất buồn</td><td align="center">我很难过</td></tr><tr><td align="center">tôi rất nhớ nhà</td><td align="center">我很想家</td></tr><tr><td align="center">vất vả cho bạn quá</td><td align="center">辛苦你了</td></tr><tr><td align="center">thật là đáng thương quá</td><td align="center">真是好可怜</td></tr><tr><td align="center">anh ấy thật đáng thương</td><td align="center">他很可怜</td></tr><tr><td align="center">thế thì tốt quá</td><td align="center">那太好了</td></tr><tr><td align="center">anh ấy rất chu đáo</td><td align="center">他很周到</td></tr><tr><td align="center">cô ấy rất hiền hậu</td><td align="center">她很善良</td></tr><tr><td align="center">bạn thật quá đáng</td><td align="center">你太过分了</td></tr><tr><td align="center">việc này thật là quá đáng</td><td align="center">这件事实在太离谱了</td></tr><tr><td align="center">thật là hoang đương</td><td align="center">真是太荒谬了</td></tr><tr><td align="center">đi chỗ khác</td><td align="center">走开</td></tr><tr><td align="center">câm miệng</td><td align="center">闭嘴</td></tr><tr><td align="center">xin tha thứ</td><td align="center">请原谅</td></tr><tr><td align="center">xin bạn hãy thứ lỗi cho tôi</td><td align="center">请你原谅我</td></tr><tr><td align="center">xin hãy hiểu cho tôi</td><td align="center">请谅解</td></tr><tr><td align="center">xin đừng làm khó tôi</td><td align="center">请别为难我</td></tr><tr><td align="center">tôi rất khó xử</td><td align="center">我很难为情</td></tr><tr><td align="center">xin đừng đùa</td><td align="center">请别开玩笑</td></tr><tr><td align="center">thì ra là thế</td><td align="center">原来是这样</td></tr><tr><td align="center">xin thất lễ một chút</td><td align="center">我失陪一下</td></tr><tr><td align="center">lâu quá không gặp</td><td align="center">好久不见</td></tr><tr><td align="center">xin đợi một chút</td><td align="center">请等一会</td></tr><tr><td align="center">hoan nghênh</td><td align="center">欢迎</td></tr><tr><td align="center">chào mừng quí khách</td><td align="center">欢迎光临</td></tr><tr><td align="center">chào mừng ban lần sau lại đến</td><td align="center">欢迎你下次再来</td></tr><tr><td align="center">rảnh thì tới nữa nhé</td><td align="center">有空再来啊</td></tr><tr><td align="center">tôi phải đi đây</td><td align="center">我要走了</td></tr><tr><td align="center">cho gửi lời thăm gia đình bạn</td><td align="center">请问候你全家</td></tr><tr><td align="center">mời bạn đi lối này</td><td align="center">请你这边走</td></tr><tr><td align="center">đi từ từ nhé</td><td align="center">请慢走</td></tr><tr><td align="center">xin mời đi trước</td><td align="center">请先走</td></tr><tr><td align="center">xin hãy bảo trọng</td><td align="center">请保重</td></tr><tr><td align="center">hãy tự chăm sóc tốt cho mình</td><td align="center">要照顾好自己</td></tr><tr><td align="center">trên đường nhớ bảo trọng nhé</td><td align="center">路上多保重</td></tr><tr><td align="center">cẩn thận nhé</td><td align="center">小心点</td></tr><tr><td align="center">đi đường bình an</td><td align="center">路上平安</td></tr><tr><td align="center">thượng lộ bình an</td><td align="center">一路平安</td></tr><tr><td align="center">xin đừng hút thuốc</td><td align="center">请不抽烟</td></tr><tr><td align="center">cấm chụp hình</td><td align="center">禁止拍照</td></tr><tr><td align="center">cấm hút thuốc</td><td align="center">禁止吸烟</td></tr><tr><td align="center">cấm đậu xe</td><td align="center">禁止停车</td></tr><tr><td align="center">cấm dán quảng cáo</td><td align="center">禁止张贴广告</td></tr><tr><td align="center">không phận sự miễn vào</td><td align="center">非请勿入</td></tr><tr><td align="center">thường học</td><td align="center">学校</td></tr><tr><td align="center">xin chậm bước</td><td align="center">请减速慢行</td></tr><tr><td align="center">xin tiện tay đóng cửa</td><td align="center">请随手关门</td></tr><tr><td align="center">xin hãy mở cửa</td><td align="center">请把门打开</td></tr><tr><td align="center">xin đừng giẫm đạp lên cỏ</td><td align="center">请不要践踏草坪</td></tr><tr><td align="center">cảm ơn quí khách đã đến</td><td align="center">谢谢光临到来</td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>越南语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>越南语坚持学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>flutter路由</title>
    <link href="/2024/05/29/flutter/"/>
    <url>/2024/05/29/flutter/</url>
    
    <content type="html"><![CDATA[<h1 id="一-效果展示"><a href="#一-效果展示" class="headerlink" title="一. 效果展示"></a>一. 效果展示</h1><p>​首先向大家展示一下这个小demo的样子。存在一个最上方的<code>Flutter App</code>  AppBar 。在左侧有一个抽屉侧边栏。 下方则是五个Tab菜单栏。点击每个栏目会切换到不同的页面。</p><p><img src="/img/flutter1.png"></p><p>那么从这个简单的demo项目来从头开始讲解一个<code>flutter</code>项目的基础知识吧。</p><h1 id="二-Flutter项目基础"><a href="#二-Flutter项目基础" class="headerlink" title="二. Flutter项目基础"></a>二. Flutter项目基础</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./routers/routers.dart&#x27;</span>;<br><br><span class="hljs-keyword">void</span> main() &#123;<br>  runApp(<span class="hljs-keyword">const</span> MyApp());<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-comment">// This widget is the root of your application.</span><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> MaterialApp(<br>      debugShowCheckedModeBanner: <span class="hljs-keyword">false</span>,<br>      title: <span class="hljs-string">&#x27;Flutter Demo&#x27;</span>,<br>      theme: ThemeData(<br>          primarySwatch: Colors.blue,<br>          appBarTheme: <span class="hljs-keyword">const</span> AppBarTheme(<br>            centerTitle: <span class="hljs-keyword">true</span>,<br>          )),<br>      initialRoute: <span class="hljs-string">&quot;/&quot;</span>,<br>      onGenerateRoute: onGenerateRoute,<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><code>import &#39;package:flutter/material.dart&#39;;</code> 导入<code>material</code> 包，很重要，这个包提供的一套完整的构建UI的组件。</li><li>main 函数是整个flutter应用的入口。</li><li><code>runApp</code> 是运行应用程序，<code>MyApp</code>是整个应用的根组件。</li><li><code>MyApp</code> 类，继承自<code>StatelessWidget</code>, 其中<code>StatelessWidget</code>是无状态组件。其中无状态组件是指在生命周期内状态不会改变的组件。无状态组件在创建后不会改变数据和属性，因此适用于展示静态信息的场景。</li><li><code>const MyApp(&#123;Key? key&#125;) : super(key: key);</code>是构造函数。传递给父类构造函数，确保父类的构造函数可以正确初始化<code>key</code></li><li><code>build</code>函数中，其中<code>debugShowCheckedModeBanner</code>是隐藏右上角的调试横幅。<code>theme</code>主题可以配置主题配色，<code>initialRoute</code>初始化路由是根目录，<code>onGenerateRoute</code>是自定义的路由列表参数</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/cupertino.dart&#x27;</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">配置ios风格的路由</span><br><span class="hljs-comment">1、删掉material.dart引入cupertino.dart</span><br><span class="hljs-comment">   import &#x27;package:flutter/cupertino.dart&#x27;;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2、把 MaterialPageRoute替换成 CupertinoPageRoute</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../pages/tabs.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../pages/shop.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../pages/user/login.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../pages/user/registerFirst.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../pages/user/registerSecond.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;../pages/user/registerThird.dart&#x27;</span>;<br><span class="hljs-comment">//1、配置路由</span><br><span class="hljs-built_in">Map</span> routes = &#123;<br>  <span class="hljs-string">&quot;/&quot;</span>: (contxt) =&gt; <span class="hljs-keyword">const</span> Tabs(),   <br>  <span class="hljs-string">&quot;/login&quot;</span>: (contxt) =&gt; <span class="hljs-keyword">const</span> LoginPage(),   <br>  <span class="hljs-string">&quot;/registerFirst&quot;</span>: (contxt) =&gt; <span class="hljs-keyword">const</span> RegisterFirstPage(),   <br>  <span class="hljs-string">&quot;/registerSecond&quot;</span>: (contxt) =&gt; <span class="hljs-keyword">const</span> RegisterSecondPage(),   <br>  <span class="hljs-string">&quot;/registerThird&quot;</span>: (contxt) =&gt; <span class="hljs-keyword">const</span> RegisterThirdPage(),   <br>  <span class="hljs-string">&quot;/shop&quot;</span>: (contxt, &#123;arguments&#125;) =&gt; ShopPage(arguments: arguments),<br>&#125;;<br><br><span class="hljs-comment">//2、配置onGenerateRoute  固定写法  这个方法也相当于一个中间件，这里可以做权限判断</span><br><span class="hljs-keyword">var</span> onGenerateRoute = (RouteSettings settings) &#123; <br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String?</span> name = settings.name; <span class="hljs-comment">//  /news 或者 /search</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">Function?</span> pageContentBuilder = routes[name];                          <span class="hljs-comment">//  Function = (contxt) &#123; return const NewsPage()&#125;</span><br><br>  <span class="hljs-keyword">if</span> (pageContentBuilder != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (settings.arguments != <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-keyword">final</span> Route route = CupertinoPageRoute(<br>          builder: (context) =&gt;<br>              pageContentBuilder(context, arguments: settings.arguments));<br>      <span class="hljs-keyword">return</span> route;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">final</span> Route route =<br>          CupertinoPageRoute(builder: (context) =&gt; pageContentBuilder(context));<br><br>      <span class="hljs-keyword">return</span> route;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>上面是一个配置路由文件，通过点击不同的tab可以跳转到不同的页面。下面举例子一个跳转到<code>shop</code>页面。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShopPage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br> <span class="hljs-comment">//接收命名路由跳转传值</span><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">Map</span> arguments;<br>  <span class="hljs-keyword">const</span> ShopPage(&#123;<span class="hljs-keyword">super</span>.key,<span class="hljs-keyword">required</span> <span class="hljs-keyword">this</span>.arguments&#125;);<br><br>  <span class="hljs-meta">@override</span><br>  State&lt;ShopPage&gt; createState() =&gt; _ShopPageState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_ShopPageState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">ShopPage</span>&gt; </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;   <br>    <span class="hljs-keyword">super</span>.initState();<br>    <span class="hljs-built_in">print</span>(widget.arguments);<br>  &#125;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar:AppBar(<br>        title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;shop&quot;</span>),<br>      ),<br>      body: <span class="hljs-keyword">const</span> Center(<br>        child:  Text(<span class="hljs-string">&quot;shop页面&quot;</span>),<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当点击按钮跳转到shop页面会传值到页面。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:flutter/material.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./tabs/home.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./tabs/category.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./tabs/message.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./tabs/setting.dart&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;./tabs/user.dart&#x27;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tabs</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatefulWidget</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">int</span> index;<br>  <span class="hljs-keyword">const</span> Tabs(&#123;<span class="hljs-keyword">super</span>.key,<span class="hljs-keyword">this</span>.index=<span class="hljs-number">0</span>&#125;);<br>  <span class="hljs-meta">@override</span><br>  State&lt;Tabs&gt; createState() =&gt; _TabsState();<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_TabsState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">State</span>&lt;<span class="hljs-title">Tabs</span>&gt; </span>&#123;<br>  <span class="hljs-keyword">late</span> <span class="hljs-built_in">int</span> _currentIndex;<br>  <span class="hljs-meta">@override</span><br>  <span class="hljs-keyword">void</span> initState() &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> implement initState</span><br>    <span class="hljs-keyword">super</span>.initState();<br>    _currentIndex=widget.index;<br>  &#125;<br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">List</span>&lt;Widget&gt; _pages = <span class="hljs-keyword">const</span> [<br>    HomePage(),<br>    CategoryPage(),<br>    MessagePage(),<br>    SettingPage(),<br>    UserPage()<br>  ];<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> Scaffold(<br>      appBar: AppBar(title: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;Flutter App&quot;</span>)),<br>      drawer: Drawer(<br>        child: Column(<br>          children: [<br>            Row(<br>              children:  [<br>                Expanded(<br>                    flex: <span class="hljs-number">1</span>,<br>                    child: UserAccountsDrawerHeader(<br>                      accountName: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;itying&quot;</span>),<br>                      accountEmail: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;itying@qq.com&quot;</span>),<br>                      otherAccountsPictures:[<br>                        Image.network(<span class="hljs-string">&quot;https://www.itying.com/images/flutter/1.png&quot;</span>),<br>                           Image.network(<span class="hljs-string">&quot;https://www.itying.com/images/flutter/2.png&quot;</span>),<br>                           Image.network(<span class="hljs-string">&quot;https://www.itying.com/images/flutter/3.png&quot;</span>),<br>                      ],<br>                      currentAccountPicture:<span class="hljs-keyword">const</span> CircleAvatar(<br>                        backgroundImage:NetworkImage(<span class="hljs-string">&quot;https://www.itying.com/images/flutter/3.png&quot;</span>)<br>                      ),<br>                      decoration: <span class="hljs-keyword">const</span> BoxDecoration(<br>                          image: DecorationImage(<br>                            fit: BoxFit.cover,<br>                              image: NetworkImage(<br>                                  <span class="hljs-string">&quot;https://www.itying.com/images/flutter/2.png&quot;</span>))),<br>                    ))<br>              ],<br>            ),<br>            <span class="hljs-keyword">const</span> ListTile(<br>              leading: CircleAvatar(<br>                child: Icon(Icons.people),<br>              ),<br>              title: Text(<span class="hljs-string">&quot;个人中心&quot;</span>),<br>            ),<br>            <span class="hljs-keyword">const</span> Divider(),<br>            <span class="hljs-keyword">const</span> ListTile(<br>              leading: CircleAvatar(<br>                child: Icon(Icons.settings),<br>              ),<br>              title: Text(<span class="hljs-string">&quot;系统设置&quot;</span>),<br>            ),<br>            <span class="hljs-keyword">const</span> Divider(),<br>          ],<br>        ),<br>      ),<br>     <br>      body: _pages[_currentIndex],<br><br>      bottomNavigationBar: BottomNavigationBar(<br>          fixedColor: Colors.red, <span class="hljs-comment">//选中的颜色</span><br>          <span class="hljs-comment">// iconSize:35,           //底部菜单大小</span><br>          currentIndex: _currentIndex, <span class="hljs-comment">//第几个菜单选中</span><br>          type: BottomNavigationBarType.fixed, <span class="hljs-comment">//如果底部有4个或者4个以上的菜单的时候就需要配置这个参数</span><br>          onTap: (index) &#123;<br>            <span class="hljs-comment">//点击菜单触发的方法</span><br>            <span class="hljs-comment">//注意</span><br>            setState(() &#123;<br>              _currentIndex = index;<br>            &#125;);<br>          &#125;,<br>          items: <span class="hljs-keyword">const</span> [<br>            BottomNavigationBarItem(icon: Icon(Icons.home), label: <span class="hljs-string">&quot;首页&quot;</span>),<br>            BottomNavigationBarItem(icon: Icon(Icons.category), label: <span class="hljs-string">&quot;分类&quot;</span>),<br>            BottomNavigationBarItem(icon: Icon(Icons.message), label: <span class="hljs-string">&quot;消息&quot;</span>),<br>            BottomNavigationBarItem(icon: Icon(Icons.settings), label: <span class="hljs-string">&quot;设置&quot;</span>),<br>            BottomNavigationBarItem(icon: Icon(Icons.people), label: <span class="hljs-string">&quot;用户&quot;</span>)<br>          ]),<br>      floatingActionButton: Container(<br>        height: <span class="hljs-number">60</span>, <span class="hljs-comment">//调整FloatingActionButton的大小</span><br>        width: <span class="hljs-number">60</span>,<br>        padding: <span class="hljs-keyword">const</span> EdgeInsets.all(<span class="hljs-number">5</span>),<br>        margin: <span class="hljs-keyword">const</span> EdgeInsets.only(top: <span class="hljs-number">5</span>), <span class="hljs-comment">//调整FloatingActionButton的位置</span><br>        decoration: BoxDecoration(<br>          color: Colors.white,<br>          borderRadius: BorderRadius.circular(<span class="hljs-number">30</span>),<br>        ),<br>        child: FloatingActionButton(<br>            backgroundColor: _currentIndex == <span class="hljs-number">2</span> ? Colors.red : Colors.blue,<br>            child: <span class="hljs-keyword">const</span> Icon(Icons.add),<br>            onPressed: () &#123;<br>              setState(() &#123;<br>                _currentIndex = <span class="hljs-number">2</span>;<br>              &#125;);<br>            &#125;),<br>      ),<br>      floatingActionButtonLocation:<br>          FloatingActionButtonLocation.centerDocked, <span class="hljs-comment">//配置浮动按钮的位置</span><br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上是Tab导航呢。</p>]]></content>
    
    
    <categories>
      
      <category>客户端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>flutter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>越南语日常句子（1）</title>
    <link href="/2024/05/27/%E8%B6%8A%E5%8D%97%E8%AF%AD%E6%97%A5%E5%B8%B8%E5%8F%A5%E5%AD%90/"/>
    <url>/2024/05/27/%E8%B6%8A%E5%8D%97%E8%AF%AD%E6%97%A5%E5%B8%B8%E5%8F%A5%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">Tiếng Viẹt</th><th>Tiếng Trung</th></tr></thead><tbody><tr><td align="center">chào buổi trưa</td><td>中午好</td></tr><tr><td align="center">chào buổi sáng</td><td>早上好</td></tr><tr><td align="center">chào buổi tối</td><td>晚上好</td></tr><tr><td align="center">xin chào</td><td>你好</td></tr><tr><td align="center">xin mời vào</td><td>请进来</td></tr><tr><td align="center">xin mời đi theo tôi</td><td>请跟我来</td></tr><tr><td align="center">mời ngồi</td><td>请坐</td></tr><tr><td align="center">xin mời ngồi sang bên này</td><td>请这边坐</td></tr><tr><td align="center">xin mời ngồi sang bên kia</td><td>请到那边坐</td></tr><tr><td align="center">mời uống trà</td><td>请喝茶</td></tr><tr><td align="center">cạn ly</td><td>干杯</td></tr><tr><td align="center">kính bạn một ly</td><td>敬你一杯</td></tr><tr><td align="center">vì thành công của bạn , cạn ly</td><td>为你的成功，干杯</td></tr><tr><td align="center">vì sức khỏe của bạn ,cạn ly</td><td>为你的健康，干杯</td></tr><tr><td align="center">mời hút thuốc</td><td>请抽支烟</td></tr><tr><td align="center">xin hỏi</td><td>请问</td></tr><tr><td align="center">xin nhường bước</td><td>请让路</td></tr><tr><td align="center">mời nghe điện thoại</td><td>请听电话</td></tr><tr><td align="center">xin bạn đừng đi</td><td>请你不要走</td></tr><tr><td align="center">bạn đừng khóc nửa</td><td>你不要再哭了</td></tr><tr><td align="center">xin bạn đừng giận nữa</td><td>你别再生气了</td></tr><tr><td align="center">xin bớt giận</td><td>请息怒</td></tr><tr><td align="center">xin hãy im lặng</td><td>请安静</td></tr><tr><td align="center">anh ấy giận rồi</td><td>他生气了</td></tr><tr><td align="center">lười biếng quá</td><td>太懒惰了</td></tr><tr><td align="center">thật là ích kỷ quá</td><td>真是太小气了</td></tr><tr><td align="center">tạm biệt</td><td>再见</td></tr><tr><td align="center">cáo biệt</td><td>告别</td></tr><tr><td align="center">tôi đến để từ biệt bạn</td><td>我来向你告别</td></tr><tr><td align="center">hôm khác gặp nhé</td><td>改天见</td></tr><tr><td align="center">hôm khác nói tiếp</td><td>改天再聊</td></tr><tr><td align="center">rảnh nói tiếp  nhé</td><td>有空再聊</td></tr><tr><td align="center">sau này hãy nói</td><td>以后再说</td></tr><tr><td align="center">hết cách rồi</td><td>没办法</td></tr><tr><td align="center">không sao</td><td>没事</td></tr><tr><td align="center">tôi không quan tâm</td><td>我不关心</td></tr><tr><td align="center">hôm nay tôi mời khách</td><td>今天我请客</td></tr><tr><td align="center">bạn hiểu lầm rồi</td><td>你误会了</td></tr><tr><td align="center">xin hãy nghe tôi giải thích</td><td>请听我解释</td></tr><tr><td align="center">là thật đấy</td><td>是真的</td></tr><tr><td align="center">tôi nói thật đấy</td><td>我说真的</td></tr><tr><td align="center">đây là lời nói tự đáy lòng tôi</td><td>这是我的真心话</td></tr><tr><td align="center">tôi tán thành</td><td>我赞成</td></tr><tr><td align="center">tôi đồng ý</td><td>我同意</td></tr><tr><td align="center">tôi bằng lòng</td><td>我愿意</td></tr><tr><td align="center">trời ơi</td><td>天啊</td></tr><tr><td align="center">buồn chán quá</td><td>好无聊啊</td></tr><tr><td align="center">đẹp quá</td><td>很漂亮</td></tr><tr><td align="center">dễ thương quá</td><td>好可爱</td></tr><tr><td align="center">ngoan quá</td><td>好乖</td></tr><tr><td align="center">thông minh quá</td><td>很聪明</td></tr><tr><td align="center">bạn thật ngốc</td><td>你真笨</td></tr><tr><td align="center">không phải tôi cố ý đâu</td><td>我不是故意的</td></tr><tr><td align="center">thật là ác quá</td><td>真是太可恶了</td></tr><tr><td align="center">mất mặt quá</td><td>真丢脸</td></tr><tr><td align="center">thật khâm phục</td><td>真佩服</td></tr><tr><td align="center">thật ngưỡng mộ</td><td>好羡慕</td></tr><tr><td align="center">cảm ơn</td><td>感谢</td></tr><tr><td align="center">vô cùng cảm ơn</td><td>非常感谢</td></tr><tr><td align="center">không có chi</td><td>没关系</td></tr><tr><td align="center">không cần cảm ơn</td><td>不用感谢</td></tr><tr><td align="center">đừng khách sáo</td><td>别客气</td></tr><tr><td align="center">xin đừng khách sáo</td><td>请别客气</td></tr><tr><td align="center">phiền bạn giúp tôi một việc</td><td>麻烦你帮我个忙</td></tr><tr><td align="center">năn nỉ bạn đấy</td><td>求求你</td></tr><tr><td align="center">không thành vấn đề</td><td>没问题</td></tr><tr><td align="center">bạn khách sáo quá</td><td>你太客气了</td></tr><tr><td align="center">tùy bạn thôi</td><td>随便你</td></tr><tr><td align="center">xin đừng lo lắng</td><td>请别着急</td></tr><tr><td align="center">xin hãy yên tăm</td><td>请安心</td></tr><tr><td align="center">xin đừng lo lắng</td><td>请不用担心</td></tr><tr><td align="center">xin đừng gấp</td><td>别急</td></tr><tr><td align="center">đừng vội</td><td>别急</td></tr><tr><td align="center">tôi rất gấp</td><td>我很急</td></tr><tr><td align="center">tôi có việc gấp</td><td>我有急事</td></tr><tr><td align="center">xin lỗi</td><td>对不起</td></tr><tr><td align="center">thật ngại quá</td><td>真不好意思</td></tr><tr><td align="center">thành thật xin lỗi</td><td>非常抱歉</td></tr><tr><td align="center">không có gì</td><td>没关系</td></tr><tr><td align="center">làm phiền một chút</td><td>打扰一下</td></tr><tr><td align="center">xin đừng chê trách</td><td>请不要见怪</td></tr><tr><td align="center">rất kì lạ</td><td>很奇怪</td></tr><tr><td align="center">của ít lòng nhiều</td><td>礼轻情意重</td></tr><tr><td align="center">xin đừng cười tôi</td><td>别笑我</td></tr><tr><td align="center">xin đừng cười nhạo tôi</td><td>请不要嘲笑我</td></tr><tr><td align="center">tôi rất cần</td><td>我很需要</td></tr><tr><td align="center">tôi rất thích</td><td>我很喜欢</td></tr><tr><td align="center">tôi rất sợ</td><td>我很怕</td></tr><tr><td align="center">thật đáng sợ</td><td>真可怕</td></tr><tr><td align="center">mắc cỡ</td><td>害羞</td></tr><tr><td align="center">khoa trương quá</td><td>太夸张了</td></tr><tr><td align="center">thật đáng ghét</td><td>真讨厌</td></tr><tr><td align="center">tôi không sao</td><td>我没事</td></tr><tr><td align="center">thật đáng tiếc</td><td>真可惜</td></tr><tr><td align="center">đừng để mệt quá đấy</td><td>别累坏了</td></tr><tr><td align="center">mệt chết đi được</td><td>累死了</td></tr><tr><td align="center">tức chết đi được</td><td>气死我了</td></tr><tr><td align="center">cố lên</td><td>加油</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>越南语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>越南语坚持学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两句话中不常见单词</title>
    <link href="/2024/05/27/%E4%B8%A4%E5%8F%A5%E8%AF%9D%E4%B8%AD%E4%B8%8D%E5%B8%B8%E8%A7%81%E5%8D%95%E8%AF%8D884/"/>
    <url>/2024/05/27/%E4%B8%A4%E5%8F%A5%E8%AF%9D%E4%B8%AD%E4%B8%8D%E5%B8%B8%E8%A7%81%E5%8D%95%E8%AF%8D884/</url>
    
    <content type="html"><![CDATA[<p>﻿# 题目描述: </p><blockquote><p>句子 是一串由空格分隔的单词。每个 单词 仅由小写字母组成。<br>如果某个单词在其中一个句子中恰好出现一次，在另一个句子中却 没有出现 ，那么这个单词就是 不常见的 。<br>给你两个 句子 s1 和 s2 ，返回所有 不常用单词 的列表。返回列表中单词可以按 任意顺序 组织。</p></blockquote><h1 id="题目思路："><a href="#题目思路：" class="headerlink" title="题目思路："></a>题目思路：</h1><blockquote><p> 两个句子中只能出现一次单词则是结果，那么可以用map统计，key为单词，value为次数，遍历map找到次数为1的单词就是答案。</p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> simple;<br><br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">uncommonFromSentences</span> &#123;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> String[] uncommonFromSentences(String s1, String s2) &#123;<br><br>       <span class="hljs-comment">// 建立hashmap</span><br>        HashMap&lt;String, Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (String s : s1.split(<span class="hljs-string">&quot; &quot;</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (hashMap.containsKey(s))&#123;<br>                <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> hashMap.get(s);<br>                hashMap.put(s,++integer);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                hashMap.put(s,<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (String s : s2.split(<span class="hljs-string">&quot; &quot;</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (hashMap.containsKey(s))&#123;<br>                <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> hashMap.get(s);<br>                hashMap.put(s,++integer);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                hashMap.put(s,<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;String,Integer&gt; entry : hashMap.entrySet())&#123;<br>            <span class="hljs-keyword">if</span> (entry.getValue() == <span class="hljs-number">1</span>)&#123;<br>                list.add(entry.getKey());<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> list.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>EurekaServer启动报错解决办法</title>
    <link href="/2024/05/27/EurekaServer%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2024/05/27/EurekaServer%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>﻿## 启动EurekaServer服务报错如下：</p><p><code>rg.springframework.beans.factory.BeanDefinitionStoreException: Failed to process import candidates for configuration class [com.person.eurekaserver7001.EurekaServer7001]; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy</code></p><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><p>看看你的<code>pom</code>文件.是否是这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-netflix-eureka-server&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>那么替换为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反转字符串里的单词</title>
    <link href="/2024/05/27/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%20III%20557/"/>
    <url>/2024/05/27/%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%20III%20557/</url>
    
    <content type="html"><![CDATA[<p>﻿## 题目描述：</p><blockquote><p>定一个字符串 s ，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。<br>提示：<br>1 &lt;&#x3D; s.length &lt;&#x3D; 5 * 104<br>s 包含可打印的 ASCII 字符。<br>s 不包含任何开头或结尾空格。<br>s 里 至少 有一个词。<br>s 中的所有单词都用一个空格隔开。</p></blockquote><h2 id="题目思路："><a href="#题目思路：" class="headerlink" title="题目思路："></a>题目思路：</h2><blockquote><p> 开辟一个stringBuffer 用来拼接最后的结果。当遍历到空格时便知道是一个单词的末尾。此时逆序添加这个单词的字母到Buffer中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  String <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(String s)</span> &#123;<br><br>     <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>     <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> s.length();<br>     <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>     <span class="hljs-keyword">while</span> (i &lt; length)&#123;<br>         <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span>  i;<br>         <span class="hljs-keyword">while</span> (i &lt; length &amp;&amp; s.charAt(i) != <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>             i++;<br>         &#125;<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> start; p &lt;i ; p++)&#123;<br>             ret.append(s.charAt(start+i-<span class="hljs-number">1</span>-p));<br>         &#125;<br>         <span class="hljs-keyword">while</span> (i &lt; length &amp;&amp; s.charAt(i) == <span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>             i++;<br>             ret.append(<span class="hljs-string">&#x27; &#x27;</span>);<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> ret.toString();<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>翻转字符串</title>
    <link href="/2024/05/27/%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2344/"/>
    <url>/2024/05/27/%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2344/</url>
    
    <content type="html"><![CDATA[<p>﻿## 题目描述：</p><blockquote><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 s 的形式给出。<br>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p></blockquote><h2 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路:"></a>题目思路:</h2><blockquote><p>一个头指针，一个尾指针，两个指针不断移动并交换。</p></blockquote><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseString</span><span class="hljs-params">(<span class="hljs-type">char</span>[] s)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = s.length -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right)&#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s[left];<br>        s[left] = s[right];<br>        s[right] = c;<br>        left++;<br>        right--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>移动零</title>
    <link href="/2024/05/27/%E7%A7%BB%E5%8A%A8%E9%9B%B6283/"/>
    <url>/2024/05/27/%E7%A7%BB%E5%8A%A8%E9%9B%B6283/</url>
    
    <content type="html"><![CDATA[<p>﻿## 题目描述:</p><blockquote><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。<br>请注意 ，必须在不复制数组的情况下原地对数组进行操作。</p></blockquote><h2 id="思路一-双指针"><a href="#思路一-双指针" class="headerlink" title="思路一: 双指针"></a>思路一: 双指针</h2><blockquote><p>定义一个left和right都指向数组开头，不断右移right , 当遇见非零数则和left位置交换，同时left前进</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 思路一 ： 双指针</span><br>   <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveZeroes</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span>(right &lt; n)&#123;<br>           <span class="hljs-keyword">if</span> (nums[right] != <span class="hljs-number">0</span>)&#123;<br><br>               swap(nums,left,right);<br>               left++;<br>           &#125;<br>           right++;<br>       &#125;<br>   &#125;<br>   <span class="hljs-keyword">private</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> nums[left];<br>       nums[left] = nums[right];<br>       nums[right] = tmp;<br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h2><blockquote><p>遍历数组把非0数字赋值到前面，后面全部赋值为0</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">moveZeroes</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br><br>      <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>      <span class="hljs-type">int</span> index=  <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt; n; i++)&#123;<br>          <span class="hljs-keyword">if</span> (nums[i] != <span class="hljs-number">0</span>)&#123;<br>              nums[index] = nums[i];<br>              index++;<br>          &#125;<br>      &#125;<br>      <span class="hljs-comment">// 剩下的后面全部补0</span><br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> index ; j &lt; n; j++)&#123;<br>          nums[j] = <span class="hljs-number">0</span>;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>轮转数组</title>
    <link href="/2024/05/27/%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84189/"/>
    <url>/2024/05/27/%E8%BD%AE%E8%BD%AC%E6%95%B0%E7%BB%84189/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><blockquote><p>给你一个数组，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。<br>输入: nums &#x3D; [1,2,3,4,5,6,7], k &#x3D; 3<br>输出: [5,6,7,1,2,3,4]</p></blockquote><h2 id="思路一：使用额外的数组"><a href="#思路一：使用额外的数组" class="headerlink" title="思路一：使用额外的数组"></a>思路一：使用额外的数组</h2><blockquote><p> 新建一个数组，将原数组i 位置的值赋值到新数组(i+k)%n位置,最后拷贝到原数组就行</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>      <span class="hljs-type">int</span>[] newArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>          newArr[(i+k)%n] = nums[i];<br>      &#125;<br>      System.arraycopy(newArr,<span class="hljs-number">0</span>,nums,<span class="hljs-number">0</span>,n);<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="思路二：翻转数组"><a href="#思路二：翻转数组" class="headerlink" title="思路二：翻转数组"></a>思路二：翻转数组</h2><blockquote><p>首先将整个数组翻转得到[7 6 5 4 3 2 1]<br>接着翻转前面k个得到[5 6 7 4 3 2 1]<br>最后翻转后面n-k个[5 6 7 1 2  3 4 ]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rotate2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>       k = k % n;<br>       <span class="hljs-comment">// 翻转整个数组</span><br>       reverse(nums,<span class="hljs-number">0</span>,n);<br>       <span class="hljs-comment">// 翻转数组的前面k个元素</span><br>       reverse(nums,<span class="hljs-number">0</span>,k);<br>       <span class="hljs-comment">// 翻转数组后面n-k元素</span><br>       reverse(nums,k,n);<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>       <span class="hljs-comment">//  1  2 3 4 5 6 7</span><br>       <span class="hljs-comment">//  7 2 3 4 5 6 1</span><br>       <span class="hljs-comment">//  7 6 3 4 5 2 1</span><br>       <span class="hljs-comment">//  7 6 5 4 3 2 1</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> (end - start)/<span class="hljs-number">2</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span> (index &lt; count)&#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> nums[end -index -<span class="hljs-number">1</span>];<br>           nums[end - index - <span class="hljs-number">1</span>] = nums[start + index];<br>           nums[start + index] = tmp;<br>           index++;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>有序数组的平方</title>
    <link href="/2024/05/27/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9977/"/>
    <url>/2024/05/27/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9977/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><blockquote><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p></blockquote><h2 id="思路1"><a href="#思路1" class="headerlink" title="思路1:"></a>思路1:</h2><blockquote><p>直接给每个元素平方，然后排序.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortedSquares(<span class="hljs-type">int</span>[] nums) &#123;<br>    <span class="hljs-comment">// 将每个数平方</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt; nums.length;i++)&#123;<br>        nums[i] = nums[i]*nums[i];<br><br>    &#125;<br>    Arrays.sort(nums);<br>    <span class="hljs-keyword">return</span> nums;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="思路2"><a href="#思路2" class="headerlink" title="思路2:"></a>思路2:</h2><blockquote><p>因为是非递减顺序，那么有一个分界点neg，在这个点前面的都是负数，后面都是非负数。负数的平方以后是递减顺序，非负数平方后递增。那么整个数组氛围两部分。前面一部分递减，后面一部分递增。接着定义2个指针，一个指向neg,一个指向neg+1,比较两个数字平方，将小的放入ans数组，直到有一边到达边界。当某一指针到达边界时，将另一指针还未遍历到的数字放入答案.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] sortedSquares(<span class="hljs-type">int</span>[] nums) &#123;<br>    <span class="hljs-comment">// 标记分界点。该点前面部分是负数，后面是非负数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">negative</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123;<br>        <span class="hljs-keyword">if</span>(nums[i] &lt; <span class="hljs-number">0</span>)&#123;<br>            negative = i;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>     <span class="hljs-comment">// 指向</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> negative, j = negative+<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span>  <span class="hljs-operator">=</span> nums.length;<br>    <span class="hljs-type">int</span> index= <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    <span class="hljs-keyword">while</span>(i &gt;= <span class="hljs-number">0</span> || j  &lt; n)&#123;<br>        <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">// 都是非负数</span><br>            ans[index] = nums[j]*nums[j];<br>            j++;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j == n)&#123;<br>            <span class="hljs-comment">// 到右边界 </span><br>            ans[index] = nums[i]*nums[i];<br>            i--;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[i]*nums[i] &lt; nums[j]*nums[j])&#123;<br>            ans[index] = nums[i]*nums[i];<br>            i--;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            ans[index]  = nums[j]*nums[j];<br>            j++;<br>        &#125;<br><br><br>        index ++ ;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>报数java解法</title>
    <link href="/2024/05/27/%E6%8A%A5%E6%95%B0Java%E8%A7%A3%E6%B3%95---20191201/"/>
    <url>/2024/05/27/%E6%8A%A5%E6%95%B0Java%E8%A7%A3%E6%B3%95---20191201/</url>
    
    <content type="html"><![CDATA[<p>﻿## 题目</p><p><img src="https://img-blog.csdnimg.cn/20210410185420819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxNzAyNjU1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote><p>甲的报数为 1+4k,<br>乙的报数为 2+4k<br>丙的报数为 3+4k<br>丁的报数为 4+4k<br>其中，k为多少轮的意思，从0开始<br>PS：双重检查机制注意下</p></blockquote><h2 id="代码解法"><a href="#代码解法" class="headerlink" title="代码解法"></a>代码解法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">// 报了多少数， 不计入跳过的数字</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span>  <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-comment">// 次数计数器 大于n次结束程序</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 存放甲乙丙丁当前轮的数字和各自的跳过次数</span><br>        <span class="hljs-type">int</span>[][] breakCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br>        breakCount[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 代表甲</span><br>        breakCount[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>; <span class="hljs-comment">// 乙</span><br>        breakCount[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">3</span>; <span class="hljs-comment">// 丙</span><br>        breakCount[<span class="hljs-number">3</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">4</span>; <span class="hljs-comment">// 丁</span><br>        <span class="hljs-comment">// 循环轮数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(count &lt; n)&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; breakCount.length; i++) &#123;<br>                <span class="hljs-comment">// 判断甲乙丙丁当前数字是否满足条件</span><br>            <span class="hljs-keyword">if</span>(count &lt; n)&#123;<br>                <span class="hljs-keyword">if</span>(judgeBreak((breakCount[i][<span class="hljs-number">0</span>]+<span class="hljs-number">4</span>*k)))&#123;<br>                    breakCount[i][<span class="hljs-number">1</span>]++;<br>                    <span class="hljs-keyword">continue</span>;<br>                 &#125;<span class="hljs-keyword">else</span>&#123;<br>                     count++;<br>                 &#125;<br>            &#125; <br>        &#125;<br>        k++;<br>    &#125;<br>        <span class="hljs-comment">// 输出结果</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; breakCount.length; i++) &#123;<br>            System.out.println(breakCount[i][<span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 核心方法 判断是否为7的倍数或者带有数字7</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judgeBreak</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br>        <span class="hljs-keyword">if</span>(num % <span class="hljs-number">7</span> == <span class="hljs-number">0</span> || numWith7(num))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">numWith7</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Integer.toString(num);<br>        <span class="hljs-keyword">if</span>(s.contains(<span class="hljs-string">&quot;7&quot;</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>线性分类器</title>
    <link href="/2024/05/27/%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB%E5%99%A8Java%E8%A7%A3%E6%B3%95---CSP%E8%AE%A4%E8%AF%81%E8%B6%85%E8%AF%A6%E8%A7%A3/"/>
    <url>/2024/05/27/%E7%BA%BF%E6%80%A7%E5%88%86%E7%B1%BB%E5%99%A8Java%E8%A7%A3%E6%B3%95---CSP%E8%AE%A4%E8%AF%81%E8%B6%85%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>﻿## 题目描述</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9be5734cfb81e81dfdd0019663011d17.png" alt="page02.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/b685780e05b9bd3eb12d728c0ca9800b.png" alt="page03.png"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/7751928870dcbe123f6543ead2b01055.png" alt="page04.png"></p><h2 id="题目思路"><a href="#题目思路" class="headerlink" title="题目思路"></a>题目思路</h2><p>同类型的坐标点应该在同一边，不同类型的坐标点应该在另外一边。<br>判断在一条直线上边还是下边的方法只是代入x and y.</p><h2 id="题目解答"><a href="#题目解答" class="headerlink" title="题目解答"></a>题目解答</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 接收两个参数</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-comment">// 接收坐标</span><br>        <span class="hljs-type">int</span>[][] coordinate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][<span class="hljs-number">2</span>];<br>        <span class="hljs-type">char</span>[] type = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            coordinate[i][<span class="hljs-number">0</span>] = scanner.nextInt();<br>            coordinate[i][<span class="hljs-number">1</span>] = scanner.nextInt();<br>            type[i] = scanner.next().charAt(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-comment">// 接收方程参数</span><br>        <span class="hljs-type">int</span>[][] theta = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m][<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>            theta[i][<span class="hljs-number">0</span>] = scanner.nextInt();<br>            theta[i][<span class="hljs-number">1</span>] = scanner.nextInt();<br>            theta[i][<span class="hljs-number">2</span>] = scanner.nextInt();<br>        &#125;<br>        <span class="hljs-comment">// 核心方法，判断是否分割</span><br><br>        <span class="hljs-comment">// 得到第一个坐标的类型</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">firstType</span> <span class="hljs-operator">=</span> type[<span class="hljs-number">0</span>];<br>        <span class="hljs-comment">// 定义结果数组</span><br>        <span class="hljs-type">boolean</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[m];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; theta.length; i++) &#123;<br>            res[i] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">// 判断第一个坐标代入方程是在下方还在上方</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isUp</span> <span class="hljs-operator">=</span> judgeIsUp(theta[i], coordinate[<span class="hljs-number">0</span>]);<br>            <span class="hljs-comment">// 从第二个坐标开始遍历，同类型的必须在同一边，不同类型的必须在另一边</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; coordinate.length; j++) &#123;<br>                <span class="hljs-comment">// 如果类型相同，出现不同边的情况则false</span><br>                <span class="hljs-keyword">if</span> (firstType == type[j])&#123;<br>                    <span class="hljs-keyword">if</span> (isUp != judgeIsUp(theta[i], coordinate[j]))&#123;<br>                        res[i] = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 如果类型不同，则都要在另一边</span><br>                    <span class="hljs-keyword">if</span> (isUp == judgeIsUp(theta[i], coordinate[j]))&#123;<br>                        res[i] = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>            &#125;<br><br>        &#125;<br>        <span class="hljs-comment">// 输出结果</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; res.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (res[i])&#123;<br>                System.out.println(<span class="hljs-string">&quot;Yes&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;No&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judgeIsUp</span><span class="hljs-params">(<span class="hljs-type">int</span>[] theta, <span class="hljs-type">int</span>[] corrdinate)</span> &#123;<br>        <span class="hljs-keyword">if</span> ((theta[<span class="hljs-number">0</span>] + (theta[<span class="hljs-number">1</span>] * corrdinate[<span class="hljs-number">0</span>]) + (theta[<span class="hljs-number">2</span>] * corrdinate[<span class="hljs-number">1</span>])) &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>检测点查询</title>
    <link href="/2024/05/27/%E6%A3%80%E6%B5%8B%E7%82%B9%E6%9F%A5%E8%AF%A2Java%E8%A7%A3%E6%B3%95-CSP%E8%AE%A4%E8%AF%81%E6%9C%80%E6%98%93%E6%87%82%E8%A7%A3%E6%B3%95/"/>
    <url>/2024/05/27/%E6%A3%80%E6%B5%8B%E7%82%B9%E6%9F%A5%E8%AF%A2Java%E8%A7%A3%E6%B3%95-CSP%E8%AE%A4%E8%AF%81%E6%9C%80%E6%98%93%E6%87%82%E8%A7%A3%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>﻿## 题目连接</p><p><a href="http://118.190.20.162/view.page?gpid=T113">http://118.190.20.162/view.page?gpid=T113</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>了解一下排序器就行</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jiancedian</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">xi</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">yi</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> ((x-xi) * (x-xi)) + ((y-yi) * (y-yi));<br>            arr[i][<span class="hljs-number">0</span>] = i+<span class="hljs-number">1</span>;<br>            arr[i][<span class="hljs-number">1</span>] = distance;<br>        &#125;<br><span class="hljs-comment">// 如果距离相等，那么按照编号升序，如果不等就按照距离升序</span><br>        Arrays.sort(arr, (o1, o2) -&gt; o1[<span class="hljs-number">1</span>] == o2[<span class="hljs-number">1</span>] ? o1[<span class="hljs-number">0</span>]-o2[<span class="hljs-number">0</span>] : o1[<span class="hljs-number">1</span>]-o2[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            System.out.print(arr[i][<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>重点不是这道题的解法，而是在用CSP编译器遇见一个非常恶心的问题。<br>最后输出语句<code> System.out.println(arr[i][0]);</code>编译报错了，傻逼CSP又不写哪里错误，搞得我一直在纠结自己的思路哪里有问题。<br>记得用<code>System.out.print(&quot;\n&quot;)</code>这种方式换行</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的深度</title>
    <link href="/2024/05/27/%E5%89%91%E6%8C%87offer-%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/"/>
    <url>/2024/05/27/%E5%89%91%E6%8C%87offer-%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%B7%B1%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><blockquote><p>输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过的节点（含根、叶节点）形成树的一条路径，最长路径的长度为树的深度。</p></blockquote><h3 id="题目思路："><a href="#题目思路：" class="headerlink" title="题目思路："></a>题目思路：</h3><blockquote><p>树的遍历方式分为两种：深度优先遍历（DFS），广度优先遍历（BFS）</p></blockquote><h4 id="方法一：深度优先，后序遍历"><a href="#方法一：深度优先，后序遍历" class="headerlink" title="方法一：深度优先，后序遍历"></a>方法一：深度优先，后序遍历</h4><blockquote><p>树的深度等于左子树深度和右子树深度最大值加1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) +１;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法二-层序遍历，BFS"><a href="#方法二-层序遍历，BFS" class="headerlink" title="方法二: 层序遍历，BFS"></a>方法二: 层序遍历，BFS</h4><blockquote><p>往往采用队列来实现</p><p>特列处理： 当root 为空时，直接返回0</p><p>初始化： 把root加入queue  计数器res&#x3D; 0</p><p>循环遍历：当queue为空时跳出</p><ol><li>初始化一个空列表tmp 用来存储下一层节点</li><li>遍历队列：遍历各节点，并将左子节点和右子节点加入tmp</li><li>更新队列：执行queue&#x3D;tmp ，将下一层节点赋值给queue</li><li>统计层数：执行res+&#x3D;1</li></ol><p>返回res</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution1</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        List&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;(),tmp;<br>        <span class="hljs-comment">// 将根节点加入队列</span><br>        queue.add(root);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 当队列不为空，循环遍历层级节点</span><br>        <span class="hljs-keyword">while</span>(!queue.isEmpty())&#123;<br>            tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (TreeNode treeNode : queue) &#123;<br>                <span class="hljs-keyword">if</span>(treeNode.left != <span class="hljs-literal">null</span>)&#123;<br>                    tmp.add(treeNode.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(treeNode.right != <span class="hljs-literal">null</span>)&#123;<br>                    tmp.add(treeNode.right);<br>                &#125;<br>            &#125;<br><br>            queue = tmp;<br>            res++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>对称的二叉树</title>
    <link href="/2024/05/27/%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2024/05/27/%E5%AF%B9%E7%A7%B0%E7%9A%84%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>﻿###  题目描述：</p><blockquote><p>请实现一个函数，用来判断一棵二叉树是不是对称的。如果一棵二叉树和它的镜像一样，那么它是对称的。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解:"></a>题解:</h3></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span>&#123;<br><span class="hljs-comment">// 如果根节点空 返回true  否则递归判断 左右节点</span><br>        <span class="hljs-keyword">return</span> root == <span class="hljs-literal">null</span> ? <span class="hljs-literal">true</span> : recur(root.left, root.right);<br>    &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">recur</span><span class="hljs-params">(TreeNode left, TreeNode right)</span> &#123;<br>  <span class="hljs-comment">// 如果左节点 和 右节点都空  那么同时越过叶子节点 返回true</span><br>        <span class="hljs-keyword">if</span> (left == <span class="hljs-literal">null</span> &amp;&amp; right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">// 如果左右子树结构不一样或者值不等返回false  </span><br>        <span class="hljs-keyword">if</span> (right == <span class="hljs-literal">null</span> || left == <span class="hljs-literal">null</span> || left.val != right.val)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 递归判断</span><br>        <span class="hljs-keyword">return</span> recur(left.left, right.right) &amp;&amp; recur(left.right, right.left);<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis逆向工程</title>
    <link href="/2024/05/27/%E4%BA%94%E5%88%86%E9%92%9F%E5%AD%A6%E4%B9%A0Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    <url>/2024/05/27/%E4%BA%94%E5%88%86%E9%92%9F%E5%AD%A6%E4%B9%A0Mybatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 引入log4j日志依赖 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.8.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 阿里开源数据源 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.41<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mybatis--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--mapper--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- mybatis 逆向生成工具  --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="如何配置"><a href="#如何配置" class="headerlink" title="如何配置"></a>如何配置</h2><ol><li>首先明确下数据库有哪些表<br><img src="https://img-blog.csdnimg.cn/img_convert/642a71d6ebde9d2bdd9996dd25353f50.png">  </li><li>接着来看具体的配置<br><img src="https://img-blog.csdnimg.cn/img_convert/30c8369d6f8d3ee6619a05eb59c624a4.png"></li></ol><h2 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">generator</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>List&lt;String&gt; warnings = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">overwrite</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//指定 逆向工程配置文件</span><br><span class="hljs-type">File</span> <span class="hljs-variable">configFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;generatorConfig.xml&quot;</span>);<br><span class="hljs-type">ConfigurationParser</span> <span class="hljs-variable">cp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConfigurationParser</span>(warnings);<br><span class="hljs-type">Configuration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> cp.parseConfiguration(configFile);<br><span class="hljs-type">DefaultShellCallback</span> <span class="hljs-variable">callback</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultShellCallback</span>(overwrite);<br><span class="hljs-type">MyBatisGenerator</span> <span class="hljs-variable">myBatisGenerator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBatisGenerator</span>(config,<br>callback, warnings);<br>myBatisGenerator.generate(<span class="hljs-literal">null</span>);<br><br>&#125; <br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">GeneratorDisplay</span> <span class="hljs-variable">generatorSqlmap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeneratorDisplay</span>();<br>generatorSqlmap.generator();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>讲道理，这方法我也不懂。可以理解为工具类吧，反正直接复制过去就能用。直接运行就对了！奥利给！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs !">配置文件记得放在根目录下，就是和pom.xml平级<br></code></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/358c9fafac3d377ee3c85e9b6cc16610.png">   </p><p>自动生成了mapper，pojo和xml文件啦！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot自动启动原理</title>
    <link href="/2024/05/27/SpringBoot%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/"/>
    <url>/2024/05/27/SpringBoot%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   我们都知道，使用SpringBoot开发项目非常简便，在以往的SSM框架中，往往会因为一大堆的密密麻麻的xml配置文件而糟心不已。自从SpringBoot的出现，改变了这个现状。我们往往只需要去关注业务实现而不需要去过多分心与固定的且繁琐的配置。而SpringBoot自动装配便是其中一大功臣。<br>   接下来，直接进入正题吧。来了解一下，SpringBoot的自动装配是如何实现的~   </p><h2 id="从启动类入手"><a href="#从启动类入手" class="headerlink" title="从启动类入手"></a>从启动类入手</h2><p>   <img src="https://img-blog.csdnimg.cn/img_convert/d38bdd94b896cc2a30fecb5d05f4d592.png"><br>   这是springBoot启动类，启动项目从这里运行。那么我们看看这个注解包含了什么吧~<br>   <img src="https://img-blog.csdnimg.cn/img_convert/084131e24ae88294180fa54b6d5ab937.png"><br>   可以看到在<code>SpringBootApplication</code>接口上有好些注解，下表大概介绍了一下注解的用处  </p><table><thead><tr><th align="center">注解名字</th><th align="center">注解作用</th></tr></thead><tbody><tr><td align="center">@Target</td><td align="center">注解的作用目标：就是你的注解可以写在哪个目标上。比如图中的<code>Element.TYPE</code>,则代表接口，类，枚举，注解</td></tr><tr><td align="center">@Retention</td><td align="center">保留策略：图中代码为<code>RetentionPolicy.RUNTIME</code>代表运行时保留</td></tr><tr><td align="center">@Documented</td><td align="center">生成java文档</td></tr><tr><td align="center">@Inherited</td><td align="center">表示该父类注解会被子类继承</td></tr><tr><td align="center">@SpringBootConfiguration</td><td align="center">标注该类是配置类</td></tr><tr><td align="center">@EnableAutoConfiguration</td><td align="center"><em><strong>重点</strong></em>：自动装配配置</td></tr><tr><td align="center">@ComponentScan</td><td align="center">扫描组件</td></tr></tbody></table><p>  虽然这么多注解，但是其实重要的就是<code>@EnableAutoConfiguration</code>,接下来我们也会对这个注解进行深入分析。  </p><h2 id="从自动配置注解深入"><a href="#从自动配置注解深入" class="headerlink" title="从自动配置注解深入"></a>从自动配置注解深入</h2><p>  我们点击进入<code>@EnableAutoConfiguration</code>注解，可以发现：<br>  <img src="https://img-blog.csdnimg.cn/img_convert/f49dd2e207b54ec54396e82a34622223.png"><br>  这个<code>@Import</code>导入注解又是我们的核心，它传入一个自动配置导入选择器的类。(看这名字起得，一看就知道和自动配置导入有关系了！)</p><h2 id="如何导入自动配置"><a href="#如何导入自动配置" class="headerlink" title="如何导入自动配置"></a>如何导入自动配置</h2><p>  在这个<code>AutoConfigurationImportSelector</code>类中有这么一个方法<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> List&lt;String&gt; <span class="hljs-title function_">getCandidateConfigurations</span><span class="hljs-params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;<br>    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="hljs-built_in">this</span>.getSpringFactoriesLoaderFactoryClass(),<br>    <span class="hljs-built_in">this</span>.getBeanClassLoader());<br>    Assert.notEmpty(configurations, <span class="hljs-string">&quot;No auto configuration classes found in META-INF/spring.factories.</span><br><span class="hljs-string">    If you are using a custom packaging, make sure that file is correct.&quot;</span>);<br>    <span class="hljs-keyword">return</span> configurations;<br>&#125;<br></code></pre></td></tr></table></figure><br>  看这方法名起得，(获取候选配置)，正是在下所要找的。方法扫描<code>META-INF/spring.factories</code>这个文件里的东东来完成自动配置。看到断言了吗，返回配置后，断言配置不为空，如果空了，就说明没有找到自动配置的类。接下来就是找这个文件了，看看里面是些啥东西~</p><h2 id="spring-factories揭秘"><a href="#spring-factories揭秘" class="headerlink" title="spring.factories揭秘."></a>spring.factories揭秘.</h2><p>  <img src="https://img-blog.csdnimg.cn/img_convert/9937a12523cc1fd9c4685335757fd6b1.png"><br>  这就是很清楚了，就是一堆KV键值对，key是<code>EnableAutoConfiguration</code>全类名，value则是一大堆全类名列表，代表了自动装配的类。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>  本质来说，自动装配就是通过配置文件以kv的形式把我们所经常需要配置的类固定到springBoot中，而不再需要我们去手动配置了。反正每次配置都差不多，何必每个项目都去配置呢，对吧！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数组中的重复数字</title>
    <link href="/2024/05/27/Java%E5%AD%A6%E7%AE%97%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97/"/>
    <url>/2024/05/27/Java%E5%AD%A6%E7%AE%97%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><h2 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h2><h4 id="一、Map"><a href="#一、Map" class="headerlink" title="一、Map"></a>一、Map</h4><blockquote><p> 把数组遍历到map当发现已经包含数值时退出。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         将数组遍历到map，key为数值，v为次数。</span><br><span class="hljs-comment">        当包含重复key时候，结束</span><br><span class="hljs-comment">         **/</span><br>        HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">if</span> (map.containsKey(num))&#123;<br>                res = num;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            map.put(num,<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="二、Set"><a href="#二、Set" class="headerlink" title="二、Set"></a>二、Set</h4><blockquote><p>遍历添加如果添加失败就是重复元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>       Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;();<br>       <span class="hljs-type">int</span> <span class="hljs-variable">repeat</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>           <span class="hljs-keyword">if</span> (!set.add(num)) &#123;<br>               repeat = num;<br>               <span class="hljs-keyword">break</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> repeat;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Lambda表达式</title>
    <link href="/2024/05/27/%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%B0%B1%E5%AD%A6%E4%BC%9ALambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2024/05/27/%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%B0%B1%E5%AD%A6%E4%BC%9ALambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>都2020年了，Java程序员还不会lambda表达式？(赶快学起来)</p></blockquote><blockquote><p>lambda表达式是JDK8的新特性，可以取代大部分的匿名内部类，写出更优雅的代码。</p></blockquote><h2 id="lambda基础语法"><a href="#lambda基础语法" class="headerlink" title="lambda基础语法"></a>lambda基础语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> sean yang</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NoReturnMultiParam</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 多参数无返回值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>;<br>&#125;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NoReturnNoParam</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无参无返回值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NoReturnOneParam</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 一参无返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>;<br>&#125;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ReturnMultiParam</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 多参数有返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br>&#125;<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ReturnNoParam</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无参数有返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ReturnOneParam</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 一参数有返回</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>用lambda表达式来测试上面的六个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LambdaMain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//无参无返回</span><br>        <span class="hljs-type">NoReturnNoParam</span> <span class="hljs-variable">noReturnNoParam</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;无参无返回&quot;</span>);<br>        &#125;;<br>        noReturnNoParam.method();<br><br>        <span class="hljs-comment">//一参数无返回</span><br>        <span class="hljs-type">NoReturnOneParam</span> <span class="hljs-variable">noReturnOneParam</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span> a ) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;一参数无返回&quot;</span>+a);<br>        &#125;;<br>        noReturnOneParam.method(<span class="hljs-number">110</span>);<br><br>        <span class="hljs-comment">//多参无返回</span><br>        <span class="hljs-type">NoReturnMultiParam</span> <span class="hljs-variable">noReturnMultiParam</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;多参数无返回&quot;</span>+ (a+b));<br>        &#125;;<br>        noReturnMultiParam.method(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">//无参有返回</span><br>        <span class="hljs-type">ReturnNoParam</span> <span class="hljs-variable">returnNoParam</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;无参有返回&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> returnNoParam.method();<br>        System.out.println(<span class="hljs-string">&quot;res = &quot;</span> +res);<br><br>        <span class="hljs-comment">//一参有返回</span><br>        <span class="hljs-type">ReturnOneParam</span> <span class="hljs-variable">returnOneParam</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span> a) -&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;一参有返回&quot;</span>);<br>            <span class="hljs-keyword">return</span> a;<br>        &#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res1</span> <span class="hljs-operator">=</span> returnOneParam.method(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;res1 = &quot;</span> +res1);<br>        <span class="hljs-comment">//多参有返回</span><br>        <span class="hljs-type">ReturnMultiParam</span> <span class="hljs-variable">returnMultiParam</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b) -&gt;&#123;<br>            System.out.println(<span class="hljs-string">&quot;多参有返回&quot;</span>);<br>            <span class="hljs-keyword">return</span> a + b;<br>        &#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res2</span> <span class="hljs-operator">=</span> returnMultiParam.method(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;res2 = &quot;</span> +res2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">无参无返回<br>一参数无返回<span class="hljs-number">110</span><br>多参数无返回<span class="hljs-number">5</span><br>无参有返回<br>res = <span class="hljs-number">1</span><br>一参有返回<br>res1 = <span class="hljs-number">3</span><br>多参有返回<br>res2 = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RocketMQ如何实现分布式事务</title>
    <link href="/2024/05/27/RocketMQ%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <url>/2024/05/27/RocketMQ%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTA5MDYxNy8yMDE5MDcvMTA5MDYxNy0yMDE5MDcxNTIwNDY0OTI0NC0xMDcwMDYwNDc1LmpwZw?x-oss-process=image/format,png"></p><ol><li>A服务也就是发送方发送half message 到 broker服务端</li><li>当A服务指导半消息发送成功后，开始执行本地事务</li><li>执行本地事务会有三种情况(1,执行成功 2，执行失败 3，网络等原因没有响应)<ul><li>如果执行成功，返回commit</li><li>如果执行失败，返回rollback</li><li>如果没有收到响应，那么回查事务状态</li></ul></li><li>根据事务的状态执行操作<ul><li>如果commit，那么提交到订阅方</li><li>如果rollback，那么不投递消息，三天后删除</li><li>如果没有收到确认，那么回查事务状态</li></ul></li></ol><p>Q ： 为什么要先发送半消息 ？</p><p>A ：</p><ol><li>可以先确认broker服务器是否正常，如果半消息都发送失败了那么说明broker挂了。</li><li>可以通过半消息来回查事务，如果半消息发送成功后一直没有被二次确认，那么就会回查事务状态</li></ol><p>Q ： 什么情况会回查 ？</p><p>A ：</p><ol><li>执行本地事务的时候，由于网络等原因一直没有返回事务执行的结果(commit 或者 rollback)导致最终返回UNKNOW，那么就会回查。</li><li>本地事务执行成功后，发送commit消息的服务挂了，重启服务的时候，这个broker还是半消息，那么也会回查。(特别注意，如果回查，一定要先查看当前事务执行状态，再看是否需要重新执行本地事务。不然有可能执行两次本地事务)</li></ol><h2 id="分布式事务解决方案"><a href="#分布式事务解决方案" class="headerlink" title="分布式事务解决方案"></a>分布式事务解决方案</h2><p>CAP定理：</p><ul><li>一致性(Consistency) : 客户端知道一系列的操作都会同时发生。</li><li>可用性(Availability)：每个操作都必须以可预期的响应结束</li><li>分区容错性(Partition tolerance):即使单个组件无法可用，操作依然可以完成</li></ul><h3 id="一、两阶段提交-2PC"><a href="#一、两阶段提交-2PC" class="headerlink" title="一、两阶段提交(2PC)"></a>一、两阶段提交(2PC)</h3><p>二阶段提交把事务分为两个阶段，并引入事务管理器</p><p>阶段一：</p><ol><li>提交事务请求：协调者向所有的事务参与者发送事务内容，询问是否可以执行事务提交操作，并开始等待各参与者的响应。</li><li>执行事务：各个参与者节点执行事务操作。并将Undo和Redo信息记入日志事务中。</li><li>各参与者向协调者反馈事务询问的响应：如果参与者成功执行了实务操作，那么返回yes响应，如果执行事务失败了，那么返回no响应，表示事务不可执行。</li></ol><p>阶段二：</p><ol><li>执行事务提交：如果事务管理器从所有事务参与者获得的反馈都是yes，那么就会执行事务提交，协调者向所有参与者节点发出commit请求。</li><li>参与者提交事务：参与者在收到commit请求后，会正式执行事务的提交，并在提交完成后释放整个事务占用的资源，并向协调者发送ack信息</li><li>完成事务：协调者收到所有事务的ack信息后，完成事务</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>高并发下微服务如何限流问题</title>
    <link href="/2024/05/27/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/"/>
    <url>/2024/05/27/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%A6%82%E4%BD%95%E9%99%90%E6%B5%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>﻿#基本概念</p><h2 id="一、高并发的相关概念："><a href="#一、高并发的相关概念：" class="headerlink" title="一、高并发的相关概念："></a>一、高并发的相关概念：</h2><ul><li>   PV：综合浏览量,即页面浏览量和点击量，如果一个系统的日PV在千万级以上，那么我们称这个系统为高并发系统。</li><li>   QPS:每秒响应的请求数。</li><li>   响应时间：从请求发出到收到响应的时间。</li><li>   吞吐量：单位时间里处理的请求数量。</li></ul><p>如何实现一个系统的高并发或者说提高一个系统的并发量呢？</p><ol><li>扩容<br>扩容分为水平扩容和垂直扩容。水平扩容就是增加机器数量，怼机器。垂直扩容就是增加单机处理能力，怼硬件。</li><li>提高接口并发能力<ul><li><pre><code class="hljs"> 缓存</code></pre></li><li>动静分离<br> 动静分离是说，动态页面和静态页面分开不同的软件架构设计方法。</li><li>   服务降级(业务高峰期，为了保证核心业务，需要停掉一些不太重要的业务)</li><li>   限流(限制系统 的流量)</li></ul></li></ol><p>高并发三把利器：缓存，限流，降级。<br>##二、库存售罄问题优化<br>如果库存已经售罄，那么后续的大流量会对数据库产生不必要的压力。这里就可以使用redis在库存售罄之后打一个标记，我们可以通过这个标记再去判断是否可以进行秒杀下单。<br>##三、流量削峰技术</p><ol><li><p>验证码技术</p></li><li><p>限流算法</p><ul><li>令牌桶算法</li><li>漏桶算法</li></ul></li><li><p>队列泄洪</p><ul><li><p>原理：</p><p>本质：排队策略</p><p>排队有时候比并发更加高效（Redis单线程模型）</p><p>依靠排队去限制并发流量</p><p>依靠排队和限制下游拥塞窗口的程度调整队列释放流量的大小</p></li><li><p>目的：保护下游系统涌入流量，提高下游系统的可用性。</p></li><li><p>代码实现</p><p>线程池</p></li><li></li></ul></li></ol><h2 id="四、令牌桶实例"><a href="#四、令牌桶实例" class="headerlink" title="四、令牌桶实例"></a>四、令牌桶实例</h2><ol><li>导包</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>28.2-jre<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>   代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//引用类</span><br><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> RateLimiter rateLimiter;<br>   <span class="hljs-meta">@PostConstruct</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123; <br>       <span class="hljs-comment">//初始化工具类表示每秒生成100个令牌</span><br>       rateLimiter = RateLimiter.create(<span class="hljs-number">100</span>);<br>   &#125;<br><br><span class="hljs-comment">//然后只需要在请求里执行下面的方法即可</span><br>rateLimiter.acquire();<br></code></pre></td></tr></table></figure><h2 id="五、队列泄洪线程池实现"><a href="#五、队列泄洪线程池实现" class="headerlink" title="五、队列泄洪线程池实现"></a>五、队列泄洪线程池实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明一个线程池</span><br><span class="hljs-keyword">private</span> ExecutorService executorService;<br> <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//初始化工具类表示每秒生成100个令牌</span><br>        rateLimiter = RateLimiter.create(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">//创建一个固定大小的线程池</span><br>        executorService = Executors.newFixedThreadPool(<span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//创建一个 只有一个线程的线程池</span><br>        <span class="hljs-comment">//executorService = Executors.newSingleThreadExecutor();</span><br>        <span class="hljs-comment">//创建一个缓存线程池</span><br>        <span class="hljs-comment">//executorService = Executors.newCachedThreadPool();</span><br>        <span class="hljs-comment">//创建一个执行定期任务的线程池</span><br>        <span class="hljs-comment">//executorService = Executors.newScheduledThreadPool();</span><br><br>    &#125;<br> Future&lt;CreatePromoOrderResponse&gt; future =  executorService.submit(<span class="hljs-keyword">new</span>   <span class="hljs-title class_">Callable</span>&lt;CreatePromoOrderResponse&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> CreatePromoOrderResponse <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>                <span class="hljs-type">CreatePromoOrderResponse</span> <span class="hljs-variable">createPromoOrderResponse</span> <span class="hljs-operator">=</span> promoService.createPromoOrderInTransaction(createPromoOrderRequest);<br>                <span class="hljs-keyword">return</span> createPromoOrderResponse;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//获取执行的结果</span><br>        <span class="hljs-type">CreatePromoOrderResponse</span> <span class="hljs-variable">createPromoOrderResponse</span> <span class="hljs-operator">=</span> future.get();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于RocketMQ报错MQClientException:no route info of this topic</title>
    <link href="/2024/05/27/%E5%85%B3%E4%BA%8ERocketMQ%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%EF%BC%9AMQClientException%EF%BC%9Ano%20route%20info%20of%20this%20topic%E7%9A%84%E8%A7%A3%E5%86%B3%E3%80%82/"/>
    <url>/2024/05/27/%E5%85%B3%E4%BA%8ERocketMQ%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%EF%BC%9AMQClientException%EF%BC%9Ano%20route%20info%20of%20this%20topic%E7%9A%84%E8%A7%A3%E5%86%B3%E3%80%82/</url>
    
    <content type="html"><![CDATA[<p>﻿###做秒杀项目里使用RocketMQ分布式消息队列去创建秒杀订单的时候，发现后台报如下错误：</p><p><img src="https://img-blog.csdnimg.cn/20200623233205636.png" alt="在这里插入图片描述"></p><h3 id="阅读报错信息，可以知道，因为找不到promo-order的-topic所以报错了。"><a href="#阅读报错信息，可以知道，因为找不到promo-order的-topic所以报错了。" class="headerlink" title="阅读报错信息，可以知道，因为找不到promo_order的 topic所以报错了。"></a>阅读报错信息，可以知道，因为找不到promo_order的 topic所以报错了。</h3><h1 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h1><p>在rocetmq的bin目录下手动创建promo_order的topic。代码为<br>(windows环境)：<br><code>start mqadmin.cmd updateTopic -n 127.0.0.1:9876 -b 127.0.0.1:10911 -t topicname</code><br>（linux环境）<br><code>sh ./mqadmin updateTopic -n localhost:9876 -b localhost:10911 -t topicname</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的最近公共祖先</title>
    <link href="/2024/05/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <url>/2024/05/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><h2 id="题目思路："><a href="#题目思路：" class="headerlink" title="题目思路："></a>题目思路：</h2><p>递归解析：</p><ol><li><p>终止条件：</p><ol><li>当越过叶节点，返回null</li><li>当root等于p,q，返回root</li></ol></li><li><p>递推工作：</p><ol><li>递归左子节点，返回值为left</li><li>递归右子节点，返回值为right</li></ol></li><li><p>返回值：</p><ol><li>当left和right同时为空：说明左右子树都不包含p，q，返回null</li><li>当left和right同时不为空：说明p、q分布在root的异侧，因此root为最近公共祖先，返回root</li><li>当left不为空，right为空：p、q都不在右子树中，直接返回left。具体有两种情况：<ol><li>p、q其中一个在root的左子树中，此时root指向p（假设为p）</li><li>p、q都在root的左子树中，此时root指向两个节点最近的公共祖先</li></ol></li><li>当right不为空，left为空时，与上同理。</li></ol><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;<br>        <span class="hljs-comment">//终止条件 </span><br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span> || root == p || root==q) <span class="hljs-keyword">return</span> root;<br>        <span class="hljs-comment">//递归左子树</span><br>         <span class="hljs-type">TreeNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> lowestCommonAncestor(root.left,p,q);<br>        <span class="hljs-comment">//递归右子树</span><br>         <span class="hljs-type">TreeNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> lowestCommonAncestor(root.right,p,q);<br>        <span class="hljs-comment">//如果左右子树都为空，那么没有公共祖先</span><br>         <span class="hljs-keyword">if</span>(left == <span class="hljs-literal">null</span> &amp;&amp;right==<span class="hljs-literal">null</span> )<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//如果左子树不为空，右子树为空，那么返回left</span><br>         <span class="hljs-keyword">if</span>(left!=<span class="hljs-literal">null</span> &amp;&amp; right ==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> left;<br>        <span class="hljs-comment">//如果左子树为空，右子树为不为空，那么返回right</span><br>         <span class="hljs-keyword">if</span>(left == <span class="hljs-literal">null</span> &amp;&amp;right!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> right;<br>        <span class="hljs-comment">//如果都不为空，那么说明在root的异侧，则返回root </span><br>        <span class="hljs-keyword">return</span> root;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉搜索树的最近公共祖先</title>
    <link href="/2024/05/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <url>/2024/05/27/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
    
    <content type="html"><![CDATA[<p>﻿#  </p><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><blockquote><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p></blockquote><h2 id="题目思路："><a href="#题目思路：" class="headerlink" title="题目思路："></a>题目思路：</h2><p>若root是p，q的最近公共祖先，则只能是以下情况：</p><ul><li>p和q在root 的子树中，且为root的异侧。（即分别在左右子树中）。</li><li>p&#x3D;root，且q在root的左子树或者右子树中。</li><li>q&#x3D;root，且p在root的左子树或者右子树中。</li></ul><p>那么本题说的是：1. 树为二叉搜索树。2.树中所有节点都是唯一的。根据这个关系，可以方便判断root与p,q关系：</p><ul><li>若<code>root.val &lt; p.val</code> ,则p在root右子树中。</li><li>若<code>root.val&gt;p.val</code>,则p在root左子树中。</li><li>若<code>root.val=p.val</code>,则p和root指向同一节点。</li></ul><h3 id="方法一：迭代"><a href="#方法一：迭代" class="headerlink" title="方法一：迭代"></a>方法一：迭代</h3><ol><li>循环搜索：当root为空退出：<ol><li>当p、q都在root右子树中，则遍历<code>root.right</code>。</li><li>否则当p、q都在root左子树中，则遍历<code>root.left</code>.</li><li>否则说明找到了公共祖先，跳出。</li></ol></li><li>返回值：最近公共祖先root。</li></ol><h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;<br>         <span class="hljs-keyword">while</span>(root!=<span class="hljs-literal">null</span>)&#123;<br>          <span class="hljs-keyword">if</span>(root.val &lt; p.val &amp;&amp; root.val &lt; q.val) root =root.right;<br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root.val &gt; p.val &amp;&amp; root.val &gt; q.val) root = root.left;<br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;  <br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法二：递归"><a href="#方法二：递归" class="headerlink" title="方法二：递归"></a>方法二：递归</h3><ol><li>流程：<ol><li>当p,q都在root的右子树中，则开起root.right并返回。</li><li>否则，当p,q都在root的左子树中，则开起递归root.left并开起。</li></ol></li><li>返回值：最近公共祖先root</li></ol><h4 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root.val &lt;p.val &amp;&amp; root.val &lt; q.val)&#123;<br>           <span class="hljs-keyword">return</span> lowestCommonAncestor(root.right,p,q);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root.val &gt; q.val &amp;&amp; root.val&gt; p.val)&#123;<br>            <span class="hljs-keyword">return</span> lowestCommonAncestor(root.left,p,q);<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>和为S的连续正数序列</title>
    <link href="/2024/05/27/%E5%92%8C%E4%B8%BAS%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/"/>
    <url>/2024/05/27/%E5%92%8C%E4%B8%BAS%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><blockquote><p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。</p><p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p></blockquote><h2 id="题目思路："><a href="#题目思路：" class="headerlink" title="题目思路："></a>题目思路：</h2><ul><li>定义一个左边界，一个右边界，左闭右开，形成一个滑动窗口。</li><li>当窗口内的数值和小于目标值的时候，右边界向前滑动一位，左边界不动，扩大此窗口和。</li><li>当窗口内的数值小于目标值的时候，左边界向前滑动一位，右边界不动，缩小此窗口和。</li><li>当等于目标值的时候，记录此窗口内的数值。然后左边界向前滑动一位，继续判断。</li><li>当左边界的值大于目标值的一半的时候退出循环，因为左边界值大于目标值一半，那么右边界必然大于目标值一半，那么和必然大于目标值，不成立。</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] findContinuousSequence(<span class="hljs-type">int</span> target) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        List&lt;<span class="hljs-type">int</span>[]&gt; res= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span>(i &lt;= target/<span class="hljs-number">2</span>)&#123;<br>            <span class="hljs-keyword">if</span>( sum &lt; target)&#123;<br>                sum += j;<br>                j++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum &gt; target)&#123;<br>                sum -= i;<br>                i++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[j-i];<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span>i ;k &lt; j; k++)&#123;<br>                    arr[k-i] = k;<br>                &#125;<br>                res.add(arr);<br>                sum -= i;<br>                i++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[res.size()][]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>﻿正则表达式</title>
    <link href="/2024/05/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2024/05/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>﻿正则表达式</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>正则表达式，又称规则表达式。代码中常写为regex，regexp，RE。</p><p>作用：正则表通常被用来判断、检索，替换那些符合某个模式的文本。</p><h2 id="正则基本规则"><a href="#正则基本规则" class="headerlink" title="正则基本规则"></a>正则基本规则</h2><ul><li>次数限定符</li></ul><table><thead><tr><th align="center">字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">*</td><td>匹配前面的子表达式零次或者多次，例如，zo*能匹配”z”以及”zoo”, *等价于{0，}</td></tr><tr><td align="center">+</td><td>匹配前面的表达式一次或者多次，例如’zo+’能匹配’zo’以及‘zoo’,但不能匹配’z’.  +等价于{1,}.</td></tr><tr><td align="center">?</td><td>匹配前面的子表达式零次或者一次，例如“do(es)?”可以匹配do或者does中的do</td></tr><tr><td align="center">{n}</td><td>n是一个非负整数。匹配确定的n次。例如‘o{2}’不能匹配‘Bob’中的’o’，但是可以匹配’food’中的’oo’</td></tr><tr><td align="center">{n,}</td><td>n是一个非负整数，至少匹配n次。例如，‘o{2}’不能匹配‘Bob’中的o，但能匹配fooooood中的所有o</td></tr><tr><td align="center">{n，m}</td><td>最少匹配n次最多匹配m次。例如，o{1,3}将匹配fooooood中的前三个o，o{0,1}等价于o？</td></tr></tbody></table><ul><li>字符集</li></ul><table><thead><tr><th>x|y</th><th>匹配x或者y。例如‘z|food’匹配z或者food。（z|f）ood匹配zood或者food</th></tr></thead><tbody><tr><td>[xyz]</td><td>字符集，匹配包含的任一字符。例如[abc]匹配plain中的a</td></tr><tr><td>[^xyz]</td><td>反向字符集。匹配未包含任何字符。例如 [ ^abc ]匹配plain中的p</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任何字符。例如[a-z]匹配a到z范围内的任何小写字符。</td></tr><tr><td>[^a-z]</td><td>反向范围字符。匹配不在任何指定范围内的任何字符。例如[ ^ a - z ]匹配不在a到z的任意字符</td></tr></tbody></table><ul><li>特殊字符</li></ul><table><thead><tr><th>^</th><th>匹配输入字符串开始的位置，如果设置了regExp对象的mutiline属性，那么还会与\n\r之后的字符相匹配</th></tr></thead><tbody><tr><td>$</td><td>匹配字符串结尾的位置，如果如果设置了regExp对象的mutiline属性，那么还会与\n\r之前的字符相匹配</td></tr><tr><td>\d</td><td>数字字符匹配，等效于[0-9]</td></tr><tr><td>\D</td><td>非数字字符匹配，等效[ ^ 0-9]</td></tr><tr><td>\w</td><td>匹配任何字类字符，包括下划线，与[A-Za-z0-9]等效</td></tr><tr><td>\W</td><td>与任何非单词字符匹配，与[ ^A-Za-z0-9]等效</td></tr></tbody></table><ul><li>其他</li></ul><table><thead><tr><th>\</th><th>转义字符</th></tr></thead><tbody><tr><td>.</td><td>匹配换行符\n之外的任何单字符，要匹配</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>层序从上到下打印二叉树</title>
    <link href="/2024/05/27/%E5%B1%82%E5%BA%8F%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2024/05/27/%E5%B1%82%E5%BA%8F%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><blockquote><p>从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。</p></blockquote><h2 id="题目思路："><a href="#题目思路：" class="headerlink" title="题目思路："></a>题目思路：</h2><ol><li>如果根节点为空，那么返回一个空列表[]</li><li>如果不为空，把根节点加入到队列中</li><li>队列为空的时候跳出循环，否则进行下面的操作<ul><li>创建一个列表</li><li>遍历队列里的元素，将其加入列表</li><li>判断当前加入元素有无左右节点，如果有就加入</li></ul></li></ol><h2 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码:"></a>题目代码:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">solution</span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;;<br>        <span class="hljs-comment">//创建一个数组列表用来保存结果</span><br>        List&lt;list&lt;Integer&gt;&gt; reslut = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//一个队列用来保存当前一层的节点</span><br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-comment">//将根节点加入到队列中</span><br>        queue.add(root);<br>        <span class="hljs-comment">//当不为空的时候退出</span><br>        <span class="hljs-keyword">while</span>(! queue.isEmpty())&#123;<br>            <span class="hljs-comment">//每一个列表里的数据就是一层的数据</span><br>            List&lt;Integer&gt; list =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-comment">//遍历队列</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; queue.size();i++)&#123;<br>                <span class="hljs-comment">//取出列表第一个节点</span><br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.pop();<br>                <span class="hljs-comment">//将其值加入到list</span><br>                list.add(node.val);<br>                <span class="hljs-comment">//判断有无左右节点</span><br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) queue.add(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) queue.add(node.right);<br>            &#125;<br>            <span class="hljs-comment">//将一层的列表添加到结果列表中</span><br>            reslut.add(list);<br>        &#125;<br>        <span class="hljs-comment">//遍历结束的时候就是中序遍历结束</span><br>        <span class="hljs-keyword">return</span> reslut;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>复杂链表的复制</title>
    <link href="/2024/05/27/%E5%89%91%E6%8C%87offer35---%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <url>/2024/05/27/%E5%89%91%E6%8C%87offer35---%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><blockquote><p>请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null.</p></blockquote><h1 id="题目思路："><a href="#题目思路：" class="headerlink" title="题目思路："></a>题目思路：</h1><blockquote><p>用一个Map保存节点和这个节点的复制。</p><p>遍历链表，按照顺讯将复制节点串联。</p></blockquote><h3 id="题目代码："><a href="#题目代码：" class="headerlink" title="题目代码："></a>题目代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">offer35</span> &#123;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-type">int</span> val;<br>        Node next;<br>        Node random;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>            <span class="hljs-built_in">this</span>.val = val;<br>            <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>;<br>            <span class="hljs-built_in">this</span>.random = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//创建一个map，K为原始节点，V为K的复制节点</span><br>    Map&lt;Node,Node&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">copyRandomList</span><span class="hljs-params">(Node head)</span> &#123;<br>        <span class="hljs-comment">//判断为空</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// temp指向head</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-comment">//遍历将每个节点的复制节点穿起来</span><br>        <span class="hljs-keyword">while</span>(temp!= <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> copyNode(temp);<span class="hljs-comment">//获取当前节点的复制</span><br>            node.next = copyNode(temp.next);<span class="hljs-comment">//复制节点的后驱指向原始节点的后驱的复制</span><br>            node.random = copyNode(temp.random);<span class="hljs-comment">//复制节点的random指向原始节点的random的复制</span><br>            temp = temp.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> copyNode(head);<br>    &#125;<br>    <span class="hljs-keyword">private</span> Node <span class="hljs-title function_">copyNode</span><span class="hljs-params">(Node node)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (! map.containsKey(node))&#123;<br>             map.put(node,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(node.val));<br>        &#125;<br>        <span class="hljs-keyword">return</span> map.get(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>用两个栈实现队列</title>
    <link href="/2024/05/27/%E5%89%91%E6%8C%87offer---%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <url>/2024/05/27/%E5%89%91%E6%8C%87offer---%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><blockquote><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )</p></blockquote><h2 id="题目代码："><a href="#题目代码：" class="headerlink" title="题目代码："></a>题目代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">solution</span>&#123;<br><br>    Stack&lt;Integer&gt; stack1;<br>    Stack&lt;Integer&gt; stack2;<br>    <span class="hljs-type">int</span> size;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CQueue</span><span class="hljs-params">()</span> &#123;<br>        stack1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();<br>        stack2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">appendTail</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-keyword">while</span>(!stack1.isEmpty())&#123;<br>            stack2.push(stack1.pop());<br>        &#125;<br><br>        stack1.push(value);<br><br>        <span class="hljs-keyword">while</span>(! stack2.isEmpty())&#123;<br>            stack1.push(stack2.pop());<br>        &#125;<br>        size ++;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteHead</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        size -- ;<br>     <span class="hljs-keyword">return</span> stack1.pop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>﻿二进制中1的个数</title>
    <link href="/2024/05/27/%E5%89%91%E6%8C%87offer15---%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <url>/2024/05/27/%E5%89%91%E6%8C%87offer15---%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><blockquote><p>请实现一个函数，输入一个整数，输出该数二进制表示中 1 的个数。例如，把 9 表示成二进制是 1001，有 2 位是 1。因此，如果输入 9，则该函数输出 2。</p></blockquote><h2 id="题目思路："><a href="#题目思路：" class="headerlink" title="题目思路："></a>题目思路：</h2><ol><li>当1&amp;0,0&amp;1,0&amp;0都等于0</li><li>只有1&amp;1才为1</li></ol><p>所以我们可以循环判断输入整数与1相与的结果，如果结果为1，那么该数字的最右边一位肯定是1，否则为0.</p><p>当为1的时候，计数器++，然后依次无符号右移一位。</p><p>无符号右移：无论是正负数，最高位都补0</p><p>有符号右移：正数补0，负数补1.</p><h2 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码:"></a>题解代码:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hammingWeight</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>)&#123;<br>          <span class="hljs-keyword">if</span> ((n &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>)&#123;<br>              count++;<br>          &#125;<br>          n &gt;&gt;&gt;=  <span class="hljs-number">1</span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> count;<br>  &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树最大深度</title>
    <link href="/2024/05/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
    <url>/2024/05/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>﻿# </p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p><img src="https://img-blog.csdnimg.cn/20200421201308597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxNzAyNjU1,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//递归</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Offer55</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftDep</span> <span class="hljs-operator">=</span> maxDepth(root.left);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightDep</span> <span class="hljs-operator">=</span> maxDepth(root.right);<br>        <span class="hljs-keyword">return</span> leftDep &gt; rightDep ? leftDep++ : rightDep++;<br>    &#125;<br>&#125;<br><br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>      <span class="hljs-type">int</span> val;<br>      TreeNode left;<br>     TreeNode right;<br>     TreeNode(<span class="hljs-type">int</span> x) &#123; val = x; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>层序遍历</p><blockquote><p>一个queue列表 一个tmp列表，当queue不为空时，遍历queue将左右节点加到tmp中，然后赋值给queue，高度+1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>       <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//高度</span><br>       LinkedList&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<span class="hljs-comment">//存放下一层节点</span><br>       queue.add(root);<br>       LinkedList&lt;TreeNode&gt; tmp ;<br>       <span class="hljs-keyword">while</span> (!queue.isEmpty())&#123;<span class="hljs-comment">//当队列不为空</span><br>           tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>           <span class="hljs-keyword">for</span> (TreeNode node: queue) &#123;<br>               <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) tmp.add(node.left);<br>               <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span>) tmp.add(node.right);<br>           &#125;<br>           queue = tmp;<br>           res++;<br>       &#125;<br>       <span class="hljs-keyword">return</span> res;<br>   &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java核心技术读书笔记</title>
    <link href="/2024/05/27/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/"/>
    <url>/2024/05/27/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0)/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Java程序基本设计结构"><a href="#一、Java程序基本设计结构" class="headerlink" title="一、Java程序基本设计结构"></a>一、Java程序基本设计结构</h2><ol><li><p>integer的范围不与机器是32位还是64位有关。</p></li><li><p>特殊转义字符:</p><table><thead><tr><th align="center">转义序列</th><th align="center">名称</th></tr></thead><tbody><tr><td align="center"><code>\b</code></td><td align="center">退格</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表</td></tr><tr><td align="center"><code>\n</code></td><td align="center">换行</td></tr><tr><td align="center"><code>\r</code></td><td align="center">回车</td></tr><tr><td align="center"><code>\\</code></td><td align="center">反斜杠</td></tr></tbody></table></li><li><p>要注意注释中的转义字符，有可能会报错。</p></li><li><p>强烈建议不使用char，最好将字符串作为抽象数据类型处理。有些字符占两个char。会导致程序报错。</p></li><li><p>整形和布尔类型不能进行转换。</p></li><li><p>整数除0将会产生异常，而浮点数除0将会得到无穷大或者NAN结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">2.0F</span>/<span class="hljs-number">0</span>);<br>结果为:System.out.println(<span class="hljs-number">2.0F</span>/<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure></li><li><p>二元运算时候，如果不进行类型转换将会有以下的情况：</p><ul><li>如果两个操作数有一个是double类型，那么另一个将会转成double。</li><li>否则，如果有一个为float，那么另一个会被转成float。</li><li>否则，如果有一个为long，那么另一个会被转成long。</li><li>否则，两个操作数都会被转成int。</li></ul></li><li><p>一旦创建了数组就不能再改变其大小，如果需要在运行过程中改变数组的大小，则需要使用另外一种数据结构—数组列表array list.</p></li><li><p>for each循环</p><blockquote><p>增强for循环得格式为： for(var :collection) { …..}</p><p>collection这一集合得表达式必须是一个数组或者是一个实现了Iterable接口的类对象。</p></blockquote></li><li><p>Java中允许数组长度为0，数组长度为0与null不同。</p></li><li><p>数组拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] smallPriems=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>&#125;;<br><span class="hljs-type">int</span>[] luckNumbers = smallPriems;<br>luckNumbers[<span class="hljs-number">5</span>] = <span class="hljs-number">12</span>;<span class="hljs-comment">//现在smallPriems[5] 也是12</span><br><span class="hljs-comment">//如果希望将一个数组的所有制拷贝到新数组里就要使用Arrays的copyOf()</span><br><span class="hljs-type">int</span>[] copiedLuckyNumbers = Arrays.copyOf(luckNumbers,luckNumbers.length);<br><span class="hljs-comment">//第二个参数是数组的长度，通常用来扩容数组,如果是数值类型那么多余的元素就是0，如果是布尔类型就是false</span><br><span class="hljs-type">int</span>[] copiedLuckyNumbers = Arrays.copyOf(luckNumbers,luckNumbers.length);<br></code></pre></td></tr></table></figure></li><li><p>String[] args</p><blockquote><p>Java程序main方法里的String[] args参数代表main方法接收一个字符串数组，也就是命令行参数。</p><p>比如看下面这个程序:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">if</span>(ars.length == <span class="hljs-number">0</span> || args[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;-h&quot;</span>))&#123;<br>            System.out.print(<span class="hljs-string">&quot;Hello&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(args[<span class="hljs-number">0</span>].equals(<span class="hljs-string">&quot;-g&quot;</span>))&#123;<br>            System.out.print(<span class="hljs-string">&quot;GoodBye&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i&lt;args.length;i++)&#123;<br>                 System.out.print(<span class="hljs-string">&quot;&quot;</span> + args[i]);<br>                 System.out.println(<span class="hljs-string">&quot;!&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//使用java Message -g cruel world 运行程序</span><br><span class="hljs-comment">//args[0]:&quot;-g&quot;    args[1]:&quot;cruel&quot;   args[2]:world</span><br><span class="hljs-comment">//因此输出GoodBye,cruel world!</span><br></code></pre></td></tr></table></figure></li><li><p>数组排序</p><blockquote><p>要相对数值型数组进行排序，可以使用Arrays类中的sort方法:这个方法使用了优化的快速排序算法。</p></blockquote></li><li><p>二维数组</p><p>要想快速打印二维数组的数据元素列表可以使用<code>Arrarys.deepToString(arr);</code></p></li><li><p>Java实际上没有多维数组，只有一维数组。多维数组被解释为”数组的数组”.</p></li></ol><h2 id="二、对象与类"><a href="#二、对象与类" class="headerlink" title="二、对象与类"></a>二、对象与类</h2><p>1.注意不要编写返回引用可变对象的访问器方法。例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> Date hireDay;<br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getHireDay</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> hireDay;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Date对象是可变的，这一点就破坏了封装性。比如我们这样操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Employee</span> <span class="hljs-variable">harry</span> <span class="hljs-operator">=</span> ....;<br><span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> harry.getHireDay();<br>d.setTime(d.getTime());<br></code></pre></td></tr></table></figure><p>此时d和hireDay指向同一个Date对象，对d调用更改器方法就可以改变这个私有变量的值。</p><p>正确的做法应该是返回一个Date对象的克隆。比如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> Date hireDay;<br>    <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getHireDay</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> (Date)hireDay.clone();<span class="hljs-comment">//返回一个克隆</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><p>final定义的变量必须被初始化，一旦赋值就不能被更改。final定义的引用变量呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fianlDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFinal</span><span class="hljs-params">()</span>&#123;<br>        s.append(<span class="hljs-string">&quot;222&quot;</span>);<br>        System.out.println(s.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>依然会输出<code>222</code>，final定义的s引用变量指向StringBuilder对象，且不可被更改，但是s还是可以添加值得。</p></li><li><p>Static静态域</p><blockquote><p>如果将域定义为static，每个类中只有一个这样得域。静态域里的值被所有对象共享，它属于类，但是不属于任何独立的对象。</p></blockquote></li><li><p>静态方法</p><blockquote><p>静态方法是一种不能向对象实施操作的方法。比如Math的pow方法就是一个静态方法，表达式Math.pow(a,2)，计算a的平方。在运算的时候不使用任何Math对象。</p><p>静态方法不能访问实例域因为不能操作对象，但是静态方法可以访问自己类里的静态域。</p></blockquote><p>在下面两种情况下使用静态方法:</p><ul><li>一个方法不需要访问对象状态，其所需参数都是显示参数提供。</li><li>一个方法只需要访问类的静态域。</li></ul></li><li><h6 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h6><blockquote><p>静态方法还有另一种常见的用途。比如NumberFormat类使用工厂方法生成不同风格的格式化对象。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFactory</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">NumberFormat</span> <span class="hljs-variable">currencyInstance</span> <span class="hljs-operator">=</span> NumberFormat.getCurrencyInstance();<br>    <span class="hljs-type">NumberFormat</span> <span class="hljs-variable">percentInstance</span> <span class="hljs-operator">=</span> NumberFormat.getPercentInstance();<br>    <span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>;<br>    System.out.println(currencyInstance.format(x));<span class="hljs-comment">//￥1.00</span><br>    System.out.println(percentInstance.format(x));<span class="hljs-comment">//100%</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为什么NumberFormat不使用构造器完成这些操作呢？主要由两个原因：</p><ul><li>无法命名构造器。构造器的名字与类名相同。但是这里希望将得到的货币实例和百分比实例有不同的名字。</li><li>当使用构造器时，无法改变所构造的对象类型。而Factory方法返回一个DecimalFormat对象，这个是NumberFormat的子类。</li></ul></li><li><p>方法参数</p><blockquote><p>Java程序设计语言总是按值调用。也就是说，方法得到 的是一个参数值的拷贝，特别是，方法不能修改传递给它任何参数变量的内容。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.seanyang.finalDemo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestParam</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 方法不能修改基本数据类型的参数</span><br><span class="hljs-comment">         */</span><br>        System.out.println(<span class="hljs-string">&quot;Testing tripleValue:&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">percent</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;Before: percent = &quot;</span> + percent);<br>        tripleValue(percent);<br>        System.out.println(<span class="hljs-string">&quot;After: percent = &quot;</span>+ percent);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 方法可以改变对象参数的状态</span><br><span class="hljs-comment">         */</span><br>        System.out.println(<span class="hljs-string">&quot;Testing triple salary&quot;</span>);<br>        <span class="hljs-type">Employee</span>  <span class="hljs-variable">harry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;harry&quot;</span>,<span class="hljs-number">50000</span>);<br>        System.out.println(<span class="hljs-string">&quot;Before : salary  =&quot;</span> + harry.getSalary());<br>        tripleSalary(harry);<br>        System.out.println(<span class="hljs-string">&quot;After : salary =&quot;</span> + harry.getSalary());<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         *一个方法不能让对象参数引用一个新的对象参数</span><br><span class="hljs-comment">         */</span><br>        System.out.println(<span class="hljs-string">&quot;Testing swap&quot;</span>);<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;alice&quot;</span>,<span class="hljs-number">70000</span>);<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;bob&quot;</span>,<span class="hljs-number">60000</span>);<br>        System.out.println(<span class="hljs-string">&quot;Before a = &quot;</span> + a.getName());<br>        System.out.println(<span class="hljs-string">&quot;Before b = &quot;</span> + b.getName());<br>        swap(a,b);<br>        System.out.println(<span class="hljs-string">&quot;After: a = &quot;</span>+a.getName());<br>        System.out.println(<span class="hljs-string">&quot;After: b = &quot;</span>+b.getName());<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(Employee x, Employee y)</span> &#123;<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span>x ;<br>        x= y;<br>        y = temp;<br>        System.out.println(<span class="hljs-string">&quot;end of method : x= &quot;</span>+x.getName());<br>        System.out.println(<span class="hljs-string">&quot;end of method : y= &quot;</span>+y.getName());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tripleSalary</span><span class="hljs-params">(Employee x)</span> &#123;<br>        x.raiseSalary(<span class="hljs-number">200</span>);<br>        System.out.println(<span class="hljs-string">&quot;end of mehtod : salary&quot;</span> + x.getSalary());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tripleValue</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> &#123;<br>        x = x *<span class="hljs-number">3</span>;<br>        System.out.println(<span class="hljs-string">&quot;end of method : percent = &quot;</span> + x);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> salary)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.salary = salary;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">raiseSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> byPercent)</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">raise</span> <span class="hljs-operator">=</span> salary * byPercent /<span class="hljs-number">100</span>;<br>        salary += raise;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出结果为:</p><blockquote><p>Testing tripleValue:<br>Before: percent &#x3D; 10.0<br>end of method : percent &#x3D; 30.0<br>After: percent &#x3D; 10.0<br>Testing triple salary<br>Before : salary  &#x3D;50000.0<br>end of mehtod : salary150000.0<br>After : salary &#x3D;150000.0<br>Testing swap<br>Before a &#x3D; alice<br>Before b &#x3D; bob<br>end of method : x&#x3D; bob<br>end of method : y&#x3D; alice<br>After: a &#x3D; alice<br>After: b &#x3D; bob</p></blockquote></li><li><p>重载</p><blockquote><p>如果多个方法有相同的名字不同的参数，便产生了重载。</p><p>编译器必须挑选出具体执行哪个方法 ，它通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。</p><p>Java允许重载任何方法，不只是构造器方法，因此要完整描述方法需要指出方法名以及参数类型。</p></blockquote></li><li><p>良好的编程习惯：显示初始化域。</p></li><li><p>注意域隐藏问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//参数是name，和成员变量名字相同。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        name = name;<br>        age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>类设计技巧：</p><ul><li>一定要保证数据私有。</li><li>一定要对数据进行初始化。</li><li>不要在类中使用过多的基本类型。</li><li>不是所有的域都需要独立的域访问器和域更改器。</li><li>将职责过多的类进行分解。</li><li>类名和方法名要能体现他们的职责。</li><li>优先使用不可变的类。</li></ul></li></ol><h2 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h2><ol><li><p>spuer并不是一个对象的引用，不能将super赋给另一个对象变量，它只是一个指示编译器调用超类方法的特殊关键字。</p></li><li><p>由于子类的构造器不能访问父类的私有域，所以必须利用父类的构造器对这部分进行初始化，我们可以利用super实现对超类构造器的调用。使用super调用构造器必须在方法的第一行。</p><p>如果子类的构造器没有显示的调用超类的构造器，则将自动调用超类默认（无参）构造器。如果超类没有无参构造器，并且在子类中没有显示调用超类其他构造，则编译器出错。</p></li><li><p>一个对象变量可以指示多种实际类型的现象被称为多态。在运行时能够自动调用哪个方法的现象被称为动态绑定。</p></li><li><p>可协变的返回类型</p><blockquote><p>如果在子类中定义了一个与超类签名相同的方法，那么子类中的方法就覆盖了超类中的这个相同签名的方法。不过返回类型不是签名的一部分，因此在覆盖方法时，一定要保证返回类型的兼容性。允许子类返回父类返回类型的子类型。</p></blockquote></li><li><p>每次动态绑定调用方法时间开销很大，因此虚拟机创建了一个方法表，其中列出了所有方法的签名和实际调用的方法。这样一来实际调用这个方法的时候虚拟机仅查找这个表就好了。</p></li><li><p>关键字为 private，static，final的方法采用静态绑定。编译器可以准确知道调用哪个方法。 </p></li><li><p>将一个类声明为final，只有其中的方法自动转换成final，而不包括域。</p></li><li><p>如果方法很简短且被频繁调用，也没有真正被覆盖，那么即时编译器就会将这个方法进行内联处理。</p></li><li><p>将一个子类引用赋值给超类，编译器是允许的，而将一个超类引用赋值给子类，必须进行强制类型转换。</p></li><li><p>访问修饰符</p></li></ol><blockquote><p>仅对本类可见—private</p><p>对所有类可见—public</p><p>对本包和所有子类可见—protected</p><p>对本包可见—（默认）不需要修饰符</p></blockquote><ol start="11"><li><p>equals方法</p><blockquote><p>Object中的equlas方法用来检测一个对象是否等于另一个对象。在object中这个方法判断两个对象是否具有相同的引用。如果两个对象的引用相同那么他们一定相等。</p><p>然而对于大多数类来说，这样得判断没有什么意义。</p><p>下面重写一个equals方法，如果雇员的姓名，工资和工龄相同就认为相等。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object object)</span>&#123;<br>       <span class="hljs-comment">//如果当前对象引用和传入对象引用相等，那这两个对象一定相等。</span><br>       <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == object) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       <span class="hljs-comment">//如果传入对象为null则不相等</span><br>       <span class="hljs-keyword">if</span> (object == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>       <span class="hljs-comment">//如果两个对象类型不一样则肯定不相等，getClass()返回一个对象所属的类</span><br>       <span class="hljs-keyword">if</span> (getClass() != object.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>       <span class="hljs-comment">//执行到这里肯定是一个同类型的非空对象了，那么强制转换</span><br>       <span class="hljs-type">Employee</span> <span class="hljs-variable">employee</span> <span class="hljs-operator">=</span> (Employee)object;<br>    <span class="hljs-comment">//为了防止name和hireDay都可能为null,如果都是null，object.equals（）会返回true,如果其中一个为null,则返回fasle,如果都不为null，则调用a.equals(b)</span><br>       <span class="hljs-keyword">return</span> Object.equals(name,employee.name)&amp;&amp;<br>           salary == employee.salary &amp;&amp; Object.equals(hireDay,employee.hireDay);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在子类中定义equals方法，首先调用超类的equals。如果检测失败对象就不可能相等。如果超类的域都相等那么比较子类的域。</p></li><li><p>Java要求equals方法具有以下的特性：</p><blockquote><p>1)自反性：对于任何非空引用x, x.equals(x)应该返回true</p><p>2)对称性：对于任何引用x和y，x.equals(y)返回true那么y.equals(x)也应该返回true</p><p>3)传递性：对任何应用x,y,z,如果x.equals(y)返回true,y.equals(z)返回true,那么x.equals(z)也应该返回true</p><p>4)一致性：如果x和y引用的对象没有发生变化，反复调用x.equals(y)应该返回同样的结果。</p><p>5)对于任何非空引用x, x.equals(null)应该返回false</p></blockquote></li><li><p>hashcode方法</p><blockquote><p>如果重新定义equals方法就必须重写hashcode方法。如果x.equals(y)返回true,那么x.hashcode()一定等于y.hashcode()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashcode</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> Object.hash(name,salary,hireDay);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>toString方法</p><blockquote><p>随处可见toSting方法的原因是：只要一个对象与一个字符串通过操作符”+”连接起来，就会自动调用toString方法，以便获得这个对象的字符串描述。</p></blockquote></li><li><p>ArrayList</p><blockquote><p>ArrayList可以存储任意类型得对象，并且可以自动扩容。</p><p>一旦确定数组列表得长度不再发生变化，就可以调用trimToSize方法。</p><p>这个方法将存储区域得大小调整为当前元素数量所需要得存储空间数目。垃圾回收器回收多余的存储空间。</p></blockquote></li><li><p>有一个技巧可以灵活扩展数组，又可以方便访问数组元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//首先创建一个数组，并添加所有的元素</span><br>ArrayList&lt;X&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">while</span>(...)&#123;<br>    x = ....;<br>    list.add(x);<br>&#125;<br><span class="hljs-comment">//执行完所有操作后，使用toArray方法将数组元素拷贝到一个数组中</span><br>x[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">x</span>[list.size()];<br>list.toArray(a);<br></code></pre></td></tr></table></figure></li><li><p>频繁在中间删除和添加数组列表效率很低，应该考虑链表数组。</p></li><li><p>装箱和拆箱是编译器认可的，而不是虚拟机。编译器在生成类的字节码文件中时，插入必要的方法调用。虚拟机只是执行这些字节码。</p></li><li><p>反射的功能可以用来：</p><ul><li>在运行时分析类的能力</li><li>在运行时查看对象，例如编写一个toString方法供所有类使用</li><li>实现通用的数组操作代码</li><li>利用Method对象。</li></ul></li><li><p>Class类</p><p>在程序运行期间，Java运行时系统为所有的对象维护一个被称为运行时的类型标识。这个信息跟踪着每个对象所属的类。虚拟机利用运行时类型信息选择相应的方法执行。</p></li><li><p>利用反射分析类的能力</p><p>Class类中的<code>getFileds</code>,<code>getMethods</code>,<code>getConstructors</code>方法将分别返回类提供的public域，方法和构造器数组，其中包括超类的公有成员。Class<code>getDeclareFileds</code>,<code>getDeclareMethods</code>,<code>getDeclareConstructors</code>将分别返回类中声明的全部域，方法和构造器，其中包括私有和受保护成员，但不包括超类的成员。</p></li><li><p>查看对象域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建雇员对象</span><br><span class="hljs-type">Employee</span> <span class="hljs-variable">harry</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;harry hacker&quot;</span>,<span class="hljs-number">35000</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1989</span>);<br><span class="hljs-comment">//获取类信息</span><br>Class cl= harry.getClass();<br><span class="hljs-comment">//获取域对象</span><br><span class="hljs-type">Filed</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> cl.getDeclareFiled(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-comment">//因为name私有</span><br>f.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//返回harry里name的值</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> f.get(harry);<br></code></pre></td></tr></table></figure></li><li><p>使用反射编写泛型数组代码</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>合并链表</title>
    <link href="/2024/05/27/%E5%89%91%E6%8C%87offer25---%E5%90%88%E5%B9%B6%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/05/27/%E5%89%91%E6%8C%87offer25---%E5%90%88%E5%B9%B6%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote><p>输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。<br>示例1：<br>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4<br>##思路：<br>###遍历判断：<br>1.创建一个伪头结点node，创建一个cur指向头结点。循环遍历结束条件为两个链表其中有一个为空。<br>2.遍历l1,l2，将其数值小的节点接到cur的后面，将合并的当前链表下移一个节点，<br>3.将cur &#x3D; cur.next<br>4.当遍历结束的时候，必有一个链表为空，把不为空的链表全部拼接到cur的后面就完成了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>       <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>       <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> node;<br>       <span class="hljs-keyword">while</span>(l1 != <span class="hljs-literal">null</span> &amp;&amp; l2 != <span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">if</span> (l1.val &lt; l2.val)&#123;<br>               cur.next = l1;<br>               l1 = l1.next;<br>           &#125;<span class="hljs-keyword">else</span> &#123;<br>               cur.next= l2;<br>               l2 = l2.next;<br>           &#125;<br>           cur = cur.next;<br>       &#125;<br><br>       cur.next = l1 ==<span class="hljs-literal">null</span>? l2: l1;<br>       <span class="hljs-keyword">return</span> node.next;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法:"></a>递归方法:</h3><ol><li>   如果l2为空返回l1， 如果l1为空返回l2</li><li>   创建一个新节点保存合并节点</li><li>   新链表的尾部指向下一个比较后的节点，如果是l1的节点则l1往后移动，如果是l2的节点则l2往后移动</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-keyword">if</span>(l1==<span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> l2;<br>        <span class="hljs-keyword">if</span>(l2==<span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> l1;<br>        <span class="hljs-keyword">if</span>(l1.val&lt;=l2.val)&#123;<br>            l1.next = mergeTwoLists(l1.next,l2);<br>            <span class="hljs-keyword">return</span> l1;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l2.next = mergeTwoLists(l1,l2.next);<br>            <span class="hljs-keyword">return</span> l2;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数组中数字出现的次数</title>
    <link href="/2024/05/27/%E5%89%91%E6%8C%87offer---%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/"/>
    <url>/2024/05/27/%E5%89%91%E6%8C%87offer---%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目:"></a>题目:</h2><blockquote><p>在一个数组 <code>nums</code> 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。</p></blockquote><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><blockquote><p>HashMap键值对&lt;存放的数字，该数字出现的次数&gt;</p></blockquote><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">singleNumber</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-comment">//hashmap K 存数字  V存次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num :<br>                nums) &#123;<br>            <span class="hljs-keyword">if</span> (!map.containsKey(num))&#123;<br>                map.put(num,<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            map.put(num,map.get(num)+<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer,Integer&gt; entry :<br>                map.entrySet()) &#123;<br>            <span class="hljs-keyword">if</span> (entry.getValue() ==<span class="hljs-number">1</span>)&#123;<br>                res =  entry.getKey();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>左旋字符串</title>
    <link href="/2024/05/27/%E5%89%91%E6%8C%87offer---%E5%B7%A6%E6%97%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2024/05/27/%E5%89%91%E6%8C%87offer---%E5%B7%A6%E6%97%8B%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><blockquote><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p><p>示例 1：</p><p>输入: s &#x3D; “abcdefg”, k &#x3D; 2<br>输出: “cdefgab”<br>示例 2：</p><p>输入: s &#x3D; “lrloseumgh”, k &#x3D; 6<br>输出: “umghlrlose”</p><p>限制：</p><p>1 &lt;&#x3D; k &lt; s.length &lt;&#x3D; 10000</p></blockquote><h2 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h2><ol><li><p>字符串切片</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseLeftWords</span><span class="hljs-params">(String s,<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> s.substring(n-<span class="hljs-number">1</span>,s.length()-<span class="hljs-number">1</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> s.substring(<span class="hljs-number">0</span>,n-<span class="hljs-number">1</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> str1 + str2;<br>        <span class="hljs-keyword">return</span> s3;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>列表遍历拼接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseLeftWords</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n; i &lt; s.length(); i++)<br>            res.append(s.charAt(i));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            res.append(s.charAt(i));<br>        <span class="hljs-keyword">return</span> res.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>反转链表</title>
    <link href="/2024/05/27/%E5%89%91%E6%8C%87offer---%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2024/05/27/%E5%89%91%E6%8C%87offer---%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述:"></a>题目描述:</h2><blockquote><p>定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点。</p><p>输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL<br>输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</p></blockquote><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><h3 id="一、双指针迭代"><a href="#一、双指针迭代" class="headerlink" title="一、双指针迭代"></a>一、双指针迭代</h3><blockquote><p>设置一个pre节点开始指向null，cur节点指向当前节点，反转整个链表就是用当前节点cur指向前驱节点pre。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tLzdkODcxMmFmNGZiYjg3MDUzNzYwN2IxZGQ5NWQ2NmMyNDhlYjE3OGRiNDMxOTkxOWMzMmQ5MzA0ZWU4NWI2MDItJUU4JUJGJUFEJUU0JUJCJUEzLmdpZg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br><span class="hljs-comment">//申请节点，pre和 cur，pre指向null</span><br><span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br><span class="hljs-type">ListNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">//记录当前节点的下一个节点</span><br>tmp = cur.next;<br><span class="hljs-comment">//然后将当前节点指向pre</span><br>cur.next = pre;<br><span class="hljs-comment">//pre和cur节点都前进一位</span><br>pre = cur;<br>cur = tmp;<br>&#125;<br><span class="hljs-keyword">return</span> pre;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、递归解法"><a href="#二、递归解法" class="headerlink" title="二、递归解法"></a>二、递归解法</h3><blockquote><p>递归终止条件是节点为空或者节点的下一个节点为空。</p><p>将当前节点的下一个节点指向当前节点。</p><p>即head.next.next &#x3D; head ;即完成反转。</p></blockquote><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL2RhY2QxYmY1NWRlYzVjOGIzOGQwOTA0ZjI2ZTQ3MmUyMDI0ZmM4YmVlNGVhNDZlM2FhNjc2ZjM0MGJhMWViOWQtJUU5JTgwJTkyJUU1JUJEJTkyLmdpZg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> reverseList(head.next);<br>        head.next.next = head;<br>        head.next = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DBUtils结果处理</title>
    <link href="/2024/05/27/DBUntils%E7%BB%93%E6%9E%9C%E5%A4%84%E7%90%86/"/>
    <url>/2024/05/27/DBUntils%E7%BB%93%E6%9E%9C%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs java">﻿```java<br><span class="hljs-keyword">package</span> com.cskaoyan.JDBCDemo;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.DbUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.*;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultSetDemo</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ArryHandler :把结果的第一行数据转成对象数组</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testArrHandler</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(getDataSource());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from user&quot;</span>;<br>        Object arr[] = queryRunner.query(sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayHandler</span>());<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ArrListHandler :把结果集中的每一行数据都转成一个数组，再存放到List中。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testArrListHandler</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(getDataSource());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from user&quot;</span>;<br>        List&lt;Object[]&gt; arr = queryRunner.query(sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayListHandler</span>());<br>        <span class="hljs-keyword">for</span> (Object[] obj :<br>                arr) &#123;<br>            System.out.println(Arrays.toString(obj));<br>        &#125;<br>    <br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * BeanHandler : 将结果集中的第一行数据封装到一个对应的JavaBean实例中。</span><br><span class="hljs-comment">     * 使用 BeanHandler 和 BeanListHandler 需要注意以下几点：</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 1. 对应的 JavaBean 必须提供无参构造方法。</span><br><span class="hljs-comment">     * 2. JavaBean 的属性名应该和返回结果的字段名相同。</span><br><span class="hljs-comment">     * 3. JavaBean 中必须提供公共的 Setter 方法。</span><br><span class="hljs-comment">     */</span><br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBeanHandler</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(getDataSource());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from t_user&quot;</span>;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> queryRunner.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;&gt;(User.class));<br>        System.out.println(user);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * BeanListHandler:将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">tetsBeanListHandler</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(getDataSource());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from user&quot;</span>;<br>        List&lt;User&gt; users = queryRunner.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;&gt;(User.class));<br>        <span class="hljs-keyword">for</span> (User user :<br>                users) &#123;<br>            System.out.println(user);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * ColumnListHandler：将结果集中某一列的数据存放到List中。</span><br><span class="hljs-comment">     */</span><br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">testColumListHandler</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(getDataSource());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select username from user&quot;</span>;<br>        <span class="hljs-comment">//因为username是varchar  所以存放string</span><br>        List&lt;String&gt; users = queryRunner.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ColumnListHandler</span>&lt;String&gt;());<br>        <span class="hljs-keyword">for</span> (String name :<br>             users) &#123;<br>            System.out.println(name);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，</span><br><span class="hljs-comment">     * 再把这些map再存到一个map里，其key为指定的key。</span><br><span class="hljs-comment">     */</span><br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testKyeHandler</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(getDataSource());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from user&quot;</span>;<br>        Map&lt;Integer, Map&lt;String, Object&gt;&gt; query =<br>                queryRunner.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyedHandler</span>&lt;Integer&gt;(<span class="hljs-string">&quot;id&quot;</span>));<br>        System.out.println(query);<br><br><br>​        <br><br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭连接</span><br><span class="hljs-comment">     */</span><br><br><br><br><br><br><br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取数据源</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  数据源</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//加载配置文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        javax.sql.<span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;druid.properties&quot;</span>);<br>        info.load(reader);<br>        <span class="hljs-comment">//创建数据源</span><br>        dataSource = DruidDataSourceFactory.createDataSource(info);<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DBUntils操作工具类</title>
    <link href="/2024/05/27/DBUntils%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <url>/2024/05/27/DBUntils%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java">﻿```java<br><span class="hljs-keyword">package</span> com.cskaoyan.JDBCDemo;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<br><span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<br><span class="hljs-keyword">import</span> org.junit.Assert;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 它是对 JDBC 的简单封装，学习成本极低，</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 使用 dbutils 可以简化 jdbc 编码的工作量，同时也不会影响程序的性能。</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 使用 DBUtils 需要导入 commons-dbutils-1.7.jar。DBUtils 有三个核心的组件：</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 1. QueryRunner：该类提供了 DML 和 DQL 的API。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 2. ResultSetHandler：该接口定义如何封装结果集。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * 3. DbUtils：一个简单的工具类，简化了关闭资源和事务处理。</span><br><span class="hljs-comment">      */</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DBUtils</span> &#123;<br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      * 添加数据</span><br><span class="hljs-comment">      * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">        */</span><br>          <span class="hljs-meta">@Test</span><br>          <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tetsInsert</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//该类提供了DML  DQL的API</span><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(getDataSource());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into user(username,password,balance)values(?,?,?)&quot;</span>;<br>        Object[] params =&#123;<span class="hljs-string">&quot;yangxing&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>,<span class="hljs-number">2000</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> queryRunner.update(sql, params);<br>        Assert.assertEquals(<span class="hljs-number">1</span>,rows);<br>          &#125;<br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      * 更新数据</span><br><span class="hljs-comment">        */</span><br>          <span class="hljs-meta">@Test</span><br>          <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">testUpdate</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(getDataSource());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update user set balance  = 50 where id =?&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-number">333</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> queryRunner.update(sql, param);<br>        Assert.assertEquals(<span class="hljs-number">1</span>,row);<br>          &#125;<br><br>     <span class="hljs-meta">@Test</span><br>     <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDelete</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>         <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(getDataSource());<br>         <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from user where id =?&quot;</span>;<br>         <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-number">222</span>;<br>         <span class="hljs-type">int</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> queryRunner.update(sql, param);<br>         Assert.assertEquals(<span class="hljs-number">1</span>,row);<br>     &#125;<br><br>     <span class="hljs-meta">@Test</span><br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>         <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(getDataSource());<br>         String sql= <span class="hljs-string">&quot;select * from user where username = ?&quot;</span>;<br>         <span class="hljs-type">Object</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yangxing&quot;</span>;<br>         <span class="hljs-comment">//User 类定义了字段变量，实现无参构造和setter</span><br>         <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> queryRunner.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;&gt;(User.class), param);<br>         System.out.println(user);<br>     &#125;<br><br>     <span class="hljs-meta">@Test</span><br>     <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>         <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(getDataSource());<br>         <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into user(username,password,balance) values (?,?,?)&quot;</span>;<br>         Object[][] params = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">1000</span>][<span class="hljs-number">3</span>];<br>         <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>             params[i] = <span class="hljs-keyword">new</span>  <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;user&quot;</span>+i,<span class="hljs-string">&quot;password&quot;</span>+i,i&#125;;<br>         &#125;<br>         <span class="hljs-type">int</span> [] rowsArr = queryRunner.batch(sql,params);<br>     &#125;<br><br>     <br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      * 获取数据源</span><br><span class="hljs-comment">      * <span class="hljs-doctag">@return</span>  数据源</span><br><span class="hljs-comment">        */</span><br>          <span class="hljs-keyword">private</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//加载配置文件</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;druid.properties&quot;</span>);<br>        info.load(reader);<br>        <span class="hljs-comment">//创建数据源</span><br>        dataSource = DruidDataSourceFactory.createDataSource(info);<br>        <span class="hljs-keyword">return</span> dataSource;<br>          &#125;<br>        &#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Druid基础</title>
    <link href="/2024/05/27/Druid%E5%9F%BA%E7%A1%80%E5%AE%9E%E4%BE%8B/"/>
    <url>/2024/05/27/Druid%E5%9F%BA%E7%A1%80%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java">﻿```java<br><span class="hljs-keyword">package</span> com.cskaoyan.JDBCDemo;<br><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DruidDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//读取文件字符流</span><br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;druid.properties&quot;</span>);<br>        <span class="hljs-comment">//加载配置文件</span><br>        info.load(fileReader);<br>        <span class="hljs-comment">//创建数据库连接池</span><br>        <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(info);<br>        fileReader.close();<br>        <span class="hljs-comment">//获取连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>        <span class="hljs-comment">//创建预编译执行平台</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>        <span class="hljs-comment">//创建表</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;create table user(\n&quot;</span> +<br>                <span class="hljs-string">&quot;id int primary key,\n&quot;</span> +<br>                <span class="hljs-string">&quot;username varchar(20),\n&quot;</span> +<br>                <span class="hljs-string">&quot;password varchar(20),\n&quot;</span> +<br>                <span class="hljs-string">&quot;balance decimal(10,2)\n&quot;</span> +<br>                <span class="hljs-string">&quot;)&quot;</span>;<br>        statement.execute(sql);<br>        <span class="hljs-comment">//批处理</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into user values(?,?,?,?)&quot;</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql1);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10000</span>; i++) &#123;<br>            preparedStatement.setInt(<span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>);<br>            preparedStatement.setString(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;user&quot;</span> + i);<br>            preparedStatement.setString(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;password&quot;</span> + i);<br>            preparedStatement.setDouble(<span class="hljs-number">4</span>, i +<span class="hljs-number">123</span>);<br>            preparedStatement.addBatch();<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>) &#123;<br>                preparedStatement.executeBatch();<br>                preparedStatement.clearBatch();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//打印查询结果</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sqQuery</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select username,balance from user where balance &gt;10000&quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sqQuery);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;test.txt&quot;</span>));<br>        printWriter.println(<span class="hljs-string">&quot;username&quot;</span> + <span class="hljs-string">&quot;\t&quot;</span> +<span class="hljs-string">&quot;balance&quot;</span>);<br>        <span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> resultSet.getNString(<span class="hljs-string">&quot;username&quot;</span>);<br>            <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> resultSet.getBigDecimal(<span class="hljs-string">&quot;balance&quot;</span>);<br>            printWriter.println(username+<span class="hljs-string">&quot;\t&quot;</span>+balance);<br>        &#125;<br><br>        printWriter.close();<br>        connection.close();<br>    <br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JDBC执行SQL</title>
    <link href="/2024/05/27/JDBC%E6%89%A7%E8%A1%8CSQL%E8%AF%AD%E5%8F%A5%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/05/27/JDBC%E6%89%A7%E8%A1%8CSQL%E8%AF%AD%E5%8F%A5%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java">﻿```java<br><span class="hljs-keyword">package</span> com.cskaoyan.JDBCDemo;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCStatement</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建一个连接到数据库的连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException   连接失败会抛出SQL异常</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Connection <span class="hljs-title function_">createConnetion</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db3&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yang19960421&quot;</span>;<br>        connection = DriverManager.getConnection(url, user, pwd);<br>        <span class="hljs-keyword">return</span> connection;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建数据库</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createDatabases</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> createConnetion();<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;create database if not  exists  db3&quot;</span>;<br>        statement.execute(sql);<br>    <br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建表</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createTable</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> createConnetion();<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;create table if not exists tb1 (id int primary key,a int)&quot;</span>;<br>        statement.execute(sql);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 插入数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertInto</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> createConnetion();<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into tb1 values(1,2),(2,33),(3,44)&quot;</span>;<br>        statement.execute(sql);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *查询数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connetion</span> <span class="hljs-operator">=</span> createConnetion();<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connetion.createStatement();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from tb1&quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>        <span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;a&quot;</span>);<br>            System.out.println(id+<span class="hljs-string">&quot; &quot;</span>+ a);<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JDBC连接的几种方法</title>
    <link href="/2024/05/27/JDBC%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/2024/05/27/JDBC%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java">﻿```java<br><span class="hljs-keyword">package</span> com.cskaoyan.JDBCDemo;<br><br><span class="hljs-keyword">import</span> org.junit.Assert;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//注册驱动</span><br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.mysql.jdbc.Driver();<br>        <span class="hljs-comment">//建立连接</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        info.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>        info.setProperty(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;yang19960421&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> driver.connect(url, info);<br>        <span class="hljs-comment">//获取sql语句执行平台</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connect.createStatement();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,hp_max from heros where id =1004 &quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>        <span class="hljs-keyword">while</span> (resultSet.next())&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getNString(<span class="hljs-string">&quot;name&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">hp_max</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;hp_max&quot;</span>);<br>            System.out.println(id+<span class="hljs-string">&quot; &quot;</span>+name+<span class="hljs-string">&quot; &quot;</span>+hp_max);<br>        &#125;<br>        <span class="hljs-comment">//关闭连接</span><br>        connect.close();<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">conDemo1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>       <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.mysql.jdbc.Driver();<br>       DriverManager.registerDriver(driver);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>,<br>                <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;yang19960421&quot;</span>);<br>        <span class="hljs-comment">//断言</span><br>        Assert.assertNotNull(connection);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">conDemo2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">diverClass</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yang19960421&quot;</span>;<br>        <span class="hljs-comment">//反射获取驱动类信息</span><br>        Class&lt;?&gt; clazz = Class.forName(diverClass);<br>        <span class="hljs-comment">//实例化驱动</span><br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver) clazz.newInstance();<br>        DriverManager.registerDriver(driver);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, pwd);<br>        Assert.assertNotNull(connection);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">conDemo3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">diverClass</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yang19960421&quot;</span>;<br>        <span class="hljs-comment">//类加载时自动注册驱动</span><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clzz</span>  <span class="hljs-operator">=</span>Class.forName(diverClass);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, pwd);<br>        Assert.assertNotNull(connection);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">conDemo4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yang19960421&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, pwd);<br>        Assert.assertNotNull(connection);<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>线程池</title>
    <link href="/2024/05/27/%E6%89%8B%E5%86%99%E7%AE%80%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <url>/2024/05/27/%E6%89%8B%E5%86%99%E7%AE%80%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>线程池：<br>问题：在<code>JDK</code>中什么代表线程池？<code> Executor</code><br>线程池其实就是一个生产者消费者模型<br>   生产者：提交任务的线程<br>   消费者：处理任务的线程<br>   产品：任务</p><p>问题：大家以前是如何创建线程池的？<br>   <code>Executors</code>里面的静态方法<br>注意事项：<br>   工作中不要使用<code>Executors</code>里面的静态方法去创建线程里。<br>       原因：这样创建的线程池，里面的阻塞队列都是<code>LinkedBlockingDeque</code>, 可以’无限’缓存任务。<br>             在并发量比较高的场景中，容易导致<code>OOM</code>.<br>   最好使用<code>ThreadPoolExecutor</code>去创建线程池</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThreadPool</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Executor</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_CAPACITY</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE - <span class="hljs-number">8</span>;<br><br>    <span class="hljs-keyword">private</span> BlockingQueue&lt;Runnable&gt; tasks;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>; <span class="hljs-comment">// 处理任务的线程数目</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThreadPool</span><span class="hljs-params">()</span> &#123;<br>        tasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(DEFAULT_CAPACITY);<br>        init(); <span class="hljs-comment">// 创建线程，并就绪</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>        <span class="hljs-keyword">if</span> (capacity &lt;= <span class="hljs-number">0</span> || capacity &gt; MAX_CAPACITY) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;capacity=&quot;</span> + capacity);<br>        &#125;<br>        tasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(capacity);<br>        init();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkThread</span>().start();<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable command)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            tasks.put(command); <span class="hljs-comment">// 提交任务</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123; <span class="hljs-comment">// 死循环：回收线程</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    tasks.take().run();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">JDK：BlockingQueue&lt;E&gt;</span><br><span class="hljs-comment">    |-- ArrayBlockingQueue: 容量大小固定</span><br><span class="hljs-comment">    |-- LinkedBlockingDeque: 容量大小步固定，除非指定大小。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBlockingQueue</span>&lt;E&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_CAPACITY</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE - <span class="hljs-number">8</span>;<br>    <span class="hljs-comment">// 属性</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">private</span> E[] elements;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyBlockingQueue</span><span class="hljs-params">()</span> &#123;<br>        elements = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[DEFAULT_CAPACITY];<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyBlockingQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>        <span class="hljs-keyword">if</span> (initialCapacity &lt;= <span class="hljs-number">0</span> || initialCapacity &gt; MAX_CAPACITY) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;initialCapacity=&quot;</span> + initialCapacity);<br>        &#125;<br>        elements = (E[]) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[initialCapacity];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(E e)</span> &#123;<br>        <span class="hljs-comment">// 判断队列是否满</span><br>        <span class="hljs-comment">// if (size == elements.length) &#123;</span><br>        <span class="hljs-keyword">while</span> (size == elements.length) &#123; <span class="hljs-comment">// Caution! 不能够使用if</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<span class="hljs-comment">// t1, t2</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e1) &#123;<br>                e1.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 添加元素</span><br>        elements[rear] = e;<br>        rear = (rear + <span class="hljs-number">1</span>) % elements.length;<br>        size++;<br>        <span class="hljs-comment">// 队列不空, 需要唤醒其它线程</span><br>        notifyAll();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> E <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 判断队列是否为空</span><br>        <span class="hljs-comment">// if (size == 0) &#123;</span><br>        <span class="hljs-keyword">while</span> (size == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 删除元素</span><br>        <span class="hljs-type">E</span> <span class="hljs-variable">removeValue</span> <span class="hljs-operator">=</span> elements[front];<br>        elements[front] = <span class="hljs-literal">null</span>;<br>        front = (front + <span class="hljs-number">1</span>) % elements.length;<br>        size--;<br>        <span class="hljs-comment">// 队列不满，唤醒其它线程</span><br>        notifyAll();<br>        <span class="hljs-keyword">return</span> removeValue;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (size == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                wait();<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> elements[front];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树基本操作实现</title>
    <link href="/2024/05/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/05/27/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><code class="hljs `java"><br><br>/*<br>增：<br>    boolean add(E e)<br>删：<br>    boolean remove(E e)<br>查找：<br>    boolean contains(E e)<br>    E min()<br>    E max()<br>遍历：<br>    List&lt;E&gt; preOrder()<br>    List&lt;E&gt; inOrder()<br>    List&lt;E&gt; postOrder()<br>    List&lt;E&gt; levelOrder()<br>获取集合的属性：<br>    int height()<br>    boolean isEmpty()<br>    int size()<br>建树：<br>    static &lt;T&gt; BinarySearchTree buildTree(List&lt;T&gt; preOrder, List&lt;T&gt; inOrder);<br> */<br>public class BinarySearchTree&lt;E extends Comparable&lt;? super E&gt;&gt; &#123;<br>    // 属性<br>    private TreeNode root;<br>    private int size;<br><br>    private class TreeNode &#123;<br>        TreeNode left;<br>        E value;<br>        TreeNode right;<br>    <br>        public TreeNode(E value) &#123;<br>            this.value = value;<br>        &#125;<br>    <br>        public TreeNode(TreeNode left, E value, TreeNode right) &#123;<br>            this.left = left;<br>            this.value = value;<br>            this.right = right;<br>        &#125;<br>    &#125;<br>    <br>    /**<br>     * 在BST添加元素e<br>     *<br>     * @param e 待添加的元素<br>     * @return 如果添加成功返回true, 否则返回false<br>     */<br>    public boolean add(E e) &#123;<br>        /*// 空树<br>        if (root == null) &#123;<br>            root = new TreeNode(e);<br>            size++;<br>            return true;<br>        &#125;<br>        // 根结点不为空<br>        TreeNode p = null;<br>        TreeNode x = root;<br>        int cmp;<br>        do &#123;<br>            cmp = e.compareTo(x.value);<br>            if (cmp == 0) return false;<br>            else if (cmp &lt; 0) &#123;<br>                p = x;<br>                x = x.left;<br>            &#125; else &#123;<br>                p = x;<br>                x = x.right;<br>            &#125;<br>        &#125; while (x != null);<br>        // x == null, 当前位置就是要添加的位置<br>        if (cmp &lt; 0) p.left = new TreeNode(e);<br>        else p.right = new TreeNode(e);<br>        size++;<br>        return true;*/<br>        // 递归实现<br>        int oldSize = size;<br>        root = add(root, e);<br>        return size &gt; oldSize;<br>    &#125;<br>    <br>    private TreeNode add(TreeNode node, E e) &#123;<br>        if (node == null) &#123;<br>            size++;<br>            return new TreeNode(e);<br>        &#125;<br>        int cmp = e.compareTo(node.value);<br>        // 通过赋值语句把新建的结点链接起来的<br>        if (cmp &lt; 0) node.left = add(node.left, e);<br>        else if (cmp &gt; 0) node.right = add(node.right, e);<br>        return node;<br>    &#125;<br>    <br>    /**<br>     * 删除BST中与指定对象e相等的元素<br>     *<br>     * @param e 指定对象<br>     * @return 如果删除成功返回true, 否则返回false<br>     */<br>    public boolean remove(E e) &#123;<br>        TreeNode p = null;<br>        TreeNode x = root;<br>        while (x != null) &#123;<br>            int cmp = e.compareTo(x.value);<br>            if (cmp == 0) break;<br>            else if (cmp &lt; 0) &#123;<br>                p = x;<br>                x = x.left;<br>            &#125; else &#123;<br>                p = x;<br>                x = x.right;<br>            &#125;<br>        &#125;<br>        // 没有与指定对象相等的元素 x == null<br>        if (x == null) return false;<br>    <br>        // 判断x是不是度为2的结点<br>        if (x.left != null &amp;&amp; x.right != null) &#123;<br>            // 将右子树中最小结点替换x结点的值<br>            TreeNode minP = x;<br>            TreeNode minX = x.right;<br>            while (minX.left != null) &#123;<br>                minP = minX;<br>                minX = minX.left;<br>            &#125;<br>            // minX.left == null<br>            // 用右子树中元素替换该结点的元素<br>            x.value = minX.value;<br>            // 删除右子树中最小结点<br>            p = minP;<br>            x = minX;<br>        &#125;<br>    <br>        // 删除x结点(度为0或者度为1)<br>        TreeNode child = x.left != null ? x.left : x.right;<br>        // 判断删除的是不是根结点<br>        if (p == null) root = child;<br>        else &#123;<br>            if (p.left == x) p.left = child;<br>            else p.right = child;<br>        &#125;<br>        size--;<br>        return true;<br>    &#125;<br>    <br>    public boolean contains(E e) &#123;<br>        TreeNode x = root;<br>        while (x != null) &#123;<br>            int cmp = e.compareTo(x.value);<br>            if (cmp == 0) return true;<br>            else if (cmp &lt; 0) x = x.left;<br>            else x = x.right;<br>        &#125;<br>        // x == null<br>        return false;<br>    &#125;<br>    <br>    /**<br>     * 获取BST中最小的元素,如果是空树返回null<br>     *<br>     * @return BST中最小的元素, 如果是空树返回null<br>     */<br>    public E min() &#123;<br>        if (isEmpty()) return null;<br>        TreeNode x = root;<br>        while (x.left != null) &#123;<br>            x = x.left;<br>        &#125;<br>        // x.left == null<br>        return x.value;<br>    &#125;<br>    <br>    /**<br>     * 获取BST中最大的元素,如果是空树返回null<br>     *<br>     * @return BST中最大的元素, 如果是空树返回null<br>     */<br>    public E max() &#123;<br>        if (isEmpty()) return null;<br>        TreeNode x = root;<br>        while (x.right != null) &#123;<br>            x = x.right;<br>        &#125;<br>        // x.right == null<br>        return x.value;<br>    &#125;<br>    <br>    public int size() &#123;<br>        return size;<br>    &#125;<br>    <br>    /**<br>     * 判断BST是否是一棵空树<br>     *<br>     * @return 如果BST是空树返回true, 否则返回false<br>     */<br>    public boolean isEmpty() &#123;<br>        return root == null;<br>    &#125;<br>    <br>    public List&lt;E&gt; preOrder() &#123;<br>        // 如果是空树,就返回空集合,不要返回null<br>        List&lt;E&gt; list = new ArrayList&lt;&gt;();<br>        preOrder(root, list);<br>        return list;<br>    &#125;<br>    <br>    private void preOrder(TreeNode node, List&lt;E&gt; list) &#123;<br>        if (node == null) return;<br>        // 遍历根节点<br>        list.add(node.value);<br>        // 遍历左子树<br>        preOrder(node.left, list);<br>        // 遍历右子树<br>        preOrder(node.right, list);<br>    &#125;<br>    <br>    public List&lt;E&gt; inOrder() &#123;<br>        List&lt;E&gt; list = new ArrayList&lt;&gt;();<br>        inOrder(root, list);<br>        return list;<br>    &#125;<br>    <br>    private void inOrder(TreeNode node, List&lt;E&gt; list) &#123;<br>        if (node == null) return;<br>        // 遍历左子树<br>        inOrder(node.left, list);<br>        // 遍历根节点<br>        list.add(node.value);<br>        // 遍历右子树<br>        inOrder(node.right, list);<br>    &#125;<br>    <br>    public static void main(String[] args) &#123;<br>        BinarySearchTree&lt;Character&gt; tree = new BinarySearchTree&lt;&gt;();<br>        /*System.out.println(tree.size());<br>        System.out.println(tree.preOrder());<br>        System.out.println(tree.inOrder());*/<br>        tree.add(&#x27;C&#x27;);<br>        tree.add(&#x27;A&#x27;);<br>        tree.add(&#x27;D&#x27;);<br>        tree.add(&#x27;B&#x27;);<br>        tree.add(&#x27;E&#x27;);<br>        /*System.out.println(tree.size());<br>        System.out.println(tree.preOrder()); // [C, A, B, D, E]<br>        // 中序是排好序的<br>        System.out.println(tree.inOrder()); // [A, B, C, D, E]*/<br>    <br>        // contains(E e)<br>        /*System.out.println(tree.contains(&#x27;A&#x27;)); // true<br>        System.out.println(tree.contains(&#x27;X&#x27;)); // false<br>        System.out.println(tree.contains(null)); // NullPointerException*/<br>    <br>        /*System.out.println(tree.isEmpty());<br>        System.out.println(tree.min());<br>        System.out.println(tree.max());*/<br>    <br>        // remove()<br>        // 删除度为0<br>        /*System.out.println(tree.remove(&#x27;B&#x27;));<br>        System.out.println(tree.size());<br>        System.out.println(tree.preOrder()); //[C, A, D, E]<br>        System.out.println(tree.inOrder());*/<br>    <br>        //删除度为1<br>        /*System.out.println(tree.remove(&#x27;D&#x27;));<br>        System.out.println(tree.size());<br>        System.out.println(tree.preOrder()); //[C, A, B, E]<br>        System.out.println(tree.inOrder());*/<br>    <br>        // 删除度为2<br>        /*System.out.println(tree.remove(&#x27;C&#x27;));<br>        System.out.println(tree.size());<br>        System.out.println(tree.preOrder()); //[D, A, B, E]<br>        System.out.println(tree.inOrder());*/<br>    <br>        // 删除不存在的<br>        System.out.println(tree.remove(&#x27;X&#x27;));<br>        System.out.println(tree.size());<br>        System.out.println(tree.preOrder()); //[C, A, B, D, E]<br>        System.out.println(tree.inOrder());<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code class="hljs"></code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>递归删除二叉搜索树</title>
    <link href="/2024/05/27/%E9%80%92%E5%BD%92%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <url>/2024/05/27/%E9%80%92%E5%BD%92%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><ul><li><p>要删除的节点为叶子节点，可以直接删除。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL2I4NmM1ZDU4NjZmYjhiMWY2YTJmMTVmNDcyNjJhZGYzYWU2OGU1NjQ5OGM5ZTI2MWEwMzFiYmI4ZWJjNTU1ODgtZmlsZV8xNTc2NDc3OTEyMzAy?x-oss-process=image/format,png" alt="alt 叶子"></p></li><li><p>要删除的几点不是叶子节点且拥有右节点，则该节点可以由该节点的后继节点进行替代，该后继节点位于右子树中较低的位置。然后可以从后继节点的位置递归向下操作以删除后继节点。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tLzEyMzUzZTVjNzEyNjdhYWZkMzU1MzE5YThiODgxZjBiOWVmYWUwNjgwMzU4YjdjZTczODIyODE1MWE0MmQzY2MtZmlsZV8xNTc2NDc3OTEyMzEy?x-oss-process=image/format,png"></p></li><li><p>要删除的节点不是叶子节点，且没有右节点但是有左节点。这意味着它的后继节点在它的上面，但是我们并不想返回。我们可以使用它的前驱节点进行替代，然后再递归的向下删除前驱节点。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tLzJhOWFhNDRhYWI3OTQ4ZTc4ZTA2MTgyNzkxZTJlYWFmMDBmYjcyZWZmMDU0YTFmNDYxMjAzMGEwNDdkZGU1OWEtZmlsZV8xNTc2NDc3OTEyMzE1?x-oss-process=image/format,png"></p></li></ul><h2 id="算法："><a href="#算法：" class="headerlink" title="算法："></a>算法：</h2><ul><li>如果<code>key &gt; root.val</code>，则说明要删除的节点在右子树，<code>root.right = deleteNode(root.right,key);</code></li><li>如果<code>key &lt; root.val</code>,  则说明要删除的节点在左子树，<code>root.left = deleteNode(root.left,key);</code></li><li>如果<code>key == root.val</code>, 则说明当前节点就是要删除的节点,则：<ul><li>如果该节点是叶子节点，则直接删除它。<code>root = null</code>.</li><li>如果该节点不是叶子节点且有右节点，则用他后继节点的值代替，<code>root.val = successor.val</code>.然后删除后继节点。</li><li>如果该节点不是叶子节点且只有左节点，则用他的前驱节点的值代替，<code>root.val = predecessor.val</code>,然后删除前驱节点。</li></ul></li><li>返回 <code>root</code>.</li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9waWMubGVldGNvZGUtY24uY29tL2NhYmQ3MGRlNzliNTMzZjc0NGYzYTkwNjg5NDFjOWJlMTA3MTFhNDdhMjZiM2RhZWQ2N2JkMDBmZWQzOTE2NDQtZmlsZV8xNTc2NDc3OTEyMzA0?x-oss-process=image/format,png"></p><h2 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  One step right and then always left</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">successor</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    root = root.right;<br>    <span class="hljs-keyword">while</span> (root.left != <span class="hljs-literal">null</span>) root = root.left;<br>    <span class="hljs-keyword">return</span> root.val;<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  One step left and then always right</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">predecessor</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    root = root.left;<br>    <span class="hljs-keyword">while</span> (root.right != <span class="hljs-literal">null</span>) root = root.right;<br>    <span class="hljs-keyword">return</span> root.val;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> key)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// delete from the right subtree</span><br>    <span class="hljs-keyword">if</span> (key &gt; root.val) root.right = deleteNode(root.right, key);<br>    <span class="hljs-comment">// delete from the left subtree</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key &lt; root.val) root.left = deleteNode(root.left, key);<br>    <span class="hljs-comment">// delete the current node</span><br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// the node is a leaf</span><br>      <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) root = <span class="hljs-literal">null</span>;<br>      <span class="hljs-comment">// the node is not a leaf and has a right child</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>        root.val = successor(root);<br>        root.right = deleteNode(root.right, root.val);<br>      &#125;<br>      <span class="hljs-comment">// the node is not a leaf, has no right child, and has a left child    </span><br>      <span class="hljs-keyword">else</span> &#123;<br>        root.val = predecessor(root);<br>        root.left = deleteNode(root.left, root.val);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> root;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉搜索树的范围和</title>
    <link href="/2024/05/27/LeetCode%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C/"/>
    <url>/2024/05/27/LeetCode%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E8%8C%83%E5%9B%B4%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><p>给定二叉搜索树的根结点 <code>root</code>，返回 <code>L</code> 和 <code>R</code>（含）之间的所有结点的值的和。</p><p>二叉搜索树保证具有唯一的值。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>我们对树进行深度优先搜索，对于当前节点 node，如果 <code>node.val</code> 小于等于 L，那么只需要继续搜索它的右子树；如果 <code>node.val</code> 大于等于 R，那么只需要继续搜索它的左子树；如果 <code>node.val</code> 在区间 (L, R) 中，则需要搜索它的所有子树。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> ans;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">rangeSumBST</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>        ans = <span class="hljs-number">0</span>;<br>        dfs(root, L, R);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode node, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (L &lt;= node.val &amp;&amp; node.val &lt;= R)<br>                ans += node.val;<br>            <span class="hljs-keyword">if</span> (L &lt; node.val)<br>                dfs(node.left, L, R);<br>            <span class="hljs-keyword">if</span> (node.val &lt; R)<br>                dfs(node.right, L, R);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>生产者消费者模式</title>
    <link href="/2024/05/27/%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%AD%A6%E4%BC%9A%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/05/27/%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%AD%A6%E4%BC%9A%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>﻿# </p><p>题目描述：</p><blockquote><p>采用Java 多线程技术，设计实现一个符合生产者和消费者问题的程序。</p><p>对一个对象（枪膛）进行操作，其最大容量是10颗子弹(特别注意，射击和上膛也都是需要时间的！！！！！)。</p><p>生产者线程是一个压入线程，它不断向枪膛中压入子弹；消费者线程是一个射出线程，它不断从枪膛中射出子弹。 </p></blockquote><p>注意，答案中的<code>Gun</code>(表示枪)，<code>ShoutTask</code>(表示射击线程的设计任务), <code>LoadTask</code>(表示上膛线程的上膛任务)，<code>Test</code>(测试类)分别定义在不同的<code>java</code>文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> *  表示枪</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Gun</span> &#123;<br><br>  <span class="hljs-comment">//枪膛中的子弹数</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> bullets;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">      消费者线程(射击线程)，调用该方法射击(消费子弹)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shouting</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (bullets &lt;= <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-comment">//如果枪中没有子弹，则不射击</span><br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">this</span>.wait();<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><br><br>      <span class="hljs-comment">//枪中有子弹，则射击</span><br>      System.out.println(Thread.currentThread().getName()<br>          + <span class="hljs-string">&quot;射出第&quot;</span> + bullets-- + <span class="hljs-string">&quot;发子弹&quot;</span>);<br><br>      <span class="hljs-comment">// 通知上膛线程，压入子弹</span><br>      <span class="hljs-built_in">this</span>.notifyAll();<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">      生产者线程调用该方法，上膛(压入子弹)</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">loading</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (bullets &gt;= <span class="hljs-number">10</span>) &#123;<br>      <span class="hljs-comment">//如果枪膛中的子弹是满的，则不上膛</span><br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">this</span>.wait();<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">//如果枪膛不满，则压入子弹</span><br>      System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;压入第&quot;</span> + ++bullets + <span class="hljs-string">&quot;发子弹&quot;</span>);<br>      <span class="hljs-comment">//模拟射击过程的时间延迟</span><br>      <span class="hljs-built_in">this</span>.notifyAll();<br>    &#125;<br>  &#125;<br><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 生产者线程，不停的压入子弹</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoadTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>  <span class="hljs-keyword">private</span> Gun gun;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoadTask</span><span class="hljs-params">(Gun gun)</span> &#123;<br>    <span class="hljs-built_in">this</span>.gun = gun;<br>  &#125;<br><br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br>      <span class="hljs-comment">//模拟每次上膛过程的延迟</span><br>      <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">50</span>);<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>      gun.loading();<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 消费者线程执行的射击代码, 不停的射击</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShoutTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>  <span class="hljs-keyword">private</span> Gun gun;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">ShoutTask</span><span class="hljs-params">(Gun gun)</span> &#123;<br>    <span class="hljs-built_in">this</span>.gun = gun;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br>      <span class="hljs-comment">//模拟每次射击过程的延迟</span><br>      <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-number">50</span>);<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>      gun.shouting();<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 测试代码</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-comment">//射击线程和上膛线程操作的同一把枪</span><br>    <span class="hljs-type">Gun</span> <span class="hljs-variable">gun</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gun</span>();<br><br>    <span class="hljs-type">LoadTask</span> <span class="hljs-variable">loadTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadTask</span>(gun);<br>    <span class="hljs-type">ShoutTask</span> <span class="hljs-variable">shoutTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShoutTask</span>(gun);<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(loadTask).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(shoutTask).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(loadTask).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(shoutTask).start();<br><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MyHashMap</title>
    <link href="/2024/05/27/%E6%89%8B%E5%86%99%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8BMyHashMap/"/>
    <url>/2024/05/27/%E6%89%8B%E5%86%99%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8BMyHashMap/</url>
    
    <content type="html"><![CDATA[<p>﻿# MyHashMap</p><blockquote><p>通过一个简单的例子来理解HashMap源码实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cskaoyan.hashmap;<br><br>数组 + 链表<br><span class="hljs-keyword">import</span> java.util.LinkedHashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">API:</span><br><span class="hljs-comment">    void put(K key, V value)//添加键值对</span><br><span class="hljs-comment">    V get(K key)//获取键所对应的值</span><br><span class="hljs-comment">    void delete(K key)//删除key</span><br><span class="hljs-comment">    boolean contains(K key) //判断是否包含key</span><br><span class="hljs-comment">    void clear() //清空map</span><br><span class="hljs-comment">    boolean isEmpty() //判断是否为空</span><br><span class="hljs-comment">    int size() //map大小</span><br><span class="hljs-comment">    Set&lt;K&gt; keys() //返回所有key的集合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHashMap</span>&lt;K, V&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<span class="hljs-comment">//默认容量  0 100000000000000  2的30吃饭</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<span class="hljs-comment">//最大容量，取2的次幂效率高(复习位运算)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75</span>;<span class="hljs-comment">//经验指数，没有为什么。大数据试验</span><br>    <br>    <span class="hljs-comment">// 字段</span><br>    <span class="hljs-keyword">private</span> Entry&lt;K, V&gt;[] table;<br>    <span class="hljs-comment">//创建一个节点数组，含义是 table数组里每个位置的对象是entry节点，每个entry节点里有键值对和hash值，还有一个后驱节点。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size; <span class="hljs-comment">//大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> loadFactor; <span class="hljs-comment">//装填因子，默认为0.75</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> threshold; <span class="hljs-comment">// 阈值，达到阈值就要开始扩容</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *如何理解这个Entry? </span><br><span class="hljs-comment">    *1.了解HashMap构造，HashMap底层是数组加向链表。数组支持随机访问，故HashMap查找数组位置为*0(1),然后再到链表上去差找为0(1)   常量级。  </span><br><span class="hljs-comment">    *2.hash值是通过hash算法计算出的随机数，具有高度保密性。（撞库攻击）</span><br><span class="hljs-comment">    *3.构造方法里的this是调用其他构造方法的意思。</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K, V&gt; &#123;<br>        K key;<br>        V val;<br>        <span class="hljs-type">int</span> hash;<br>        Entry&lt;K, V&gt; next;<br><br>        Entry(K key, V val, <span class="hljs-type">int</span> hash) &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.val = val;<br>            <span class="hljs-built_in">this</span>.hash = hash;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> key + <span class="hljs-string">&quot;=&quot;</span> + val;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHashMap</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">double</span> loadFactor)</span> &#123;<br>        <span class="hljs-comment">// initialCapacity: 大概存储键值对的个数</span><br>        <span class="hljs-keyword">if</span> (initialCapacity &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;initialCapacity=&quot;</span> + initialCapacity);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;loadFactor=&quot;</span> + loadFactor);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.loadFactor = loadFactor;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cap</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (initialCapacity / loadFactor);<br>        <span class="hljs-comment">// 计算大于等于n的最小2的次幂</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> tableLength(cap);<br>        table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[n];<br>        threshold = (<span class="hljs-type">int</span>) (table.length * loadFactor);<span class="hljs-comment">//阈值等于容量乘以装载因子</span><br>    &#125;<br><br>    <span class="hljs-comment">// 计算大于cap的最小的2^n (见文件：计算大于cap的最小的2的次幂)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableLength</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cap &gt;= MAX_CAPACITY) <span class="hljs-keyword">return</span> MAX_CAPACITY;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> cap - <span class="hljs-number">1</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">return</span> n + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加键值对，如果key存在，就更新它对应的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果key不存在, 返回null, 如果key存在，返回原来的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || value == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Key or value can not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>        <span class="hljs-comment">// 遍历链表</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e = table[idx]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (hash == e.hash &amp;&amp; ((key == e.key) || key.equals(e.key))) &#123;<br>                <span class="hljs-comment">// key存在</span><br>                <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.val;<br>                e.val = value;<br>                <span class="hljs-keyword">return</span> oldValue;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// key不存在, 在头结点添加键值对。</span><br>        addEntry(key, value, hash, idx);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEntry</span><span class="hljs-params">(K key, V value, <span class="hljs-type">int</span> hash, <span class="hljs-type">int</span> idx)</span> &#123;<br>        <span class="hljs-comment">// 判断是否需要进行扩容</span><br>        <span class="hljs-keyword">if</span> (size == threshold) &#123;<br>            <span class="hljs-keyword">if</span> (table.length == MAX_CAPACITY) &#123;<br>                <span class="hljs-comment">// 也可以抛出异常</span><br>                threshold = Integer.MAX_VALUE;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                grow(table.length &lt;&lt; <span class="hljs-number">1</span>); <span class="hljs-comment">//两倍扩容</span><br>                idx = indexFor(hash, table.length);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 添加键值对</span><br>        Entry&lt;K, V&gt; entryToAdd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(key, value, hash);<br>        entryToAdd.next = table[idx];<span class="hljs-comment">//头插   </span><br>        table[idx] = entryToAdd;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> newCapacity)</span> &#123;<br>        Entry&lt;K, V&gt;[] newTable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[newCapacity];<br>        <span class="hljs-comment">//遍历table头插到新数组</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e : table) &#123;<br>            <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>) &#123;<br>                Entry&lt;K, V&gt; next = e.next;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(e.hash, newCapacity);<br>                e.next = newTable[idx];<br>                newTable[idx] = e;<br>                e = next;<br>            &#125;<br>        &#125;<br>        table = newTable;<span class="hljs-comment">//吧新数组的地址赋值给table</span><br>        threshold = (<span class="hljs-type">int</span>) (table.length * loadFactor);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> key.hashCode();<br>        <span class="hljs-keyword">return</span> (h &gt;&gt; <span class="hljs-number">16</span>) ^ (h &lt;&lt; <span class="hljs-number">16</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexFor</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-keyword">return</span> hash &amp; (length - <span class="hljs-number">1</span>);(见附件<span class="hljs-number">2</span>)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key获取值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 指定的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对应的值, 如果key不存在返回null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Key cannot be null.&quot;</span>);<br>        &#125;   jdk可以存<span class="hljs-literal">null</span>   <span class="hljs-literal">null</span>建或者值  ？  可以同时吗？<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e = table[idx]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (hash == e.hash &amp;&amp; ((key == e.key) || (key.equals(e.key)))) &#123;<br>                <span class="hljs-keyword">return</span> e.val;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;？？？我就说JDK<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据指定的key, 删除键值对</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 指定的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> key对应的value, 如果key不存在返回null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">delete</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Key cannot be null.&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//定义一个前驱节点</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e = table[idx]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (hash == e.hash &amp;&amp; ((key == e.key) || (key.equals(e.key)))) &#123;<br>                <span class="hljs-type">V</span> <span class="hljs-variable">deleteValue</span> <span class="hljs-operator">=</span> e.val;<br>                <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) table[idx] = e.next; <span class="hljs-comment">// // 删除头结点</span><br>                <span class="hljs-keyword">else</span> prev.next = e.next;<br>                size--;<br>                <span class="hljs-keyword">return</span> deleteValue;<br>            &#125;<br>            prev = e;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断哈希表中是否包含指定的键</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 指定的键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果包含返回true, 否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Key cannot be null.&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e = table[idx]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (hash == e.hash &amp;&amp; ((key == e.key) || (key.equals(e.key)))) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">///foreach??? 我记得老师好像是这么说的，大问题</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; table.length; i++) &#123;<br>            table[i] = <span class="hljs-literal">null</span>;<br>        &#125;<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取哈希表中键的集合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 哈希表中键的集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Set&lt;K&gt; <span class="hljs-title function_">keys</span><span class="hljs-params">()</span> &#123;<br>        Set&lt;K&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e : table) &#123;<br>            <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>) &#123;<br>                set.add(e.key);<br>                e = e.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> set;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;&#123;&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e : table) &#123;<br>            <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>) &#123;<br>                sb.append(e).append(<span class="hljs-string">&quot;, &quot;</span>);<br>                e = e.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!isEmpty()) sb.delete(sb.length() - <span class="hljs-number">2</span>, sb.length());<br>        <span class="hljs-keyword">return</span> sb.append(<span class="hljs-string">&quot;&#125;&quot;</span>).toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        MyHashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">/*System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.size());</span><br><span class="hljs-comment">        System.out.println(map.isEmpty());*/</span><br><br>        map.put(<span class="hljs-string">&quot;王宝强&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;刘强东&quot;</span>, <span class="hljs-string">&quot;章泽天&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;文章&quot;</span>, <span class="hljs-string">&quot;马伊利&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;贾乃亮&quot;</span>, <span class="hljs-string">&quot;李小璐&quot;</span>);<br><br>       <span class="hljs-comment">/* System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.size());</span><br><span class="hljs-comment">        System.out.println(map.isEmpty());*/</span><br><br>        <span class="hljs-comment">/*System.out.println(map.put(&quot;谢霆锋&quot;, &quot;王菲&quot;));</span><br><span class="hljs-comment">        System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.put(&quot;谢霆锋&quot;, &quot;张柏芝&quot;));</span><br><span class="hljs-comment">        System.out.println(map);*/</span><br>        <span class="hljs-comment">// System.out.println(map.put(null, &quot;A&quot;));</span><br>        <span class="hljs-comment">// System.out.println(map.put(&quot;A&quot;, null));</span><br><br>        <span class="hljs-comment">// V get(K key)</span><br>        <span class="hljs-comment">// System.out.println(map.get(null));</span><br>        <span class="hljs-comment">/*System.out.println(map.get(&quot;刘强东&quot;));</span><br><span class="hljs-comment">        System.out.println(map.get(&quot;邓超&quot;));*/</span><br><br>        <span class="hljs-comment">// V delete(K key)</span><br>        <span class="hljs-comment">// System.out.println(map.delete(null));</span><br>        <span class="hljs-comment">/*System.out.println(map.delete(&quot;刘强东&quot;));</span><br><span class="hljs-comment">        System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.size());*/</span><br><br>        <span class="hljs-comment">/*System.out.println(map.delete(&quot;邓超&quot;));</span><br><span class="hljs-comment">        System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.size());*/</span><br><br>        <span class="hljs-comment">// contains(K key)</span><br>        <span class="hljs-comment">// System.out.println(map.contains(null));</span><br>        <span class="hljs-comment">/*System.out.println(map.contains(&quot;文章&quot;));</span><br><span class="hljs-comment">        System.out.println(map.contains(&quot;邓超&quot;));*/</span><br><br>        System.out.println(map.keys());<br>        map.clear();<br>        System.out.println(map.keys());<br>        System.out.println(map.size());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="附件1-计算大于cap的最小2的次幂"><a href="#附件1-计算大于cap的最小2的次幂" class="headerlink" title="附件1:计算大于cap的最小2的次幂"></a>附件1:计算大于cap的最小2的次幂</h3><blockquote><p>| (或运算)：只要有1 结果就是1，0 | 0 &#x3D; 0</p><p>&amp;( 与运算)：同时为1结果才为1，否则为0.</p><p>^(异或运算符) ：0^0 &#x3D;0, 0^1&#x3D;1,1^0&#x3D;1,1^1&#x3D;0   (相同为0 不同为1)</p><p>例如：cap &#x3D; 100 ,那么  n &#x3D; 99;转换为二进制为：0000 0000 0110 0011,执行第一步：n |&#x3D; n&gt;&gt;&gt;1,</p><p>先把n右移1位：0000 0000 0011 0001，然后进行 | 运算。</p></blockquote><blockquote><p>0000 0000 0110 0011</p><p>0000 0000 0011 0001</p><p>0000 0000 0111 0011</p><p>然后执行第二步：</p><p>0000 0000 0111 0011</p><p>0000 0000 0001 1100</p><p>0000 0000 0111 1111</p><p>然后第三步：</p><p>0000 0000 0111 1111</p><p>0000 0000 0000 0111</p><p>0000 0000 0111 1111</p><p>循环下去：得到0000 0000 0111 1111 &#x3D; 127</p><p>127+1 &#x3D; 128；</p><p>所以 大于100的最小的2的次幂是 128</p></blockquote><h3 id="附件2：hash-length-1"><a href="#附件2：hash-length-1" class="headerlink" title="附件2：hash &amp; (length -1)"></a>附件2：<code>hash &amp; (length -1)</code></h3><blockquote><p>比如hash &#x3D;  100；length -1 &#x3D; 63;(只写低八位)</p><p>hash &#x3D;          0110 0100</p><p>length -1 &#x3D;   0011 1111</p><p>​                 &#x3D;   0010 0100  (36)</p><p>所以 hash 为 100的值 应该存在索引36处。</p></blockquote><h3 id="附件3：HashMap在并发场景中可能出现死循环"><a href="#附件3：HashMap在并发场景中可能出现死循环" class="headerlink" title="附件3：HashMap在并发场景中可能出现死循环"></a>附件3：<code>HashMap</code>在并发场景中可能出现死循环</h3><p>1</p><blockquote><p>0000 0000 0000 0111</p><p>0000 0000 0111 1111</p><p>循环下去：得到0000 0000 0111 1111 &#x3D; 127</p><p>127+1 &#x3D; 128；</p><p>所以 大于100的最小的2的次幂是 128</p></blockquote><h3 id="附件2：hash-length-1-1"><a href="#附件2：hash-length-1-1" class="headerlink" title="附件2：hash &amp; (length -1)"></a>附件2：<code>hash &amp; (length -1)</code></h3><blockquote><p>比如hash &#x3D;  100；length -1 &#x3D; 63;(只写低八位)</p><p>hash &#x3D;          0110 0100</p><p>length -1 &#x3D;   0011 1111</p><p>​                 &#x3D;   0010 0100  (36)</p><p>所以 hash 为 100的值 应该存在索引36处。</p></blockquote><h3 id="附件3：HashMap在并发场景中可能出现死循环-1"><a href="#附件3：HashMap在并发场景中可能出现死循环-1" class="headerlink" title="附件3：HashMap在并发场景中可能出现死循环"></a>附件3：<code>HashMap</code>在并发场景中可能出现死循环</h3><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ji8JKith-1585706032777)(C:\Users\86133\Desktop\markdown\王道笔记\HashMap在并发场景中可能会出现死循环.png)]</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库MySQL</title>
    <link href="/2024/05/27/%E6%95%B0%E6%8D%AE%E5%BA%93MySQL%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    <url>/2024/05/27/%E6%95%B0%E6%8D%AE%E5%BA%93MySQL%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/</url>
    
    <content type="html"><![CDATA[<p>﻿# 数据库MySQL</p><h2 id="一、数据库基础"><a href="#一、数据库基础" class="headerlink" title="一、数据库基础"></a>一、数据库基础</h2><ul><li><p>用管理员身份运行CMD，输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -h -u root -p<br>/*-h(主机名)<br>-u(用户名)<br>-p(密码)<br>*/<br></code></pre></td></tr></table></figure></li></ul><p>即可以连接成功。</p><ul><li><p>查看全部数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE IF NOT EXISTS test_db;<br>#[IF NOT EXISTS ]:表示如果存在则不报错，不存在就创建数据库。<br>create database if not exists mydb2 character set gbk;<br>#创建一个gbk字符集的数据库<br>create database mydb3 character set gbk collate gbk_bin;<br>#创建一个gbk数据库，gbk校验字符集<br></code></pre></td></tr></table></figure></li><li><p>显示数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure></li><li><p>显示数据库创建语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create databases db_name;<br></code></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop databases [if exists] db_name; <br></code></pre></td></tr></table></figure></li><li><p>修改数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 5.把mydb2的字符集修改为utf8;<br>alter database mydb2 character set utf8 collate utf8_bin;<br></code></pre></td></tr></table></figure></li><li><p>进入数据库和创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#进入数据库<br>use db_name;<br>#创建表，三个int字段<br>create table t_a(<br>a int,<br>    b int,<br>    c int<br>)character set utf8 collate utf8_bin;<br></code></pre></td></tr></table></figure></li><li><p>查看数据库中所有表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看当前数据库中所有表<br>show tables; <br>#查看指定数据库中所有表<br>show tables in db_name;<br></code></pre></td></tr></table></figure></li><li><p>数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">######################################## 数据类型 #####################################<br># 整数 tinyint(1字节), smallint(2字节), mediumint(3字节), int(4字节), bigint(8字节)<br># 小数 float(M,D)(4字节), double(M,D)(8字节), decimal(M,D)(M+2字节)<br>#其中，M称为精度，表示总共的位数；D称为标度，表示小数的位数。<br>#DECIMAL 类型不同于 FLOAT &amp; DOUBLE，DECIMAL 实际是以字符串存放的，它的存储空间并不固定，而是由精度 M 决定的。<br># 时间 year, time, date, datetime, timestamp<br>#datetime系统默认值是null，而timestamp的系统默认值是当前时间now。<br>#datetime存储时间与时区无关，而timestamp与时区有关。<br></code></pre></td></tr></table></figure></li><li><p>字符串类型</p><table><thead><tr><th align="center">类型名称</th><th align="center">占用字节</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">char(M)</td><td align="center">M, 1 &lt;&#x3D; M &lt;&#x3D; 255</td><td align="center">固定长度字符串</td></tr><tr><td align="center">varchar(M)</td><td align="center">L+1, L &lt;&#x3D;M, 1 &lt;&#x3D;M &lt;&#x3D;255</td><td align="center">变长字符串</td></tr><tr><td align="center">TINYTEXT</td><td align="center">L+1, L &lt; 2^8</td><td align="center">非常小的文本字符串</td></tr><tr><td align="center">TEXT</td><td align="center">L+2, L &lt; 2^16</td><td align="center">小的文本字符串</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="center">L+3, L &lt; 2^24</td><td align="center">中等大小的文本字符串</td></tr><tr><td align="center">LONGTEXT</td><td align="center">L+4, L &lt; 2^32</td><td align="center">大的文本字符串</td></tr><tr><td align="center">ENUM</td><td align="center">1 或者 2个字节，取决于枚举的数目，最大 65535个</td><td align="center">枚举类型</td></tr><tr><td align="center">SET</td><td align="center">1,2,3,4或8个字节</td><td align="center">集合类型</td></tr></tbody></table></li><li><p>二进制类型</p><table><thead><tr><th align="center"><strong>类型名称</strong></th><th align="center"><strong>占用字节</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">BIT(M)</td><td align="center">[(m+7)&#x2F;8]</td><td align="center">位字节类型</td></tr><tr><td align="center">BINARY(M)</td><td align="center">M</td><td align="center">固定长度的二进制数据</td></tr><tr><td align="center">VARBINARY(M)</td><td align="center">L+1</td><td align="center">可变长度的二进制数据</td></tr><tr><td align="center">TINYBLOB(M)</td><td align="center">L+1,  L &lt; 2^8</td><td align="center">非常小的  BLOB</td></tr><tr><td align="center">BLOB(M)</td><td align="center">L+2,  L &lt; 2^16</td><td align="center">小的  BLOB</td></tr><tr><td align="center">MEDIUMBLOB(M)</td><td align="center">L+3,  L &lt; 2^24</td><td align="center">中等大小的BLOB</td></tr><tr><td align="center">LONGBLOB(M)</td><td align="center">L+4,  L  &lt;  2^32</td><td align="center">非常大的BLOB</td></tr></tbody></table></li><li><p>添加时间表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table t_time (<br>t1 datetime,<br>    t2 timestamp<br>);<br><br>insert into t_time (t1) values (now());<br>insert into t_time (t2) values (now());<br>select * from t_time;<br><br>set time_zone=&#x27;+10:00&#x27;; <br>select * from t_time;<br>set time_zone=&#x27;+8:00&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>枚举类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table t_enum (<br>gender enum(&#x27;female&#x27;, &#x27;male&#x27;),<br>    sex enum(&#x27;f&#x27;, &#x27;m&#x27;) not null<br>);<br><br>insert into t_enum(gender) values(&#x27;female&#x27;);<br># insert into t_enum(gender) values(&#x27;unkonw&#x27;);<br># insert into t_enum(gender) values(&#x27;female,male&#x27;);<br>insert into t_enum (sex) values(&#x27;f&#x27;);<br><br>select * from t_enum;<br></code></pre></td></tr></table></figure></li><li><p>集合类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table t_set(<br>&#x27;score&#x27; set(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;)<br>);<br>#添加null<br>insert into t_set values(null);<br>#添加a<br>insert into t_set values(&#x27;a&#x27;);<br>#添加ab<br>insert into t_set values(&#x27;a&#x27;,&#x27;b&#x27;);<br>#添加abc,,,无论添加顺序如何，结果都是abc<br>insert into t_set values(&#x27;a&#x27;,&#x27;c&#x27;,&#x27;b&#x27;); <br></code></pre></td></tr></table></figure></li><li><p>创建员工表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table t_employees (<br>id int,<br>    name varchar(20),<br>    gender enum(&#x27;female&#x27;, &#x27;male&#x27;),<br>    birthday date,<br>    entry_date date,<br>    job varchar(20),<br>    salary decimal(10, 2),<br>    `resume` blob<br>);<br># 查看表的结构<br>describe t_employees;<br>desc  t_employees;<br># 修改<br># 添加一列,uid,int类型<br>alter table t_employees add column uid int;<br>#在gender之后添加一个sex枚举<br>alter table t_employees add column sex enum(&#x27;female&#x27;,&#x27;male&#x27;) after gender;<br>#在第一列添加idcard varchar<br>alter table t_employees add column idcard varchar(20) first;<br>#把 resume修改为 varchar（50） 类型<br>alter table t_employees modify column &#x27;resume&#x27; varchar(50);<br>#把name列修改为username varchar（50）<br>alter table t_employees change column name username varchar(50);<br>#删除列<br>alter table t_employees drop id_card,drop uid,drop sex;<br>#修改表的名称<br>rename table t_employees to employees;<br>#移动表到另外一个数据库<br>rename table employees to mydb_2.t_employees;<br>#删除表<br>drop table t_a;<br>drop table  if exists t_a;<br>#复制表结构，不复制数据<br>create table employees like mydb_2.t_employees;<br>#复制表结构和数据<br>create table t_employees(select * from mydb2.t_employees);<br>################################DML#############################################<br>#插入数据<br>insert into employees values (1,&#x27;lishuai&#x27;,&#x27;male&#x27;,&#x27;1996-4-21&#x27;,&#x27;1996-4-21&#x27;,<br>                              &#x27;master&#x27;,10000,null);<br>insert into employees (id, username, gender) values (2, &#x27;zhangshuai&#x27;, &#x27;male&#x27;);<br>insert into employees (id,username,gender) values (2, &#x27;zhangshuai&#x27;, &#x27;male&#x27;),(3, &#x27;zhangshuai&#x27;, &#x27;male&#x27;);<br>#修改<br>#将所有员工的薪资改为5000<br>update employees set salary=5000;<br># 将姓名为&#x27;dashuai&#x27;的员工薪水修改为3000<br>update employees set salary=3000 where username=&#x27;dashuai&#x27;;<br>#删除<br>delete from employees where username=&#x27;dashuai&#x27;;<br>delete from employees;<br></code></pre></td></tr></table></figure></li><li><p>数据库的备份与导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1.#登录mysql进入数据库，source 文件路径<br>2.#cmd, mysql -u root -p dbname&lt;heros.sql<br>##########备份###############<br>#mysqldump -u root -p db_name &gt; honor_of_kings_backup.sql<br></code></pre></td></tr></table></figure></li><li><p>查询语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select version();<br>#时间和日期相关函数<br>select now();<br>select year(now());<br>select date(now());<br>#和字符串相关的函数<br>select concat (&#x27;_&#x27;,trim(&#x27; ab cd &#x27;),&#x27;_&#x27;);<br>select length(&#x27;ab中国&#x27;);<br>#查询单列<br>select name from heros;<br># 3. 查看多列, 查看所有英雄名字, 最大生命值, 最大法力值, 主要角色定位<br>select name,max_hp,max_mp,role_main from heros;<br>#4. 查看所有列， 查看所有英雄的所有字段 (最好不要在生产环境中使用)<br>select * from heros;<br># 5. 通过where子句过滤记录, (在MySQL中0表示false, 非0表示true)<br>select * from heros where 0;<br>################################# 运算符 ################################<br># 查找name=&#x27;花木兰&#x27;的数据<br>select * from heros where name = &#x27;花木兰&#x27;;<br>select * from heros where name &lt;=&gt; &#x27;花木兰&#x27;;#安全等于<br># 查看所有没有辅助角色定义的英雄名字<br>select name,role_assist from heros where role_assist = null;<br>select name,role_assist from heros where role_assist &lt;&gt;null;<br>select name,role_assist from heros where role_assist  is null;<br># 查看所有有辅助角色定位的英雄名字<br>select name from heros where role_assist is not null;<br>select name from heros where role_assist &lt;&gt; null;<br>## 查看最大生命值在[7350, 8341]范围内的所有英雄, between and<br>select * from heros where max_hp between 7350 and 8341;<br># 查看主要角色定位为战士和坦克的英雄, in<br>select * from heros where role_main in (&#x27;战士&#x27;,&#x27;坦克&#x27;);<br># 查看主要角色定位不为辅助和法师的英雄, not in<br>select name ,role_main from heros where role_main not in(&#x27;辅助&#x27;,&#x27;法师&#x27;);<br># 模糊查询, Like一般是与一些通配符一起使用, 在MySQL中&#x27;_&#x27;表示匹配一个字符, &#x27;%&#x27;表示匹配任意个字符。<br># 在不同的DBMS中, 通配符可能不一样. <br># 查询名字中包含&#x27;太&#x27;的英雄。<br>select name from hreos where name like &#x27;%太%&#x27;;<br># 查询名字中除第一个字符外包含&#x27;太&#x27;字的英雄 <br>select name from heros where name like &#x27;%_太%&#x27;;<br># 查询heros有哪些主要角色定位<br>select role_main from heros;<br>select distinct role_main from heros;<br># 注意事项：<br># 1. 对所有的字段进行去重, 所有字段都相同, 才是相同的记录。<br># 2. disctinct 必须位于所有查询字段的前面<br><br># 在MySQL里面, 我们可以通过 limit 关键字限制数量。不同的DBMS, 限制结果集的关键字可能是不一样的。<br># 查看前三条记录<br>select * from heros limit 3 offset 0;<br>select * from heros limit 3;<br># 查看[6, 10]之间的记录<br>select * from heros limit 5 offset 5;<br># 分页查询, [rows, pageNum] = [8, 3]<br>select * from heros limit 8 offset 16;<br># 根据最大生命值从低到高进行排序<br>select name,hp_max from heros order by hp_max asc;<br># 先根据最大生命值从高到低排序，然后在根据最大法力值从低到高排序。<br>select name,hp_max ,mp_max from heros order by hp_max desc,mp_max asc;<br># 查看最大英雄的最大生命值和最大法力值之和<br>select name,(hp_max + mp_max) as hmp from heros order by hmp desc; <br></code></pre></td></tr></table></figure></li><li><p>聚合函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 聚合函数，统计的是列，不是行。(统计行用计算字段)<br># 注意事项：<br>## 1) 聚合函数往往是搭配分组使用的, 如果没有分组，那么统计的就是整张表的数据。<br>## 2) 如果分组了, 那么统计的就是每一组的数据。<br># count()<br>select count(*) from heros; # 69<br>select count(role_assist) from heros; # 不会统计null行<br><br># sum()<br>select sum(hp_max) from heros; # 不会统计null行<br>select sum(name) from heros; <br>select null + 0; # null<br><br># avg()<br>select avg(hp_max) from heros; # 不会统计null行<br>select avg(name) from heros; # <br><br># max()<br>select max(hp_max) from heros; # 不会统计null行<br>select max(name) from heros; <br><br># min()<br>select min(hp_max) from heros; # 不会统计null行<br>select min(name) from heros;<br></code></pre></td></tr></table></figure></li><li><p>分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 分组 group by<br># 注意事项：虽然DBMS实现的时候，往往会对分组进行排序。但是如果没有明确的order by子句<br># 我们就不应该认为结果是有序的。<br><br>select role_main from heros group by role_main;<br># select name, role_main from heros group by role_main;<br>select group_concat(name), role_main from heros group by role_main;<br><br># 1) 搭配聚合函数使用<br>select count(*), role_main from heros group by role_main;<br># 2) 对多字段进行分组<br>select role_main, attack_range from heros group by role_main, attack_range;<br><br>select role_main, attack_range from heros group by role_main, attack_range having count(*) &gt; 5;<br><br># where和having都可以过滤, 那它们之间的区别是什么？<br></code></pre></td></tr></table></figure></li><li><p>约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1. 实体完整性 <br># primary key, 独一无二的标识。要求不能为null, 不能重复。一张表最多只有一个主键。<br>create table t_student (<br>id int primary key,<br>    name varchar(20),<br>    chinese int,<br>    math int,<br>    english int<br>);<br>drop table t_student;<br><br>create table t_student (<br>id int,<br>    name varchar(20),<br>    chinese int,<br>    math int,<br>    english int,<br>    primary key(id)<br>);<br>show index in t_student;<br># priamry key 可以是多个字段<br>create table xuanke(<br>sid int,<br>    cid int,<br>    primary key(sid, cid)<br>);<br>show index from xuanke;<br><br># 创建表之后，再指定主键。(不推荐！)<br>drop table xuanke;<br>create table xuanke(<br>sid int,<br>    cid int<br>);<br>show index from xuanke;<br>alter table xuanke add primary key(sid, cid);<br>show index from xuanke;<br><br>## auto_increment 往往是和 primary key 一起使用。<br>## 1) auto_increment 只能作用于primary key或者是 unique.<br>## 2) auto_increment 只能作用于数值字段。<br>## 3) 一张表只能有一个自增长字段。<br><br>show tables;<br>drop table t_student;<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20),<br>    chinese int,<br>    math int,<br>    english int<br>);<br><br>insert into t_student values (null, &#x27;刘亦菲&#x27;, 100, 100, 100), (null, &#x27;迪丽热巴&#x27;, 80, 80, 80);<br>select * from t_student;<br><br>drop table t_student;<br>create table t_student (<br>id int unique auto_increment,<br>    name varchar(20),<br>    chinese int unique auto_increment,<br>    math int,<br>    english int<br>);<br><br>#2. 域(field)的完整性<br>#2.1 not null<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int<br>);<br>insert into t_student values (null, null, 100, 100, 100);<br>insert into t_student values (null, &#x27;Thomas_He&#x27;, 100, 100, 100);<br><br>#2.2 unique <br>#注意事项：null可以有多条。<br>create table t_unique(<br>a int unique<br>);<br>insert into t_unique values (1);<br># insert into t_unique values (1);<br>insert into t_unique values (null);<br>insert into t_unique values (null);<br>select * from t_unique;<br>select count(*) from t_unique;<br><br>#2.3 default 默认值<br>create table t_default(<br>a int default 100,<br>    b int<br>);<br><br>insert into t_default(a) values(50);<br>insert into t_default(b) values(50);<br>select * from t_default;<br><br>#2.4 check, 自定义约束. MySQL没有实现这个功能，Oracle实现了。<br>create table t_check(<br>height float(3, 2) check(height between 0.00 and 3.00)<br>);<br>insert into t_check values (1.89);<br>insert into t_check values (3.11);<br>select * from t_check;<br><br># 3. 参照性约束 foreign key(外键)<br>show tables;<br>drop table t_student;<br>drop table xuanke;<br><br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int,<br>    cid int <br>);<br><br>create table t_class(<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    teacher varchar(20) not null<br>);<br><br>insert into t_class values (null, &#x27;一班&#x27;, &#x27;张三&#x27;),(null, &#x27;二班&#x27;, &#x27;李四&#x27;),(null, &#x27;三班&#x27;, &#x27;王五&#x27;);<br>insert into t_student values (null, &#x27;赵六&#x27;, 100, 100, 100, 100);<br>select * from t_class;<br>select * from t_student;<br><br># 创建外键<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int,<br>    cid int,<br>    foreign key(cid) references t_class(id)<br>);<br><br>show index in t_student;<br>drop table t_student;<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int,<br>    cid int,<br>    constraint fk_cid foreign key(cid) references t_class(id)<br>);<br>show index in t_student;<br>drop table t_student;<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int,<br>    cid int<br>);<br>alter table t_student add constraint fk_cid foreign key(cid) references t_class(id);<br><br># insert into t_student values (null, &#x27;赵六&#x27;, 100, 100, 100, 100);<br>insert into t_student values (null, &#x27;赵六&#x27;, 100, 100, 100, 1);<br>select * from t_student;<br><br>select * from t_class;<br>insert into t_student values (null, &#x27;刘亦菲&#x27;, 100, 100, 100, 1);<br>insert into t_student values (null, &#x27;王语嫣&#x27;, 100, 100, 100, 2);<br>insert into t_student values (null, &#x27;赵灵儿&#x27;, 100, 100, 100, 3);<br><br>## t_students 不能随意的添加和修改。<br># insert into t_student values (null, &#x27;白秀珠&#x27;, 100, 100, 100, 4);<br># update t_student set cid = 4 where name=&#x27;王语嫣&#x27;;<br><br>## t_class 不能随意删除和修改。<br># delete from t_class where id = 1;<br>insert into t_class values (null, &#x27;四班&#x27;, &#x27;Thomas_He&#x27;);<br>delete from t_class where id = 4;<br># update t_class set id=4 where id = 1;<br><br>## 级联删除<br>drop table t_student;<br>drop table t_class;<br>create table t_class(<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    teacher varchar(20) not null<br>);<br>insert into t_class values (null, &#x27;一班&#x27;, &#x27;张三&#x27;),(null, &#x27;二班&#x27;, &#x27;李四&#x27;),(null, &#x27;三班&#x27;, &#x27;王五&#x27;);<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int,<br>    cid int,<br>    constraint fk_cid foreign key(cid) references t_class(id) on delete cascade<br>);<br>insert into t_student values (null, &#x27;刘亦菲&#x27;, 100, 100, 100, 1);<br>insert into t_student values (null, &#x27;王语嫣&#x27;, 100, 100, 100, 2);<br>insert into t_student values (null, &#x27;赵灵儿&#x27;, 100, 100, 100, 3);<br><br>select * from t_class;<br>select * from t_student;<br><br>delete from t_class where id = 1;<br><br>## 级联置空<br>drop table t_student;<br>drop table t_class;<br>create table t_class(<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    teacher varchar(20) not null<br>);<br>insert into t_class values (null, &#x27;一班&#x27;, &#x27;张三&#x27;),(null, &#x27;二班&#x27;, &#x27;李四&#x27;),(null, &#x27;三班&#x27;, &#x27;王五&#x27;);<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int,<br>    cid int,<br>    constraint fk_cid foreign key(cid) references t_class(id) on delete set null<br>);<br>insert into t_student values (null, &#x27;刘亦菲&#x27;, 100, 100, 100, 1);<br>insert into t_student values (null, &#x27;王语嫣&#x27;, 100, 100, 100, 2);<br>insert into t_student values (null, &#x27;赵灵儿&#x27;, 100, 100, 100, 3);<br><br>select * from t_class;<br>select * from t_student;<br><br>delete from t_class where id = 1;<br># 注意事项: &lt;阿里巴巴开发者手册&gt; 不要在数据库中设置外键，一切的参照完整都应该在业务层中完成。<br># 外键缺点：<br># 1) 影响程序的性能<br># 2）在高并发的场景中容易引起死锁。<br># 3) 当数据量很多的时候，就需要分表。一旦分表，就不能保证参照完整性了。<br><br># 如果参照完整性都在业务中完成，也会导致一些问题。<br># 1) 业务和数据耦合了<br># 2) 增加了业务层的逻辑<br># 3）并不能够从数据库层面保证参照完整性。<br><br># 到底什么时候使用外键<br># 1) 正确性 &gt; 性能<br># 2）并发度不高<br># 3) 数据量不大<br></code></pre></td></tr></table></figure></li><li><p>子查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 子查询<br># a. 非关联子查询. 非关联子查询只需要查找一次。<br># b. 关联子查询。<br><br># 查询身高最高的球员有哪些？并且最高身高是多少？ player_id, player_name, height;<br># select player_id, player_name, height from player where height = max(height);<br><br># a. 非关联子查询<br>select player_id, player_name, height from player where height = (select max(height) from player);<br><br># b. 关联子查询<br># 查询每个球队中大于该球队平均身高的球员有哪些？ player_id, team_id, player_name, height;<br>select  player_id, team_id, player_name, height <br>from player AS a<br>where (height &gt; (select avg(height) from player AS b where b.team_id = a.team_id));<br><br># b.1 exists 子查询<br># 如果子查询结果集为空,exist返回false, 否则返回true;<br># 统计出过场的球员有哪些？player_id, player_name, team_id;<br>select player_id, player_name, team_id <br>from player<br>where exists (select * from player_score where player_score.player_id = player.player_id);<br># not exists: 如果子查询结果集为空,exist返回true, 否则返回false;<br># 统计没有出过场的球员有哪些？player_id, player_name, team_id;<br>select player_id, player_name, team_id <br>from player<br>where not exists (select player_id from player_score where player_score.player_id = player.player_id);<br><br># b.2 集合比较子查询<br># IN: 判断是否在集合中<br># 统计出过场的球员有哪些？player_id, player_name, team_id;<br>select player_id, player_name, team_id<br>from player<br>where player_id in (select distinct player_id from player_score);<br><br>select player_id, player_name, team_id<br>from player<br>where player_id in (select player_id from player_score where player_score.player_id = player.player_id);<br><br># 问题：哪一种性能比较好呢？<br>## SELECT * FROM A WHERE EXISTS (SELECT c FROM B WHERE B.c = A.c);<br>## SELECT * FROM A WHERE A.c IN (SELECT c FROM B)<br>## 1) 如果A表的数据比B表大, IN子查询效率比Exists要高。<br>## 2) 如果A表的数据比B表小, Exists子查询比IN子查询效率要高。<br><br># ANY (SOME) 一般和比较操作一起使用，与子查询集合的某个值比较<br># 找出所有比步行者中某一个球员身高要高的球员，并且不是步行者的球员。<br>select player_name, team_id, height from player<br>where height &gt; any(select distinct height from player where team_id = 1002) <br>and team_id != 1002;<br><br>select player_name, team_id, height from player<br>where height &gt; (select min(height) from player where team_id = 1002) <br>and team_id != 1002;<br><br># ALL 一般和比较操作一起使用，与子查询集合的所有值比较<br># 找出所有比步行者中所有球员身高要高的球员，并且不是步行者的球员。<br>select player_name, team_id, height from player<br>where height &gt; all(select distinct height from player where team_id = 1002) <br>and team_id != 1002;<br><br>select player_name, team_id, height from player<br>where height &gt; (select  max(height) from player where team_id = 1002) <br>and team_id != 1002;<br><br># 子查询作为计算字段<br># 查询每个球队的球员数<br>select team_id, team_name, (select count(*) from player where player.team_id = team.team_id) AS team_num from team;     <br><br></code></pre></td></tr></table></figure></li><li><p>连接查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># Cross Join<br>use nba;<br>select * from player;<br>select count(*) from player; # 37<br>select * from team;<br>select count(*) from team; # 3<br><br>select * from player cross join team; <br>select count(*) from player cross join team; # 111<br><br># 等值连接<br>## 自然连接 natural join<br>SELECT * FROM player NATURAL JOIN team;<br><br>## USING: 指定哪些相同的字段做等值判断。<br>SELECT * FROM player JOIN team USING(team_id);<br><br>## ON: 后面接连接的条件。<br>SELECT * FROM player JOIN team ON player.team_id = team.team_id;<br><br># 非等值连接<br># 我们想查询每个球员的身高级别<br>select * from player;<br>select * from height_grades;<br>select player_name, height, height_level from player join height_grades <br>on height between height_lowest and height_highest;<br><br># 外连接<br>create table t_boys (<br>id int primary key,<br>    name varchar(20) not null,<br>    gid int<br>);<br>insert into t_boys values (1, &#x27;Albert&#x27;, 1);<br>insert into t_boys values (2, &#x27;Ben&#x27;, 2);<br>insert into t_boys values (3, &#x27;Calvin&#x27;, 100);<br>insert into t_boys values (4, &#x27;David&#x27;, null);<br><br>create table t_girls (<br>id int primary key,<br>    name varchar(20) not null,<br>    bid int<br>);<br>insert into t_girls values (1, &#x27;Allen&#x27;, 1);<br>insert into t_girls values (2, &#x27;Beyonce&#x27;, 2);<br>insert into t_girls values (3, &#x27;Cindy&#x27;, 100);<br>insert into t_girls values (4, &#x27;Diana&#x27;, null);<br><br>## 左外连接 left [outer] join<br>## 查看所有男生的情况<br>select * from t_boys left join t_girls on t_boys.gid = t_girls.id;<br><br>## 右外连接 right [outer] join<br>## 查看所有女生的情况<br>select * from t_boys right join t_girls on t_girls.bid = t_boys.id;<br><br>## 全外连接 full [outer] join:  MySQL不支持全外连接。<br>## 查看boys and girls 的情况<br>select * from t_boys full join t_girls on t_girls.bid = t_boys.id;<br><br># 5. 自连接<br># 比如我们想要查看比布雷克-格里芬高的球员都有谁？<br>select * from player where player_name = &#x27;布雷克-格里芬&#x27;;<br># 子查询<br>select player_name, height from player <br>where height &gt; (select height from player where player_name = &#x27;布雷克-格里芬&#x27;);<br># 自连接<br>select a.player_name, a.height from player as a join player as b<br>on b.player_name = &#x27;布雷克-格里芬&#x27;<br>where a.height &gt; b.height;<br><br># 推荐使用自连接, DBMS会对自连接进行优化。<br><br># 联合查询<br>## 用左外连接和右外连接实现全外连接。<br>select * from t_boys left join t_girls on t_boys.gid = t_girls.id<br>union<br>select * from t_boys right join t_girls on t_girls.bid = t_boys.id;<br><br>## union all 不会去重。<br>select * from t_boys left join t_girls on t_boys.gid = t_girls.id<br>union all<br>select * from t_boys right join t_girls on t_girls.bid = t_boys.id;<br><br># 不同的DBMS在使用规范上会存在一些差异,并且对SQL标准的支持程度也不一样。<br># a. 不是所有的 DBMS 都支持全外连接。<br># b. Oracle 不能使用 AS 给表起别名。 player p;<br><br># 连接查询需要的注意事项：<br># a. 连接表的数量不能太多。<br># b. 不要忘记连接条件。<br># c. 自连接优于子查询<br></code></pre></td></tr></table></figure></li><li><p>事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select @@autocommit; # 默认等于1, <br># autocommit=1, 自动提交事务，会把每一条语句当成一条事务。<br>use nba;<br><br># 显示开启事务方式1, start transaction<br>start transaction;<br>insert into t_boys values (5, &#x27;Thomas_He&#x27;, null);<br>commit;<br><br># autocommit设置成0, 相当于开启了事务。<br><br>set @@autocommit=0;<br>insert into t_boys values (6, &#x27;Thomas_He&#x27;, null);<br>commit;<br><br><br>## rollback<br>start transaction;<br>use nba;<br>insert into t_boys values (7, &#x27;Thomas_He&#x27;, null);<br>rollback;<br>commit;<br><br>## rollback savepoint;<br>start transaction;<br>insert into t_boys values (7, &#x27;Thomas_He&#x27;, null);<br>savepoint sp1;<br>insert into t_boys values (8, &#x27;Thomas_He&#x27;, null);<br>rollback to sp1;<br>commit;<br><br>use nba;<br>show create table t_boys;<br>start transaction;<br>insert into t_boys values (8, &#x27;Thomas_He&#x27;, null);<br>insert into t_boys values (9, null, null);<br>insert into t_boys values (8, &#x27;Thomas_He&#x27;, null);<br>commit;<br><br>## 隔离级别<br>select @@tx_isolation; # 查询的会话的隔离级别。<br>select @@session.tx_isolation; # 查询的会话的隔离级别。<br>select @@global.tx_isolation; # 查询的全局的隔离级别。<br><br>set transaction isolation level read uncommitted; # 设置下一个事务的隔离级别。<br>set session transaction isolation level read uncommitted; # 设置会话的隔离级别。<br>set global transaction isolation level read uncommitted; # 设置全局的隔离级别。<br><br><br>select @@tx_isolation; ## RR<br>select @@global.tx_isolation; ## RR<br># global 隔离级别影响的是以后的会话，当前会话不会影响。<br>set global transaction isolation level repeatable read; <br>select @@tx_isolation; ## RR<br>select @@global.tx_isolation; ## RU<br><br># read uncommitted<br>set session transaction isolation level read uncommitted;<br>select @@tx_isolation;<br><br>use nba;<br>## 脏写(不存在)<br>start transaction;<br>select * from t_boys;<br>update t_boys set gid = gid + 100 where id = 1;<br>commit;<br><br>## 脏读(存在)<br>start transaction;<br>update t_boys set gid = gid + 100 where id = 1;<br>commit;<br><br># read committed<br>set session transaction isolation level read committed;<br>select @@tx_isolation;<br><br>## 脏写(不存在)<br>start transaction;<br>update t_boys set gid = gid + 100 where id = 1;<br>commit;<br><br>## 脏读(不存在)<br>start transaction;<br>update t_boys set gid = gid + 100 where id = 1;<br>commit;<br><br>## 不可重复读(存在)<br>## 幻读(存在)<br>start transaction;<br>insert into t_boys values (9, &#x27;Thomas_He&#x27;, null);<br>commit;<br><br># repeatable read<br>set session transaction isolation level repeatable read;<br>select @@tx_isolation;<br><br>## 脏写(不存在)<br>start transaction;<br>update t_boys set gid = gid + 100 where id = 1;<br>commit;<br><br>## 脏读(不存在)<br>start transaction;<br>update t_boys set gid = gid + 100 where id = 1;<br>commit;<br><br>## 不可重复读(不存在)<br>## 幻读<br>start transaction;<br>insert into t_boys values (10, &#x27;Thomas_He&#x27;, null);<br>commit;<br><br># 注意事项：MySQL的RR级别，在一定程度上避免幻读现象。<br><br># serialize <br><br>################################################ 练习 #####################################<br>create database stu_db;<br>use stu_db;<br>create table student(<br>sid varchar(10),<br>    sname varchar(10),<br>    sage datetime,<br>    sgender varchar(10)<br>);<br>insert into student values(&#x27;01&#x27; , &#x27;赵雷&#x27; , &#x27;1990-01-01&#x27; , &#x27;男&#x27;);<br>insert into student values(&#x27;02&#x27; , &#x27;钱电&#x27; , &#x27;1990-12-21&#x27; , &#x27;男&#x27;);<br>insert into student values(&#x27;03&#x27; , &#x27;孙风&#x27; , &#x27;1990-12-20&#x27; , &#x27;男&#x27;);<br>insert into student values(&#x27;04&#x27; , &#x27;李云&#x27; , &#x27;1990-12-06&#x27; , &#x27;男&#x27;);<br>insert into student values(&#x27;05&#x27; , &#x27;周梅&#x27; , &#x27;1991-12-01&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;06&#x27; , &#x27;吴兰&#x27; , &#x27;1992-01-01&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;07&#x27; , &#x27;郑竹&#x27; , &#x27;1989-01-01&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;09&#x27; , &#x27;张三&#x27; , &#x27;2017-12-20&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;10&#x27; , &#x27;李四&#x27; , &#x27;2017-12-25&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;11&#x27; , &#x27;李四&#x27; , &#x27;2012-06-06&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;12&#x27; , &#x27;赵六&#x27; , &#x27;2013-06-13&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;13&#x27; , &#x27;孙七&#x27; , &#x27;2014-06-01&#x27; , &#x27;女&#x27;);<br><br>create table course(<br>cid varchar(10),<br>    cname varchar(10),<br>    tid varchar(10)<br>);<br>insert into course values(&#x27;01&#x27; , &#x27;语文&#x27; , &#x27;02&#x27;);<br>insert into course values(&#x27;02&#x27; , &#x27;数学&#x27; , &#x27;01&#x27;);<br>insert into course values(&#x27;03&#x27; , &#x27;英语&#x27; , &#x27;03&#x27;);<br><br>create table teacher(<br>tid varchar(10),<br>    tname varchar(10)<br>);<br>insert into teacher values(&#x27;01&#x27; , &#x27;张三&#x27;);<br>insert into teacher values(&#x27;02&#x27; , &#x27;李四&#x27;);<br>insert into teacher values(&#x27;03&#x27; , &#x27;王五&#x27;);<br><br>create table sc(<br>sid varchar(10),<br>    cid varchar(10),<br>    score float(5,2)<br>);<br>insert into sc values(&#x27;01&#x27; , &#x27;01&#x27; , 80);<br>insert into sc values(&#x27;01&#x27; , &#x27;02&#x27; , 90);<br>insert into sc values(&#x27;01&#x27; , &#x27;03&#x27; , 99);<br>insert into sc values(&#x27;02&#x27; , &#x27;01&#x27; , 70);<br>insert into sc values(&#x27;02&#x27; , &#x27;02&#x27; , 60);<br>insert into sc values(&#x27;02&#x27; , &#x27;03&#x27; , 80);<br>insert into sc values(&#x27;03&#x27; , &#x27;01&#x27; , 80);<br>insert into sc values(&#x27;03&#x27; , &#x27;02&#x27; , 80);<br>insert into sc values(&#x27;03&#x27; , &#x27;03&#x27; , 80);<br>insert into sc values(&#x27;04&#x27; , &#x27;01&#x27; , 50);<br>insert into sc values(&#x27;04&#x27; , &#x27;02&#x27; , 30);<br>insert into sc values(&#x27;04&#x27; , &#x27;03&#x27; , 20);<br>insert into sc values(&#x27;05&#x27; , &#x27;01&#x27; , 76);<br>insert into sc values(&#x27;05&#x27; , &#x27;02&#x27; , 87);<br>insert into sc values(&#x27;06&#x27; , &#x27;01&#x27; , 31);<br>insert into sc values(&#x27;06&#x27; , &#x27;03&#x27; , 34);<br>insert into sc values(&#x27;07&#x27; , &#x27;02&#x27; , 89);<br>insert into sc values(&#x27;07&#x27; , &#x27;03&#x27; , 98);<br><br>select * from student;<br>select * from course;<br>select * from teacher;<br>select * from sc;<br><br># 查询「李」姓老师的数量<br>select count(*) from teacher where tname like &#x27;李%&#x27;;<br><br># 查询选修「张三」老师课的同学的信息<br># 1. 涉及到哪些表？teacher, course, sc, student<br># 2. 张三老师叫的课程<br>  select cid, cname, tname<br>      from teacher join course using(tid) where tname=&#x27;张三&#x27;;<br># 3. <br>select sid from teacher <br>join course using(tid)<br>join sc using(cid)<br>where tname=&#x27;张三&#x27;;<br><br># 4. <br>select * from student where sid in(<br>select sid from teacher <br>        join course using(tid)<br>join sc using(cid)<br>where tname=&#x27;张三&#x27;<br>    );<br>    <br># 2. 查询 &quot;01&quot; 课程比 &quot;02&quot; 课程成绩高的学生的信息及课程分数 <br># 涉及到哪些表？student, sc<br># 上01课程有哪些学生？(sid, score1)<br>   select sid, score as score1 from sc where cid = &#x27;01&#x27;;    <br># 上02课程有哪些学生？(sid, score2)<br>   select sid, score as score2 from sc where cid = &#x27;02&#x27;;<br># 同时上&#x27;01&#x27;课程和&#x27;02&#x27;课程的同学有哪些？(sid, score1, score2);<br>   select sid, score1, score2 <br>   from (select sid, score as score1 from sc where cid = &#x27;01&#x27;) as t1<br>   join (select sid, score as score2 from sc where cid = &#x27;02&#x27;) as t2<br>   using(sid);<br><br># 关联student<br>   select student.*, score1, score2 from student<br>   join (select sid, score as score1 from sc where cid = &#x27;01&#x27;) as t1 using(sid)<br>   join (select sid, score as score2 from sc where cid = &#x27;02&#x27;) as t2 using(sid)<br>   where score1 &gt; score2;<br>   <br># 3. 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩<br>  # 涉及那些表？ student, sc<br>  select sid, sname, avg(score) as avg_score from student join sc using(sid)<br>  group by sid having avg_score &gt;= 60;<br></code></pre></td></tr></table></figure></li></ul><h2 id="二、MySQL架构"><a href="#二、MySQL架构" class="headerlink" title="二、MySQL架构"></a>二、MySQL架构</h2><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ad1AO4Ny-1585737256383)(C:\Users\86133\Desktop\markdown\王道笔记\MySQL\图片1.png)]</p><p>MySQL分为server层和储存引擎层。</p><p>server层包括连接器，查询缓存，解析器，优化器和执行器涵盖了MySQL大多数核心服务功能。</p><p>存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持innoDB，MyISAM，Mermory等多个存储引擎。</p><p>Q：修改管理权限以后，可以立即生效吗？ A：不能，下一次生效。</p><p>Q：默认连接时长多少？A：28800s,8小时。</p><h2 id="三、MySQL是如何工作的？"><a href="#三、MySQL是如何工作的？" class="headerlink" title="三、MySQL是如何工作的？"></a>三、MySQL是如何工作的？</h2><ol><li><h6 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h6><p>当你在客户端输入 mysql –u $user –p $pwd 连接 mysql 的时候，接待你的就是连接器。连接器的作用就是和客户端建立连接、获取权限、维持和管理连接。</p></li><li><p>查询缓存</p><p>建立连接后，就可以执行select语句了。首先MySQL会去查看查询缓存，看下之前是否已经执行过这条查询语句。如果命中缓存，就直接返回。否则就扔给解析器。</p></li><li><p>解析器</p><p>MySQL需要知道你想做什么，因此我们就来到了解析器。解析器会做词法分析和语法分析。词法分析主要是分析每个词的含义，语法分析会判断你写的 SQL 语句是否满足 SQL 语法。</p></li><li><p>优化器</p><p>经过解析器，MySQL就知道你想做什么了。但是在开始执行之前，还需要经过优化器的处理。优化器会优化你的SQL语句。生成最终的执行方案 (execution plan)。然后进入执行器阶段。</p></li><li><p>执行器</p><p>执行器首先会判断你对这张表有没有相应的权限。如果没有，就报错。如果有，就调用相应的存储引擎接口，执行语句。然后将结果集返回给客户端。</p></li></ol><p>Q:为什么不使用查询缓存？</p><p>A：一条更新语句就可以清除查询缓存，辛辛苦苦建立起来的缓存容易被擦除掉。MySQL8以后直接取消了这个功能。默认关闭。只在不会更新的表里使用–（不建议使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看mysql支持哪些引擎<br>show engines;<br># 查看默认存储引擎<br>SHOW VARIABLES LIKE ‘%storage_engine%’;<br># 查看某张表的存储引擎<br>SELECT ENGINE FROM information_schema.TABLES<br>WHERE TABLE_SCHEMA=&#x27;$db&#x27;<br>AND TABLE_NAME=&#x27;$table&#x27;;<br></code></pre></td></tr></table></figure><h2 id="四、MyISAM"><a href="#四、MyISAM" class="headerlink" title="四、MyISAM"></a>四、MyISAM</h2><ol><li>特点：<ul><li>查询速度快</li><li>支持表锁</li><li>支持全文索引</li><li>不支持事务</li></ul></li><li>使用MyISAM储存表，会生成三个文件：<ul><li>frm   存储表结构，是任何存储引擎都有的。</li><li>mvd 存放数据</li><li>mvi 存放索引</li></ul></li><li>数据和索引分开存放，这样得索引叫非聚集索引。</li></ol><h2 id="五、Memory"><a href="#五、Memory" class="headerlink" title="五、Memory"></a>五、Memory</h2><ol><li>特点：<ul><li>所有数据都存放在内存中，因此数据库重启后会丢失</li><li>支持表锁</li><li>支持Hash和BTree索引</li><li>不支持Blob和Text字段</li></ul></li><li>Memory由于数据都放在内存中，以及支持Hash索引，它的查询速度是最快的。一般使用 Memory 存放临时表。临时表：在单个连接中可见，当连接断开时，临时表也将不复存在。</li></ol><h2 id="六、innoDB"><a href="#六、innoDB" class="headerlink" title="六、innoDB"></a>六、innoDB</h2><ol><li><p>MySQL 5.5 以及以后版本默认的存储引擎。没有特殊应用，Oracle官方推荐使用InnoDB引擎。</p></li><li><p>特点：</p><ul><li>支持事务</li><li>支持行锁    </li><li>支持MVCC</li><li>支持崩溃恢复</li><li>支持外键一致性约束</li></ul></li><li><p>使用 InnoDB 存储表，会生成两个文件.</p><p>.frm # 存储表结构，是任何存储引擎都有的</p><p>.ibd # 存放数据和索引</p><p>索引和数据存放在一起，这样的索引叫聚集索引。</p></li></ol><h2 id="七、磁盘IO原理"><a href="#七、磁盘IO原理" class="headerlink" title="七、磁盘IO原理"></a>七、磁盘IO原理</h2><blockquote><p>磁盘上的数据可以用一个三维地址标识: 柱面号, 盘号, 块号(磁道上的扇区)</p><p>读&#x2F;写数据的步骤：</p><ol><li>移动磁头到指定的柱面号，这个过程被称为定位或查找。</li></ol><p>​       由于是机械移动, 这部分耗时最高, 最大可达 0.1s.</p><ol start="2"><li><p>根据盘面号确定从哪个磁盘读取数据</p></li><li><p>盘组开始旋转，将指定的块号移动到读&#x2F;写头下</p></li></ol><p>​       磁盘旋转的速度很快, 一般为7200rpm。旋转一圈大约需要 0.0083s.</p><p>​    4. 读写数据</p><p>​       数据通过系统总线传送到内存。一般传输一个字节大概需要 0.02us.</p><p>​       读写 4KB 大约需要 80us.</p><p>磁盘读取数据是以盘块(block)为单位的, 一般为4KB。位于同一盘块的所有数据会被一次性全部读取出来。磁盘IO的代价主要花费在第 1 步。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-4xEvbCGC-1585737256385)(C:\Users\86133\Desktop\markdown\王道笔记\MySQL\图片2-1585475286999.jpg)]</p><p>结论：<em><strong>IO的速度是很慢很慢的，我们应该尽量少地读写磁盘！</strong></em></p><h2 id="八、innoDB数据页格式"><a href="#八、innoDB数据页格式" class="headerlink" title="八、innoDB数据页格式"></a>八、innoDB数据页格式</h2><blockquote><p>页是 InnoDB 磁盘管理的最小单位。在 InnoDB 存储引擎中, 页默认大小为16KB。</p><p>可以通过参数 innodb_page_size 将页的大小设置为 4K、8K 和 16K。</p><p>InnoDB 每次至少会将 1 个页的数据从磁盘读取到内存，每次至少也会将 1 个页的数据从内存写到磁盘。</p><p>在InnoDB存储引擎中，有很多种页类型。其中最重要的是数据页，也叫 B-tree Node。里面存储了索引和数据的信息。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ckAzRqlK-1585737256385)(C:\Users\86133\Desktop\markdown\王道笔记\MySQL\图片3-1585475286999.png)]</p><blockquote><p><strong>File Header</strong></p><p>​    主要存储表空间相关信息</p><p><strong>Page Header</strong></p><p>​    主要存储数据页的元信息</p><p><strong>Infimum + Supremum Records</strong></p><p>​    每个数据页中有两个虚拟行记录用来限定记录的边界，infimum record 是数据页上最小的记录，supremum record 是数据页上最大的记录。</p><p><strong>User Records</strong></p><p>​     用户数据，实际存储的行记录。</p><p><strong>Free Space</strong></p><p>​     空闲空间。</p><p><strong>Page Directory</strong></p><p>​     页目录，存放了记录的相对位置。</p><p><strong>File Trailer</strong></p><p>​     位于数据页的最后，用来检测页是否完整地写入磁盘。</p></blockquote><h2 id="九、索引"><a href="#九、索引" class="headerlink" title="九、索引"></a>九、索引</h2><ol><li><p>索引是什么</p><p>简单来说，索引的目的就是为了提高数据的查询效率，就像书的目录一样。</p><p>一本800页的书，如果想在书中查找某个知识点。在不借助目录的情况下，估计得找好一会儿。同样，对于数据库的表而言，索引就是它的 ”目录”。</p><p><strong>索引：</strong>在 MySQL 中也叫做键 (key)，是存储引擎用于快速找到记录的一种数据结构。</p></li><li><p>哪些数据结构可以作为索引？</p><ul><li>有序数组 </li><li>哈希表 </li><li>平衡二叉树</li><li>B树</li></ul></li></ol><p>​       数据通过系统总线传送到内存。一般传输一个字节大概需要 0.02us.</p><blockquote><p>​       读写 4KB 大约需要 80us.</p><p>磁盘读取数据是以盘块(block)为单位的, 一般为4KB。位于同一盘块的所有数据会被一次性全部读取出来。磁盘IO的代价主要花费在第 1 步。</p></blockquote><p>[外链图片转存中…(img-4xEvbCGC-1585737256385)]</p><p>结论：<em><strong>IO的速度是很慢很慢的，我们应该尽量少地读写磁盘！</strong></em></p><h2 id="八、innoDB数据页格式-1"><a href="#八、innoDB数据页格式-1" class="headerlink" title="八、innoDB数据页格式"></a>八、innoDB数据页格式</h2><blockquote><p>页是 InnoDB 磁盘管理的最小单位。在 InnoDB 存储引擎中, 页默认大小为16KB。</p><p>可以通过参数 innodb_page_size 将页的大小设置为 4K、8K 和 16K。</p><p>InnoDB 每次至少会将 1 个页的数据从磁盘读取到内存，每次至少也会将 1 个页的数据从内存写到磁盘。</p><p>在InnoDB存储引擎中，有很多种页类型。其中最重要的是数据页，也叫 B-tree Node。里面存储了索引和数据的信息。</p></blockquote><p>[外链图片转存中…(img-ckAzRqlK-1585737256385)]</p><blockquote><p><strong>File Header</strong></p><p>​    主要存储表空间相关信息</p><p><strong>Page Header</strong></p><p>​    主要存储数据页的元信息</p><p><strong>Infimum + Supremum Records</strong></p><p>​    每个数据页中有两个虚拟行记录用来限定记录的边界，infimum record 是数据页上最小的记录，supremum record 是数据页上最大的记录。</p><p><strong>User Records</strong></p><p>​     用户数据，实际存储的行记录。</p><p><strong>Free Space</strong></p><p>​     空闲空间。</p><p><strong>Page Directory</strong></p><p>​     页目录，存放了记录的相对位置。</p><p><strong>File Trailer</strong></p><p>​     位于数据页的最后，用来检测页是否完整地写入磁盘。</p></blockquote><h2 id="九、索引-1"><a href="#九、索引-1" class="headerlink" title="九、索引"></a>九、索引</h2><ol><li><p>索引是什么</p><p>简单来说，索引的目的就是为了提高数据的查询效率，就像书的目录一样。</p><p>一本800页的书，如果想在书中查找某个知识点。在不借助目录的情况下，估计得找好一会儿。同样，对于数据库的表而言，索引就是它的 ”目录”。</p><p><strong>索引：</strong>在 MySQL 中也叫做键 (key)，是存储引擎用于快速找到记录的一种数据结构。</p></li><li><p>哪些数据结构可以作为索引？</p><ul><li>有序数组 </li><li>哈希表 </li><li>平衡二叉树</li><li>B树</li><li>B+树</li></ul></li></ol><h1 id="未完待续——"><a href="#未完待续——" class="headerlink" title="未完待续——-"></a>未完待续——-</h1>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>累加树</title>
    <link href="/2024/05/27/%E7%B4%AF%E5%8A%A0%E6%A0%91/"/>
    <url>/2024/05/27/%E7%B4%AF%E5%8A%A0%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>﻿# 累加树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 给定一个二叉搜索树（Binary Search Tree），</span><br><span class="hljs-comment"> * 把它转换成为累加树（Greater Tree)，</span><br><span class="hljs-comment"> * 使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreaterTree</span>&#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>          <span class="hljs-type">int</span> val;<br>          TreeNode left;<br>          TreeNode right;<br>          TreeNode(<span class="hljs-type">int</span> x) &#123; val = x; &#125;<br>      &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思路：</span><br><span class="hljs-comment">     * 二叉搜索树中序遍历是递增的序列，那么反中序（右中左）的顺序就是降序序列</span><br><span class="hljs-comment">     * 那么只需要把前面的数依次加到节点处就是当前累加树节点的和</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> root</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">convertBST</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>          <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>          convertBST(root.right);<br>          sum += root.val;<br>          root.val = sum;<br>          convertBST(root.left);<br>          <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建个人博客</title>
    <link href="/2024/05/27/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/05/27/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Hexo搭建个人博客"><a href="#使用Hexo搭建个人博客" class="headerlink" title="使用Hexo搭建个人博客"></a>使用Hexo搭建个人博客</h1><ol><li>安装Node.js</li></ol><p>​去 <code>https://nodejs.org/en</code> 下载Node.js 安装一直next即可。 </p><p><img src="/img/node.png"></p><ol start="2"><li>安装git</li></ol><p>​去git官网<code>https://git-scm.com/</code>下载安装git即可。</p><p><img src="/img/git.png"></p><ol start="3"><li>安装hexo</li></ol><p> <code>npm install hexo</code> 执行命令在你创建的博客目录下。会创建成功一个博客目录如下：</p><p><img src="/img/hexo.png"></p><ol start="4"><li><p>配置Github</p><p>  到Github的设置页面获取到token。进行git的配置。</p></li></ol><p><img src="/img/github.png"></p><ol start="5"><li>创建githubio仓库</li></ol><p>​创建一个名字为固定格式的仓库<code>username.github.io</code> ， 其中<code>username</code>是你github的用户名。</p><ol start="6"><li>上传博客</li></ol><p>​      本地git push 博客文件夹到仓库中。</p><ol start="7"><li>打开展示</li></ol><p>当然以上是我更换过主题后的页面。原始页面会比较简单。具体操作可以Google。</p><p><img src="/img/res.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/05/hello-world/"/>
    <url>/2024/05/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
