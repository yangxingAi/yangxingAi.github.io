<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>累加树</title>
    <link href="/2024/05/27/%E7%B4%AF%E5%8A%A0%E6%A0%91/"/>
    <url>/2024/05/27/%E7%B4%AF%E5%8A%A0%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>﻿# 累加树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 给定一个二叉搜索树（Binary Search Tree），</span><br><span class="hljs-comment"> * 把它转换成为累加树（Greater Tree)，</span><br><span class="hljs-comment"> * 使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreaterTree</span>&#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>          <span class="hljs-type">int</span> val;<br>          TreeNode left;<br>          TreeNode right;<br>          TreeNode(<span class="hljs-type">int</span> x) &#123; val = x; &#125;<br>      &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思路：</span><br><span class="hljs-comment">     * 二叉搜索树中序遍历是递增的序列，那么反中序（右中左）的顺序就是降序序列</span><br><span class="hljs-comment">     * 那么只需要把前面的数依次加到节点处就是当前累加树节点的和</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> root</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">convertBST</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>          <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>          convertBST(root.right);<br>          sum += root.val;<br>          root.val = sum;<br>          convertBST(root.left);<br>          <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyHashMap</title>
    <link href="/2024/05/27/%E6%89%8B%E5%86%99%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8BMyHashMap/"/>
    <url>/2024/05/27/%E6%89%8B%E5%86%99%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8BMyHashMap/</url>
    
    <content type="html"><![CDATA[<p>﻿# MyHashMap</p><blockquote><p>通过一个简单的例子来理解HashMap源码实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cskaoyan.hashmap;<br><br>数组 + 链表<br><span class="hljs-keyword">import</span> java.util.LinkedHashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">API:</span><br><span class="hljs-comment">    void put(K key, V value)//添加键值对</span><br><span class="hljs-comment">    V get(K key)//获取键所对应的值</span><br><span class="hljs-comment">    void delete(K key)//删除key</span><br><span class="hljs-comment">    boolean contains(K key) //判断是否包含key</span><br><span class="hljs-comment">    void clear() //清空map</span><br><span class="hljs-comment">    boolean isEmpty() //判断是否为空</span><br><span class="hljs-comment">    int size() //map大小</span><br><span class="hljs-comment">    Set&lt;K&gt; keys() //返回所有key的集合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHashMap</span>&lt;K, V&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<span class="hljs-comment">//默认容量  0 100000000000000  2的30吃饭</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<span class="hljs-comment">//最大容量，取2的次幂效率高(复习位运算)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75</span>;<span class="hljs-comment">//经验指数，没有为什么。大数据试验</span><br>    <br>    <span class="hljs-comment">// 字段</span><br>    <span class="hljs-keyword">private</span> Entry&lt;K, V&gt;[] table;<br>    <span class="hljs-comment">//创建一个节点数组，含义是 table数组里每个位置的对象是entry节点，每个entry节点里有键值对和hash值，还有一个后驱节点。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size; <span class="hljs-comment">//大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> loadFactor; <span class="hljs-comment">//装填因子，默认为0.75</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> threshold; <span class="hljs-comment">// 阈值，达到阈值就要开始扩容</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *如何理解这个Entry? </span><br><span class="hljs-comment">    *1.了解HashMap构造，HashMap底层是数组加向链表。数组支持随机访问，故HashMap查找数组位置为*0(1),然后再到链表上去差找为0(1)   常量级。  </span><br><span class="hljs-comment">    *2.hash值是通过hash算法计算出的随机数，具有高度保密性。（撞库攻击）</span><br><span class="hljs-comment">    *3.构造方法里的this是调用其他构造方法的意思。</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K, V&gt; &#123;<br>        K key;<br>        V val;<br>        <span class="hljs-type">int</span> hash;<br>        Entry&lt;K, V&gt; next;<br><br>        Entry(K key, V val, <span class="hljs-type">int</span> hash) &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.val = val;<br>            <span class="hljs-built_in">this</span>.hash = hash;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> key + <span class="hljs-string">&quot;=&quot;</span> + val;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHashMap</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">double</span> loadFactor)</span> &#123;<br>        <span class="hljs-comment">// initialCapacity: 大概存储键值对的个数</span><br>        <span class="hljs-keyword">if</span> (initialCapacity &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;initialCapacity=&quot;</span> + initialCapacity);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;loadFactor=&quot;</span> + loadFactor);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.loadFactor = loadFactor;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cap</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (initialCapacity / loadFactor);<br>        <span class="hljs-comment">// 计算大于等于n的最小2的次幂</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> tableLength(cap);<br>        table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[n];<br>        threshold = (<span class="hljs-type">int</span>) (table.length * loadFactor);<span class="hljs-comment">//阈值等于容量乘以装载因子</span><br>    &#125;<br><br>    <span class="hljs-comment">// 计算大于cap的最小的2^n (见文件：计算大于cap的最小的2的次幂)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableLength</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cap &gt;= MAX_CAPACITY) <span class="hljs-keyword">return</span> MAX_CAPACITY;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> cap - <span class="hljs-number">1</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">return</span> n + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加键值对，如果key存在，就更新它对应的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果key不存在, 返回null, 如果key存在，返回原来的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || value == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Key or value can not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>        <span class="hljs-comment">// 遍历链表</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e = table[idx]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (hash == e.hash &amp;&amp; ((key == e.key) || key.equals(e.key))) &#123;<br>                <span class="hljs-comment">// key存在</span><br>                <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.val;<br>                e.val = value;<br>                <span class="hljs-keyword">return</span> oldValue;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// key不存在, 在头结点添加键值对。</span><br>        addEntry(key, value, hash, idx);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEntry</span><span class="hljs-params">(K key, V value, <span class="hljs-type">int</span> hash, <span class="hljs-type">int</span> idx)</span> &#123;<br>        <span class="hljs-comment">// 判断是否需要进行扩容</span><br>        <span class="hljs-keyword">if</span> (size == threshold) &#123;<br>            <span class="hljs-keyword">if</span> (table.length == MAX_CAPACITY) &#123;<br>                <span class="hljs-comment">// 也可以抛出异常</span><br>                threshold = Integer.MAX_VALUE;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                grow(table.length &lt;&lt; <span class="hljs-number">1</span>); <span class="hljs-comment">//两倍扩容</span><br>                idx = indexFor(hash, table.length);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 添加键值对</span><br>        Entry&lt;K, V&gt; entryToAdd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(key, value, hash);<br>        entryToAdd.next = table[idx];<span class="hljs-comment">//头插   </span><br>        table[idx] = entryToAdd;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> newCapacity)</span> &#123;<br>        Entry&lt;K, V&gt;[] newTable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[newCapacity];<br>        <span class="hljs-comment">//遍历table头插到新数组</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e : table) &#123;<br>            <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>) &#123;<br>                Entry&lt;K, V&gt; next = e.next;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(e.hash, newCapacity);<br>                e.next = newTable[idx];<br>                newTable[idx] = e;<br>                e = next;<br>            &#125;<br>        &#125;<br>        table = newTable;<span class="hljs-comment">//吧新数组的地址赋值给table</span><br>        threshold = (<span class="hljs-type">int</span>) (table.length * loadFactor);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> key.hashCode();<br>        <span class="hljs-keyword">return</span> (h &gt;&gt; <span class="hljs-number">16</span>) ^ (h &lt;&lt; <span class="hljs-number">16</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexFor</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-keyword">return</span> hash &amp; (length - <span class="hljs-number">1</span>);(见附件<span class="hljs-number">2</span>)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key获取值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 指定的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对应的值, 如果key不存在返回null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Key cannot be null.&quot;</span>);<br>        &#125;   jdk可以存<span class="hljs-literal">null</span>   <span class="hljs-literal">null</span>建或者值  ？  可以同时吗？<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e = table[idx]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (hash == e.hash &amp;&amp; ((key == e.key) || (key.equals(e.key)))) &#123;<br>                <span class="hljs-keyword">return</span> e.val;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;？？？我就说JDK<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据指定的key, 删除键值对</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 指定的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> key对应的value, 如果key不存在返回null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">delete</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Key cannot be null.&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//定义一个前驱节点</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e = table[idx]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (hash == e.hash &amp;&amp; ((key == e.key) || (key.equals(e.key)))) &#123;<br>                <span class="hljs-type">V</span> <span class="hljs-variable">deleteValue</span> <span class="hljs-operator">=</span> e.val;<br>                <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) table[idx] = e.next; <span class="hljs-comment">// // 删除头结点</span><br>                <span class="hljs-keyword">else</span> prev.next = e.next;<br>                size--;<br>                <span class="hljs-keyword">return</span> deleteValue;<br>            &#125;<br>            prev = e;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断哈希表中是否包含指定的键</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 指定的键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果包含返回true, 否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Key cannot be null.&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e = table[idx]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (hash == e.hash &amp;&amp; ((key == e.key) || (key.equals(e.key)))) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">///foreach??? 我记得老师好像是这么说的，大问题</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; table.length; i++) &#123;<br>            table[i] = <span class="hljs-literal">null</span>;<br>        &#125;<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取哈希表中键的集合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 哈希表中键的集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Set&lt;K&gt; <span class="hljs-title function_">keys</span><span class="hljs-params">()</span> &#123;<br>        Set&lt;K&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e : table) &#123;<br>            <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>) &#123;<br>                set.add(e.key);<br>                e = e.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> set;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;&#123;&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e : table) &#123;<br>            <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>) &#123;<br>                sb.append(e).append(<span class="hljs-string">&quot;, &quot;</span>);<br>                e = e.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!isEmpty()) sb.delete(sb.length() - <span class="hljs-number">2</span>, sb.length());<br>        <span class="hljs-keyword">return</span> sb.append(<span class="hljs-string">&quot;&#125;&quot;</span>).toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        MyHashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">/*System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.size());</span><br><span class="hljs-comment">        System.out.println(map.isEmpty());*/</span><br><br>        map.put(<span class="hljs-string">&quot;王宝强&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;刘强东&quot;</span>, <span class="hljs-string">&quot;章泽天&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;文章&quot;</span>, <span class="hljs-string">&quot;马伊利&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;贾乃亮&quot;</span>, <span class="hljs-string">&quot;李小璐&quot;</span>);<br><br>       <span class="hljs-comment">/* System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.size());</span><br><span class="hljs-comment">        System.out.println(map.isEmpty());*/</span><br><br>        <span class="hljs-comment">/*System.out.println(map.put(&quot;谢霆锋&quot;, &quot;王菲&quot;));</span><br><span class="hljs-comment">        System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.put(&quot;谢霆锋&quot;, &quot;张柏芝&quot;));</span><br><span class="hljs-comment">        System.out.println(map);*/</span><br>        <span class="hljs-comment">// System.out.println(map.put(null, &quot;A&quot;));</span><br>        <span class="hljs-comment">// System.out.println(map.put(&quot;A&quot;, null));</span><br><br>        <span class="hljs-comment">// V get(K key)</span><br>        <span class="hljs-comment">// System.out.println(map.get(null));</span><br>        <span class="hljs-comment">/*System.out.println(map.get(&quot;刘强东&quot;));</span><br><span class="hljs-comment">        System.out.println(map.get(&quot;邓超&quot;));*/</span><br><br>        <span class="hljs-comment">// V delete(K key)</span><br>        <span class="hljs-comment">// System.out.println(map.delete(null));</span><br>        <span class="hljs-comment">/*System.out.println(map.delete(&quot;刘强东&quot;));</span><br><span class="hljs-comment">        System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.size());*/</span><br><br>        <span class="hljs-comment">/*System.out.println(map.delete(&quot;邓超&quot;));</span><br><span class="hljs-comment">        System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.size());*/</span><br><br>        <span class="hljs-comment">// contains(K key)</span><br>        <span class="hljs-comment">// System.out.println(map.contains(null));</span><br>        <span class="hljs-comment">/*System.out.println(map.contains(&quot;文章&quot;));</span><br><span class="hljs-comment">        System.out.println(map.contains(&quot;邓超&quot;));*/</span><br><br>        System.out.println(map.keys());<br>        map.clear();<br>        System.out.println(map.keys());<br>        System.out.println(map.size());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="附件1-计算大于cap的最小2的次幂"><a href="#附件1-计算大于cap的最小2的次幂" class="headerlink" title="附件1:计算大于cap的最小2的次幂"></a>附件1:计算大于cap的最小2的次幂</h3><blockquote><p>| (或运算)：只要有1 结果就是1，0 | 0 &#x3D; 0</p><p>&amp;( 与运算)：同时为1结果才为1，否则为0.</p><p>^(异或运算符) ：0^0 &#x3D;0, 0^1&#x3D;1,1^0&#x3D;1,1^1&#x3D;0   (相同为0 不同为1)</p><p>例如：cap &#x3D; 100 ,那么  n &#x3D; 99;转换为二进制为：0000 0000 0110 0011,执行第一步：n |&#x3D; n&gt;&gt;&gt;1,</p><p>先把n右移1位：0000 0000 0011 0001，然后进行 | 运算。</p></blockquote><blockquote><p>0000 0000 0110 0011</p><p>0000 0000 0011 0001</p><p>0000 0000 0111 0011</p><p>然后执行第二步：</p><p>0000 0000 0111 0011</p><p>0000 0000 0001 1100</p><p>0000 0000 0111 1111</p><p>然后第三步：</p><p>0000 0000 0111 1111</p><p>0000 0000 0000 0111</p><p>0000 0000 0111 1111</p><p>循环下去：得到0000 0000 0111 1111 &#x3D; 127</p><p>127+1 &#x3D; 128；</p><p>所以 大于100的最小的2的次幂是 128</p></blockquote><h3 id="附件2：hash-length-1"><a href="#附件2：hash-length-1" class="headerlink" title="附件2：hash &amp; (length -1)"></a>附件2：<code>hash &amp; (length -1)</code></h3><blockquote><p>比如hash &#x3D;  100；length -1 &#x3D; 63;(只写低八位)</p><p>hash &#x3D;          0110 0100</p><p>length -1 &#x3D;   0011 1111</p><p>​                 &#x3D;   0010 0100  (36)</p><p>所以 hash 为 100的值 应该存在索引36处。</p></blockquote><h3 id="附件3：HashMap在并发场景中可能出现死循环"><a href="#附件3：HashMap在并发场景中可能出现死循环" class="headerlink" title="附件3：HashMap在并发场景中可能出现死循环"></a>附件3：<code>HashMap</code>在并发场景中可能出现死循环</h3><p>1</p><blockquote><p>0000 0000 0000 0111</p><p>0000 0000 0111 1111</p><p>循环下去：得到0000 0000 0111 1111 &#x3D; 127</p><p>127+1 &#x3D; 128；</p><p>所以 大于100的最小的2的次幂是 128</p></blockquote><h3 id="附件2：hash-length-1-1"><a href="#附件2：hash-length-1-1" class="headerlink" title="附件2：hash &amp; (length -1)"></a>附件2：<code>hash &amp; (length -1)</code></h3><blockquote><p>比如hash &#x3D;  100；length -1 &#x3D; 63;(只写低八位)</p><p>hash &#x3D;          0110 0100</p><p>length -1 &#x3D;   0011 1111</p><p>​                 &#x3D;   0010 0100  (36)</p><p>所以 hash 为 100的值 应该存在索引36处。</p></blockquote><h3 id="附件3：HashMap在并发场景中可能出现死循环-1"><a href="#附件3：HashMap在并发场景中可能出现死循环-1" class="headerlink" title="附件3：HashMap在并发场景中可能出现死循环"></a>附件3：<code>HashMap</code>在并发场景中可能出现死循环</h3><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ji8JKith-1585706032777)(C:\Users\86133\Desktop\markdown\王道笔记\HashMap在并发场景中可能会出现死循环.png)]</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建个人博客</title>
    <link href="/2024/05/27/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/05/27/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Hexo搭建个人博客"><a href="#使用Hexo搭建个人博客" class="headerlink" title="使用Hexo搭建个人博客"></a>使用Hexo搭建个人博客</h1><ol><li>安装Node.js</li></ol><p>​去 <code>https://nodejs.org/en</code> 下载Node.js 安装一直next即可。 </p><p><img src="/img/node.png"></p><ol start="2"><li>安装git</li></ol><p>​去git官网<code>https://git-scm.com/</code>下载安装git即可。</p><p><img src="/img/git.png"></p><ol start="3"><li>安装hexo</li></ol><p> <code>npm install hexo</code> 执行命令在你创建的博客目录下。会创建成功一个博客目录如下：</p><p><img src="/img/hexo.png"></p><ol start="4"><li><p>配置Github</p><p>  到Github的设置页面获取到token。进行git的配置。</p></li></ol><p><img src="/img/github.png"></p><ol start="5"><li>创建githubio仓库</li></ol><p>​创建一个名字为固定格式的仓库<code>username.github.io</code> ， 其中<code>username</code>是你github的用户名。</p><ol start="6"><li>上传博客</li></ol><p>​      本地git push 博客文件夹到仓库中。</p><ol start="7"><li>打开展示</li></ol><p>当然以上是我更换过主题后的页面。原始页面会比较简单。具体操作可以Google。</p><p><img src="/img/res.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/05/hello-world/"/>
    <url>/2024/05/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
