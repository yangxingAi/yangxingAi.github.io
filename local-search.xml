<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>累加树</title>
    <link href="/2024/05/27/%E7%B4%AF%E5%8A%A0%E6%A0%91/"/>
    <url>/2024/05/27/%E7%B4%AF%E5%8A%A0%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>﻿# 累加树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 给定一个二叉搜索树（Binary Search Tree），</span><br><span class="hljs-comment"> * 把它转换成为累加树（Greater Tree)，</span><br><span class="hljs-comment"> * 使得每个节点的值是原来的节点值加上所有大于它的节点值之和。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreaterTree</span>&#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>          <span class="hljs-type">int</span> val;<br>          TreeNode left;<br>          TreeNode right;<br>          TreeNode(<span class="hljs-type">int</span> x) &#123; val = x; &#125;<br>      &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 思路：</span><br><span class="hljs-comment">     * 二叉搜索树中序遍历是递增的序列，那么反中序（右中左）的顺序就是降序序列</span><br><span class="hljs-comment">     * 那么只需要把前面的数依次加到节点处就是当前累加树节点的和</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> root</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">convertBST</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>          <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>          convertBST(root.right);<br>          sum += root.val;<br>          root.val = sum;<br>          convertBST(root.left);<br>          <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyHashMap</title>
    <link href="/2024/05/27/%E6%89%8B%E5%86%99%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8BMyHashMap/"/>
    <url>/2024/05/27/%E6%89%8B%E5%86%99%E7%AE%80%E5%8D%95%E5%AE%9E%E4%BE%8BMyHashMap/</url>
    
    <content type="html"><![CDATA[<p>﻿# MyHashMap</p><blockquote><p>通过一个简单的例子来理解HashMap源码实现。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cskaoyan.hashmap;<br><br>数组 + 链表<br><span class="hljs-keyword">import</span> java.util.LinkedHashSet;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">API:</span><br><span class="hljs-comment">    void put(K key, V value)//添加键值对</span><br><span class="hljs-comment">    V get(K key)//获取键所对应的值</span><br><span class="hljs-comment">    void delete(K key)//删除key</span><br><span class="hljs-comment">    boolean contains(K key) //判断是否包含key</span><br><span class="hljs-comment">    void clear() //清空map</span><br><span class="hljs-comment">    boolean isEmpty() //判断是否为空</span><br><span class="hljs-comment">    int size() //map大小</span><br><span class="hljs-comment">    Set&lt;K&gt; keys() //返回所有key的集合</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyHashMap</span>&lt;K, V&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<span class="hljs-comment">//默认容量  0 100000000000000  2的30吃饭</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<span class="hljs-comment">//最大容量，取2的次幂效率高(复习位运算)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75</span>;<span class="hljs-comment">//经验指数，没有为什么。大数据试验</span><br>    <br>    <span class="hljs-comment">// 字段</span><br>    <span class="hljs-keyword">private</span> Entry&lt;K, V&gt;[] table;<br>    <span class="hljs-comment">//创建一个节点数组，含义是 table数组里每个位置的对象是entry节点，每个entry节点里有键值对和hash值，还有一个后驱节点。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> size; <span class="hljs-comment">//大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> loadFactor; <span class="hljs-comment">//装填因子，默认为0.75</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> threshold; <span class="hljs-comment">// 阈值，达到阈值就要开始扩容</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    *如何理解这个Entry? </span><br><span class="hljs-comment">    *1.了解HashMap构造，HashMap底层是数组加向链表。数组支持随机访问，故HashMap查找数组位置为*0(1),然后再到链表上去差找为0(1)   常量级。  </span><br><span class="hljs-comment">    *2.hash值是通过hash算法计算出的随机数，具有高度保密性。（撞库攻击）</span><br><span class="hljs-comment">    *3.构造方法里的this是调用其他构造方法的意思。</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K, V&gt; &#123;<br>        K key;<br>        V val;<br>        <span class="hljs-type">int</span> hash;<br>        Entry&lt;K, V&gt; next;<br><br>        Entry(K key, V val, <span class="hljs-type">int</span> hash) &#123;<br>            <span class="hljs-built_in">this</span>.key = key;<br>            <span class="hljs-built_in">this</span>.val = val;<br>            <span class="hljs-built_in">this</span>.hash = hash;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> key + <span class="hljs-string">&quot;=&quot;</span> + val;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHashMap</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>        <span class="hljs-built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyHashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">double</span> loadFactor)</span> &#123;<br>        <span class="hljs-comment">// initialCapacity: 大概存储键值对的个数</span><br>        <span class="hljs-keyword">if</span> (initialCapacity &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;initialCapacity=&quot;</span> + initialCapacity);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;loadFactor=&quot;</span> + loadFactor);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.loadFactor = loadFactor;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cap</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (initialCapacity / loadFactor);<br>        <span class="hljs-comment">// 计算大于等于n的最小2的次幂</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> tableLength(cap);<br>        table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[n];<br>        threshold = (<span class="hljs-type">int</span>) (table.length * loadFactor);<span class="hljs-comment">//阈值等于容量乘以装载因子</span><br>    &#125;<br><br>    <span class="hljs-comment">// 计算大于cap的最小的2^n (见文件：计算大于cap的最小的2的次幂)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableLength</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cap &gt;= MAX_CAPACITY) <span class="hljs-keyword">return</span> MAX_CAPACITY;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> cap - <span class="hljs-number">1</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>        n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">return</span> n + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加键值对，如果key存在，就更新它对应的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果key不存在, 返回null, 如果key存在，返回原来的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || value == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Key or value can not be null&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>        <span class="hljs-comment">// 遍历链表</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e = table[idx]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (hash == e.hash &amp;&amp; ((key == e.key) || key.equals(e.key))) &#123;<br>                <span class="hljs-comment">// key存在</span><br>                <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.val;<br>                e.val = value;<br>                <span class="hljs-keyword">return</span> oldValue;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// key不存在, 在头结点添加键值对。</span><br>        addEntry(key, value, hash, idx);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addEntry</span><span class="hljs-params">(K key, V value, <span class="hljs-type">int</span> hash, <span class="hljs-type">int</span> idx)</span> &#123;<br>        <span class="hljs-comment">// 判断是否需要进行扩容</span><br>        <span class="hljs-keyword">if</span> (size == threshold) &#123;<br>            <span class="hljs-keyword">if</span> (table.length == MAX_CAPACITY) &#123;<br>                <span class="hljs-comment">// 也可以抛出异常</span><br>                threshold = Integer.MAX_VALUE;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                grow(table.length &lt;&lt; <span class="hljs-number">1</span>); <span class="hljs-comment">//两倍扩容</span><br>                idx = indexFor(hash, table.length);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 添加键值对</span><br>        Entry&lt;K, V&gt; entryToAdd = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>&lt;&gt;(key, value, hash);<br>        entryToAdd.next = table[idx];<span class="hljs-comment">//头插   </span><br>        table[idx] = entryToAdd;<br>        size++;<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> newCapacity)</span> &#123;<br>        Entry&lt;K, V&gt;[] newTable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[newCapacity];<br>        <span class="hljs-comment">//遍历table头插到新数组</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e : table) &#123;<br>            <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>) &#123;<br>                Entry&lt;K, V&gt; next = e.next;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(e.hash, newCapacity);<br>                e.next = newTable[idx];<br>                newTable[idx] = e;<br>                e = next;<br>            &#125;<br>        &#125;<br>        table = newTable;<span class="hljs-comment">//吧新数组的地址赋值给table</span><br>        threshold = (<span class="hljs-type">int</span>) (table.length * loadFactor);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> key.hashCode();<br>        <span class="hljs-keyword">return</span> (h &gt;&gt; <span class="hljs-number">16</span>) ^ (h &lt;&lt; <span class="hljs-number">16</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexFor</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, <span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-keyword">return</span> hash &amp; (length - <span class="hljs-number">1</span>);(见附件<span class="hljs-number">2</span>)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key获取值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 指定的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对应的值, 如果key不存在返回null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Key cannot be null.&quot;</span>);<br>        &#125;   jdk可以存<span class="hljs-literal">null</span>   <span class="hljs-literal">null</span>建或者值  ？  可以同时吗？<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e = table[idx]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (hash == e.hash &amp;&amp; ((key == e.key) || (key.equals(e.key)))) &#123;<br>                <span class="hljs-keyword">return</span> e.val;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;？？？我就说JDK<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据指定的key, 删除键值对</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 指定的key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> key对应的value, 如果key不存在返回null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">delete</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Key cannot be null.&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>        <span class="hljs-type">Entry</span> <span class="hljs-variable">prev</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//定义一个前驱节点</span><br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e = table[idx]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (hash == e.hash &amp;&amp; ((key == e.key) || (key.equals(e.key)))) &#123;<br>                <span class="hljs-type">V</span> <span class="hljs-variable">deleteValue</span> <span class="hljs-operator">=</span> e.val;<br>                <span class="hljs-keyword">if</span> (prev == <span class="hljs-literal">null</span>) table[idx] = e.next; <span class="hljs-comment">// // 删除头结点</span><br>                <span class="hljs-keyword">else</span> prev.next = e.next;<br>                size--;<br>                <span class="hljs-keyword">return</span> deleteValue;<br>            &#125;<br>            prev = e;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断哈希表中是否包含指定的键</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 指定的键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果包含返回true, 否则返回false</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(K key)</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Key cannot be null.&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> hash(key);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> indexFor(hash, table.length);<br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e = table[idx]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br>            <span class="hljs-keyword">if</span> (hash == e.hash &amp;&amp; ((key == e.key) || (key.equals(e.key)))) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">///foreach??? 我记得老师好像是这么说的，大问题</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; table.length; i++) &#123;<br>            table[i] = <span class="hljs-literal">null</span>;<br>        &#125;<br>        size = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取哈希表中键的集合</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 哈希表中键的集合</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Set&lt;K&gt; <span class="hljs-title function_">keys</span><span class="hljs-params">()</span> &#123;<br>        Set&lt;K&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e : table) &#123;<br>            <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>) &#123;<br>                set.add(e.key);<br>                e = e.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> set;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;&#123;&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Entry&lt;K, V&gt; e : table) &#123;<br>            <span class="hljs-keyword">while</span> (e != <span class="hljs-literal">null</span>) &#123;<br>                sb.append(e).append(<span class="hljs-string">&quot;, &quot;</span>);<br>                e = e.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!isEmpty()) sb.delete(sb.length() - <span class="hljs-number">2</span>, sb.length());<br>        <span class="hljs-keyword">return</span> sb.append(<span class="hljs-string">&quot;&#125;&quot;</span>).toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        MyHashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyHashMap</span>&lt;&gt;();<br>        <span class="hljs-comment">/*System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.size());</span><br><span class="hljs-comment">        System.out.println(map.isEmpty());*/</span><br><br>        map.put(<span class="hljs-string">&quot;王宝强&quot;</span>, <span class="hljs-string">&quot;马蓉&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;刘强东&quot;</span>, <span class="hljs-string">&quot;章泽天&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;文章&quot;</span>, <span class="hljs-string">&quot;马伊利&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;贾乃亮&quot;</span>, <span class="hljs-string">&quot;李小璐&quot;</span>);<br><br>       <span class="hljs-comment">/* System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.size());</span><br><span class="hljs-comment">        System.out.println(map.isEmpty());*/</span><br><br>        <span class="hljs-comment">/*System.out.println(map.put(&quot;谢霆锋&quot;, &quot;王菲&quot;));</span><br><span class="hljs-comment">        System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.put(&quot;谢霆锋&quot;, &quot;张柏芝&quot;));</span><br><span class="hljs-comment">        System.out.println(map);*/</span><br>        <span class="hljs-comment">// System.out.println(map.put(null, &quot;A&quot;));</span><br>        <span class="hljs-comment">// System.out.println(map.put(&quot;A&quot;, null));</span><br><br>        <span class="hljs-comment">// V get(K key)</span><br>        <span class="hljs-comment">// System.out.println(map.get(null));</span><br>        <span class="hljs-comment">/*System.out.println(map.get(&quot;刘强东&quot;));</span><br><span class="hljs-comment">        System.out.println(map.get(&quot;邓超&quot;));*/</span><br><br>        <span class="hljs-comment">// V delete(K key)</span><br>        <span class="hljs-comment">// System.out.println(map.delete(null));</span><br>        <span class="hljs-comment">/*System.out.println(map.delete(&quot;刘强东&quot;));</span><br><span class="hljs-comment">        System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.size());*/</span><br><br>        <span class="hljs-comment">/*System.out.println(map.delete(&quot;邓超&quot;));</span><br><span class="hljs-comment">        System.out.println(map);</span><br><span class="hljs-comment">        System.out.println(map.size());*/</span><br><br>        <span class="hljs-comment">// contains(K key)</span><br>        <span class="hljs-comment">// System.out.println(map.contains(null));</span><br>        <span class="hljs-comment">/*System.out.println(map.contains(&quot;文章&quot;));</span><br><span class="hljs-comment">        System.out.println(map.contains(&quot;邓超&quot;));*/</span><br><br>        System.out.println(map.keys());<br>        map.clear();<br>        System.out.println(map.keys());<br>        System.out.println(map.size());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="附件1-计算大于cap的最小2的次幂"><a href="#附件1-计算大于cap的最小2的次幂" class="headerlink" title="附件1:计算大于cap的最小2的次幂"></a>附件1:计算大于cap的最小2的次幂</h3><blockquote><p>| (或运算)：只要有1 结果就是1，0 | 0 &#x3D; 0</p><p>&amp;( 与运算)：同时为1结果才为1，否则为0.</p><p>^(异或运算符) ：0^0 &#x3D;0, 0^1&#x3D;1,1^0&#x3D;1,1^1&#x3D;0   (相同为0 不同为1)</p><p>例如：cap &#x3D; 100 ,那么  n &#x3D; 99;转换为二进制为：0000 0000 0110 0011,执行第一步：n |&#x3D; n&gt;&gt;&gt;1,</p><p>先把n右移1位：0000 0000 0011 0001，然后进行 | 运算。</p></blockquote><blockquote><p>0000 0000 0110 0011</p><p>0000 0000 0011 0001</p><p>0000 0000 0111 0011</p><p>然后执行第二步：</p><p>0000 0000 0111 0011</p><p>0000 0000 0001 1100</p><p>0000 0000 0111 1111</p><p>然后第三步：</p><p>0000 0000 0111 1111</p><p>0000 0000 0000 0111</p><p>0000 0000 0111 1111</p><p>循环下去：得到0000 0000 0111 1111 &#x3D; 127</p><p>127+1 &#x3D; 128；</p><p>所以 大于100的最小的2的次幂是 128</p></blockquote><h3 id="附件2：hash-length-1"><a href="#附件2：hash-length-1" class="headerlink" title="附件2：hash &amp; (length -1)"></a>附件2：<code>hash &amp; (length -1)</code></h3><blockquote><p>比如hash &#x3D;  100；length -1 &#x3D; 63;(只写低八位)</p><p>hash &#x3D;          0110 0100</p><p>length -1 &#x3D;   0011 1111</p><p>​                 &#x3D;   0010 0100  (36)</p><p>所以 hash 为 100的值 应该存在索引36处。</p></blockquote><h3 id="附件3：HashMap在并发场景中可能出现死循环"><a href="#附件3：HashMap在并发场景中可能出现死循环" class="headerlink" title="附件3：HashMap在并发场景中可能出现死循环"></a>附件3：<code>HashMap</code>在并发场景中可能出现死循环</h3><p>1</p><blockquote><p>0000 0000 0000 0111</p><p>0000 0000 0111 1111</p><p>循环下去：得到0000 0000 0111 1111 &#x3D; 127</p><p>127+1 &#x3D; 128；</p><p>所以 大于100的最小的2的次幂是 128</p></blockquote><h3 id="附件2：hash-length-1-1"><a href="#附件2：hash-length-1-1" class="headerlink" title="附件2：hash &amp; (length -1)"></a>附件2：<code>hash &amp; (length -1)</code></h3><blockquote><p>比如hash &#x3D;  100；length -1 &#x3D; 63;(只写低八位)</p><p>hash &#x3D;          0110 0100</p><p>length -1 &#x3D;   0011 1111</p><p>​                 &#x3D;   0010 0100  (36)</p><p>所以 hash 为 100的值 应该存在索引36处。</p></blockquote><h3 id="附件3：HashMap在并发场景中可能出现死循环-1"><a href="#附件3：HashMap在并发场景中可能出现死循环-1" class="headerlink" title="附件3：HashMap在并发场景中可能出现死循环"></a>附件3：<code>HashMap</code>在并发场景中可能出现死循环</h3><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ji8JKith-1585706032777)(C:\Users\86133\Desktop\markdown\王道笔记\HashMap在并发场景中可能会出现死循环.png)]</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库MySQL</title>
    <link href="/2024/05/27/%E6%95%B0%E6%8D%AE%E5%BA%93MySQL%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/"/>
    <url>/2024/05/27/%E6%95%B0%E6%8D%AE%E5%BA%93MySQL%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F/</url>
    
    <content type="html"><![CDATA[<p>﻿# 数据库MySQL</p><h2 id="一、数据库基础"><a href="#一、数据库基础" class="headerlink" title="一、数据库基础"></a>一、数据库基础</h2><ul><li><p>用管理员身份运行CMD，输入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -h -u root -p<br>/*-h(主机名)<br>-u(用户名)<br>-p(密码)<br>*/<br></code></pre></td></tr></table></figure></li></ul><p>即可以连接成功。</p><ul><li><p>查看全部数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE IF NOT EXISTS test_db;<br>#[IF NOT EXISTS ]:表示如果存在则不报错，不存在就创建数据库。<br>create database if not exists mydb2 character set gbk;<br>#创建一个gbk字符集的数据库<br>create database mydb3 character set gbk collate gbk_bin;<br>#创建一个gbk数据库，gbk校验字符集<br></code></pre></td></tr></table></figure></li><li><p>显示数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure></li><li><p>显示数据库创建语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create databases db_name;<br></code></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop databases [if exists] db_name; <br></code></pre></td></tr></table></figure></li><li><p>修改数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 5.把mydb2的字符集修改为utf8;<br>alter database mydb2 character set utf8 collate utf8_bin;<br></code></pre></td></tr></table></figure></li><li><p>进入数据库和创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#进入数据库<br>use db_name;<br>#创建表，三个int字段<br>create table t_a(<br>a int,<br>    b int,<br>    c int<br>)character set utf8 collate utf8_bin;<br></code></pre></td></tr></table></figure></li><li><p>查看数据库中所有表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看当前数据库中所有表<br>show tables; <br>#查看指定数据库中所有表<br>show tables in db_name;<br></code></pre></td></tr></table></figure></li><li><p>数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">######################################## 数据类型 #####################################<br># 整数 tinyint(1字节), smallint(2字节), mediumint(3字节), int(4字节), bigint(8字节)<br># 小数 float(M,D)(4字节), double(M,D)(8字节), decimal(M,D)(M+2字节)<br>#其中，M称为精度，表示总共的位数；D称为标度，表示小数的位数。<br>#DECIMAL 类型不同于 FLOAT &amp; DOUBLE，DECIMAL 实际是以字符串存放的，它的存储空间并不固定，而是由精度 M 决定的。<br># 时间 year, time, date, datetime, timestamp<br>#datetime系统默认值是null，而timestamp的系统默认值是当前时间now。<br>#datetime存储时间与时区无关，而timestamp与时区有关。<br></code></pre></td></tr></table></figure></li><li><p>字符串类型</p><table><thead><tr><th align="center">类型名称</th><th align="center">占用字节</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">char(M)</td><td align="center">M, 1 &lt;&#x3D; M &lt;&#x3D; 255</td><td align="center">固定长度字符串</td></tr><tr><td align="center">varchar(M)</td><td align="center">L+1, L &lt;&#x3D;M, 1 &lt;&#x3D;M &lt;&#x3D;255</td><td align="center">变长字符串</td></tr><tr><td align="center">TINYTEXT</td><td align="center">L+1, L &lt; 2^8</td><td align="center">非常小的文本字符串</td></tr><tr><td align="center">TEXT</td><td align="center">L+2, L &lt; 2^16</td><td align="center">小的文本字符串</td></tr><tr><td align="center">MEDIUMTEXT</td><td align="center">L+3, L &lt; 2^24</td><td align="center">中等大小的文本字符串</td></tr><tr><td align="center">LONGTEXT</td><td align="center">L+4, L &lt; 2^32</td><td align="center">大的文本字符串</td></tr><tr><td align="center">ENUM</td><td align="center">1 或者 2个字节，取决于枚举的数目，最大 65535个</td><td align="center">枚举类型</td></tr><tr><td align="center">SET</td><td align="center">1,2,3,4或8个字节</td><td align="center">集合类型</td></tr></tbody></table></li><li><p>二进制类型</p><table><thead><tr><th align="center"><strong>类型名称</strong></th><th align="center"><strong>占用字节</strong></th><th align="center"><strong>说明</strong></th></tr></thead><tbody><tr><td align="center">BIT(M)</td><td align="center">[(m+7)&#x2F;8]</td><td align="center">位字节类型</td></tr><tr><td align="center">BINARY(M)</td><td align="center">M</td><td align="center">固定长度的二进制数据</td></tr><tr><td align="center">VARBINARY(M)</td><td align="center">L+1</td><td align="center">可变长度的二进制数据</td></tr><tr><td align="center">TINYBLOB(M)</td><td align="center">L+1,  L &lt; 2^8</td><td align="center">非常小的  BLOB</td></tr><tr><td align="center">BLOB(M)</td><td align="center">L+2,  L &lt; 2^16</td><td align="center">小的  BLOB</td></tr><tr><td align="center">MEDIUMBLOB(M)</td><td align="center">L+3,  L &lt; 2^24</td><td align="center">中等大小的BLOB</td></tr><tr><td align="center">LONGBLOB(M)</td><td align="center">L+4,  L  &lt;  2^32</td><td align="center">非常大的BLOB</td></tr></tbody></table></li><li><p>添加时间表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table t_time (<br>t1 datetime,<br>    t2 timestamp<br>);<br><br>insert into t_time (t1) values (now());<br>insert into t_time (t2) values (now());<br>select * from t_time;<br><br>set time_zone=&#x27;+10:00&#x27;; <br>select * from t_time;<br>set time_zone=&#x27;+8:00&#x27;;<br></code></pre></td></tr></table></figure></li><li><p>枚举类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table t_enum (<br>gender enum(&#x27;female&#x27;, &#x27;male&#x27;),<br>    sex enum(&#x27;f&#x27;, &#x27;m&#x27;) not null<br>);<br><br>insert into t_enum(gender) values(&#x27;female&#x27;);<br># insert into t_enum(gender) values(&#x27;unkonw&#x27;);<br># insert into t_enum(gender) values(&#x27;female,male&#x27;);<br>insert into t_enum (sex) values(&#x27;f&#x27;);<br><br>select * from t_enum;<br></code></pre></td></tr></table></figure></li><li><p>集合类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table t_set(<br>&#x27;score&#x27; set(&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;)<br>);<br>#添加null<br>insert into t_set values(null);<br>#添加a<br>insert into t_set values(&#x27;a&#x27;);<br>#添加ab<br>insert into t_set values(&#x27;a&#x27;,&#x27;b&#x27;);<br>#添加abc,,,无论添加顺序如何，结果都是abc<br>insert into t_set values(&#x27;a&#x27;,&#x27;c&#x27;,&#x27;b&#x27;); <br></code></pre></td></tr></table></figure></li><li><p>创建员工表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table t_employees (<br>id int,<br>    name varchar(20),<br>    gender enum(&#x27;female&#x27;, &#x27;male&#x27;),<br>    birthday date,<br>    entry_date date,<br>    job varchar(20),<br>    salary decimal(10, 2),<br>    `resume` blob<br>);<br># 查看表的结构<br>describe t_employees;<br>desc  t_employees;<br># 修改<br># 添加一列,uid,int类型<br>alter table t_employees add column uid int;<br>#在gender之后添加一个sex枚举<br>alter table t_employees add column sex enum(&#x27;female&#x27;,&#x27;male&#x27;) after gender;<br>#在第一列添加idcard varchar<br>alter table t_employees add column idcard varchar(20) first;<br>#把 resume修改为 varchar（50） 类型<br>alter table t_employees modify column &#x27;resume&#x27; varchar(50);<br>#把name列修改为username varchar（50）<br>alter table t_employees change column name username varchar(50);<br>#删除列<br>alter table t_employees drop id_card,drop uid,drop sex;<br>#修改表的名称<br>rename table t_employees to employees;<br>#移动表到另外一个数据库<br>rename table employees to mydb_2.t_employees;<br>#删除表<br>drop table t_a;<br>drop table  if exists t_a;<br>#复制表结构，不复制数据<br>create table employees like mydb_2.t_employees;<br>#复制表结构和数据<br>create table t_employees(select * from mydb2.t_employees);<br>################################DML#############################################<br>#插入数据<br>insert into employees values (1,&#x27;lishuai&#x27;,&#x27;male&#x27;,&#x27;1996-4-21&#x27;,&#x27;1996-4-21&#x27;,<br>                              &#x27;master&#x27;,10000,null);<br>insert into employees (id, username, gender) values (2, &#x27;zhangshuai&#x27;, &#x27;male&#x27;);<br>insert into employees (id,username,gender) values (2, &#x27;zhangshuai&#x27;, &#x27;male&#x27;),(3, &#x27;zhangshuai&#x27;, &#x27;male&#x27;);<br>#修改<br>#将所有员工的薪资改为5000<br>update employees set salary=5000;<br># 将姓名为&#x27;dashuai&#x27;的员工薪水修改为3000<br>update employees set salary=3000 where username=&#x27;dashuai&#x27;;<br>#删除<br>delete from employees where username=&#x27;dashuai&#x27;;<br>delete from employees;<br></code></pre></td></tr></table></figure></li><li><p>数据库的备份与导入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1.#登录mysql进入数据库，source 文件路径<br>2.#cmd, mysql -u root -p dbname&lt;heros.sql<br>##########备份###############<br>#mysqldump -u root -p db_name &gt; honor_of_kings_backup.sql<br></code></pre></td></tr></table></figure></li><li><p>查询语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select version();<br>#时间和日期相关函数<br>select now();<br>select year(now());<br>select date(now());<br>#和字符串相关的函数<br>select concat (&#x27;_&#x27;,trim(&#x27; ab cd &#x27;),&#x27;_&#x27;);<br>select length(&#x27;ab中国&#x27;);<br>#查询单列<br>select name from heros;<br># 3. 查看多列, 查看所有英雄名字, 最大生命值, 最大法力值, 主要角色定位<br>select name,max_hp,max_mp,role_main from heros;<br>#4. 查看所有列， 查看所有英雄的所有字段 (最好不要在生产环境中使用)<br>select * from heros;<br># 5. 通过where子句过滤记录, (在MySQL中0表示false, 非0表示true)<br>select * from heros where 0;<br>################################# 运算符 ################################<br># 查找name=&#x27;花木兰&#x27;的数据<br>select * from heros where name = &#x27;花木兰&#x27;;<br>select * from heros where name &lt;=&gt; &#x27;花木兰&#x27;;#安全等于<br># 查看所有没有辅助角色定义的英雄名字<br>select name,role_assist from heros where role_assist = null;<br>select name,role_assist from heros where role_assist &lt;&gt;null;<br>select name,role_assist from heros where role_assist  is null;<br># 查看所有有辅助角色定位的英雄名字<br>select name from heros where role_assist is not null;<br>select name from heros where role_assist &lt;&gt; null;<br>## 查看最大生命值在[7350, 8341]范围内的所有英雄, between and<br>select * from heros where max_hp between 7350 and 8341;<br># 查看主要角色定位为战士和坦克的英雄, in<br>select * from heros where role_main in (&#x27;战士&#x27;,&#x27;坦克&#x27;);<br># 查看主要角色定位不为辅助和法师的英雄, not in<br>select name ,role_main from heros where role_main not in(&#x27;辅助&#x27;,&#x27;法师&#x27;);<br># 模糊查询, Like一般是与一些通配符一起使用, 在MySQL中&#x27;_&#x27;表示匹配一个字符, &#x27;%&#x27;表示匹配任意个字符。<br># 在不同的DBMS中, 通配符可能不一样. <br># 查询名字中包含&#x27;太&#x27;的英雄。<br>select name from hreos where name like &#x27;%太%&#x27;;<br># 查询名字中除第一个字符外包含&#x27;太&#x27;字的英雄 <br>select name from heros where name like &#x27;%_太%&#x27;;<br># 查询heros有哪些主要角色定位<br>select role_main from heros;<br>select distinct role_main from heros;<br># 注意事项：<br># 1. 对所有的字段进行去重, 所有字段都相同, 才是相同的记录。<br># 2. disctinct 必须位于所有查询字段的前面<br><br># 在MySQL里面, 我们可以通过 limit 关键字限制数量。不同的DBMS, 限制结果集的关键字可能是不一样的。<br># 查看前三条记录<br>select * from heros limit 3 offset 0;<br>select * from heros limit 3;<br># 查看[6, 10]之间的记录<br>select * from heros limit 5 offset 5;<br># 分页查询, [rows, pageNum] = [8, 3]<br>select * from heros limit 8 offset 16;<br># 根据最大生命值从低到高进行排序<br>select name,hp_max from heros order by hp_max asc;<br># 先根据最大生命值从高到低排序，然后在根据最大法力值从低到高排序。<br>select name,hp_max ,mp_max from heros order by hp_max desc,mp_max asc;<br># 查看最大英雄的最大生命值和最大法力值之和<br>select name,(hp_max + mp_max) as hmp from heros order by hmp desc; <br></code></pre></td></tr></table></figure></li><li><p>聚合函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 聚合函数，统计的是列，不是行。(统计行用计算字段)<br># 注意事项：<br>## 1) 聚合函数往往是搭配分组使用的, 如果没有分组，那么统计的就是整张表的数据。<br>## 2) 如果分组了, 那么统计的就是每一组的数据。<br># count()<br>select count(*) from heros; # 69<br>select count(role_assist) from heros; # 不会统计null行<br><br># sum()<br>select sum(hp_max) from heros; # 不会统计null行<br>select sum(name) from heros; <br>select null + 0; # null<br><br># avg()<br>select avg(hp_max) from heros; # 不会统计null行<br>select avg(name) from heros; # <br><br># max()<br>select max(hp_max) from heros; # 不会统计null行<br>select max(name) from heros; <br><br># min()<br>select min(hp_max) from heros; # 不会统计null行<br>select min(name) from heros;<br></code></pre></td></tr></table></figure></li><li><p>分组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 分组 group by<br># 注意事项：虽然DBMS实现的时候，往往会对分组进行排序。但是如果没有明确的order by子句<br># 我们就不应该认为结果是有序的。<br><br>select role_main from heros group by role_main;<br># select name, role_main from heros group by role_main;<br>select group_concat(name), role_main from heros group by role_main;<br><br># 1) 搭配聚合函数使用<br>select count(*), role_main from heros group by role_main;<br># 2) 对多字段进行分组<br>select role_main, attack_range from heros group by role_main, attack_range;<br><br>select role_main, attack_range from heros group by role_main, attack_range having count(*) &gt; 5;<br><br># where和having都可以过滤, 那它们之间的区别是什么？<br></code></pre></td></tr></table></figure></li><li><p>约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1. 实体完整性 <br># primary key, 独一无二的标识。要求不能为null, 不能重复。一张表最多只有一个主键。<br>create table t_student (<br>id int primary key,<br>    name varchar(20),<br>    chinese int,<br>    math int,<br>    english int<br>);<br>drop table t_student;<br><br>create table t_student (<br>id int,<br>    name varchar(20),<br>    chinese int,<br>    math int,<br>    english int,<br>    primary key(id)<br>);<br>show index in t_student;<br># priamry key 可以是多个字段<br>create table xuanke(<br>sid int,<br>    cid int,<br>    primary key(sid, cid)<br>);<br>show index from xuanke;<br><br># 创建表之后，再指定主键。(不推荐！)<br>drop table xuanke;<br>create table xuanke(<br>sid int,<br>    cid int<br>);<br>show index from xuanke;<br>alter table xuanke add primary key(sid, cid);<br>show index from xuanke;<br><br>## auto_increment 往往是和 primary key 一起使用。<br>## 1) auto_increment 只能作用于primary key或者是 unique.<br>## 2) auto_increment 只能作用于数值字段。<br>## 3) 一张表只能有一个自增长字段。<br><br>show tables;<br>drop table t_student;<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20),<br>    chinese int,<br>    math int,<br>    english int<br>);<br><br>insert into t_student values (null, &#x27;刘亦菲&#x27;, 100, 100, 100), (null, &#x27;迪丽热巴&#x27;, 80, 80, 80);<br>select * from t_student;<br><br>drop table t_student;<br>create table t_student (<br>id int unique auto_increment,<br>    name varchar(20),<br>    chinese int unique auto_increment,<br>    math int,<br>    english int<br>);<br><br>#2. 域(field)的完整性<br>#2.1 not null<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int<br>);<br>insert into t_student values (null, null, 100, 100, 100);<br>insert into t_student values (null, &#x27;Thomas_He&#x27;, 100, 100, 100);<br><br>#2.2 unique <br>#注意事项：null可以有多条。<br>create table t_unique(<br>a int unique<br>);<br>insert into t_unique values (1);<br># insert into t_unique values (1);<br>insert into t_unique values (null);<br>insert into t_unique values (null);<br>select * from t_unique;<br>select count(*) from t_unique;<br><br>#2.3 default 默认值<br>create table t_default(<br>a int default 100,<br>    b int<br>);<br><br>insert into t_default(a) values(50);<br>insert into t_default(b) values(50);<br>select * from t_default;<br><br>#2.4 check, 自定义约束. MySQL没有实现这个功能，Oracle实现了。<br>create table t_check(<br>height float(3, 2) check(height between 0.00 and 3.00)<br>);<br>insert into t_check values (1.89);<br>insert into t_check values (3.11);<br>select * from t_check;<br><br># 3. 参照性约束 foreign key(外键)<br>show tables;<br>drop table t_student;<br>drop table xuanke;<br><br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int,<br>    cid int <br>);<br><br>create table t_class(<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    teacher varchar(20) not null<br>);<br><br>insert into t_class values (null, &#x27;一班&#x27;, &#x27;张三&#x27;),(null, &#x27;二班&#x27;, &#x27;李四&#x27;),(null, &#x27;三班&#x27;, &#x27;王五&#x27;);<br>insert into t_student values (null, &#x27;赵六&#x27;, 100, 100, 100, 100);<br>select * from t_class;<br>select * from t_student;<br><br># 创建外键<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int,<br>    cid int,<br>    foreign key(cid) references t_class(id)<br>);<br><br>show index in t_student;<br>drop table t_student;<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int,<br>    cid int,<br>    constraint fk_cid foreign key(cid) references t_class(id)<br>);<br>show index in t_student;<br>drop table t_student;<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int,<br>    cid int<br>);<br>alter table t_student add constraint fk_cid foreign key(cid) references t_class(id);<br><br># insert into t_student values (null, &#x27;赵六&#x27;, 100, 100, 100, 100);<br>insert into t_student values (null, &#x27;赵六&#x27;, 100, 100, 100, 1);<br>select * from t_student;<br><br>select * from t_class;<br>insert into t_student values (null, &#x27;刘亦菲&#x27;, 100, 100, 100, 1);<br>insert into t_student values (null, &#x27;王语嫣&#x27;, 100, 100, 100, 2);<br>insert into t_student values (null, &#x27;赵灵儿&#x27;, 100, 100, 100, 3);<br><br>## t_students 不能随意的添加和修改。<br># insert into t_student values (null, &#x27;白秀珠&#x27;, 100, 100, 100, 4);<br># update t_student set cid = 4 where name=&#x27;王语嫣&#x27;;<br><br>## t_class 不能随意删除和修改。<br># delete from t_class where id = 1;<br>insert into t_class values (null, &#x27;四班&#x27;, &#x27;Thomas_He&#x27;);<br>delete from t_class where id = 4;<br># update t_class set id=4 where id = 1;<br><br>## 级联删除<br>drop table t_student;<br>drop table t_class;<br>create table t_class(<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    teacher varchar(20) not null<br>);<br>insert into t_class values (null, &#x27;一班&#x27;, &#x27;张三&#x27;),(null, &#x27;二班&#x27;, &#x27;李四&#x27;),(null, &#x27;三班&#x27;, &#x27;王五&#x27;);<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int,<br>    cid int,<br>    constraint fk_cid foreign key(cid) references t_class(id) on delete cascade<br>);<br>insert into t_student values (null, &#x27;刘亦菲&#x27;, 100, 100, 100, 1);<br>insert into t_student values (null, &#x27;王语嫣&#x27;, 100, 100, 100, 2);<br>insert into t_student values (null, &#x27;赵灵儿&#x27;, 100, 100, 100, 3);<br><br>select * from t_class;<br>select * from t_student;<br><br>delete from t_class where id = 1;<br><br>## 级联置空<br>drop table t_student;<br>drop table t_class;<br>create table t_class(<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    teacher varchar(20) not null<br>);<br>insert into t_class values (null, &#x27;一班&#x27;, &#x27;张三&#x27;),(null, &#x27;二班&#x27;, &#x27;李四&#x27;),(null, &#x27;三班&#x27;, &#x27;王五&#x27;);<br>create table t_student (<br>id int primary key auto_increment,<br>    name varchar(20) not null,<br>    chinese int,<br>    math int,<br>    english int,<br>    cid int,<br>    constraint fk_cid foreign key(cid) references t_class(id) on delete set null<br>);<br>insert into t_student values (null, &#x27;刘亦菲&#x27;, 100, 100, 100, 1);<br>insert into t_student values (null, &#x27;王语嫣&#x27;, 100, 100, 100, 2);<br>insert into t_student values (null, &#x27;赵灵儿&#x27;, 100, 100, 100, 3);<br><br>select * from t_class;<br>select * from t_student;<br><br>delete from t_class where id = 1;<br># 注意事项: &lt;阿里巴巴开发者手册&gt; 不要在数据库中设置外键，一切的参照完整都应该在业务层中完成。<br># 外键缺点：<br># 1) 影响程序的性能<br># 2）在高并发的场景中容易引起死锁。<br># 3) 当数据量很多的时候，就需要分表。一旦分表，就不能保证参照完整性了。<br><br># 如果参照完整性都在业务中完成，也会导致一些问题。<br># 1) 业务和数据耦合了<br># 2) 增加了业务层的逻辑<br># 3）并不能够从数据库层面保证参照完整性。<br><br># 到底什么时候使用外键<br># 1) 正确性 &gt; 性能<br># 2）并发度不高<br># 3) 数据量不大<br></code></pre></td></tr></table></figure></li><li><p>子查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 子查询<br># a. 非关联子查询. 非关联子查询只需要查找一次。<br># b. 关联子查询。<br><br># 查询身高最高的球员有哪些？并且最高身高是多少？ player_id, player_name, height;<br># select player_id, player_name, height from player where height = max(height);<br><br># a. 非关联子查询<br>select player_id, player_name, height from player where height = (select max(height) from player);<br><br># b. 关联子查询<br># 查询每个球队中大于该球队平均身高的球员有哪些？ player_id, team_id, player_name, height;<br>select  player_id, team_id, player_name, height <br>from player AS a<br>where (height &gt; (select avg(height) from player AS b where b.team_id = a.team_id));<br><br># b.1 exists 子查询<br># 如果子查询结果集为空,exist返回false, 否则返回true;<br># 统计出过场的球员有哪些？player_id, player_name, team_id;<br>select player_id, player_name, team_id <br>from player<br>where exists (select * from player_score where player_score.player_id = player.player_id);<br># not exists: 如果子查询结果集为空,exist返回true, 否则返回false;<br># 统计没有出过场的球员有哪些？player_id, player_name, team_id;<br>select player_id, player_name, team_id <br>from player<br>where not exists (select player_id from player_score where player_score.player_id = player.player_id);<br><br># b.2 集合比较子查询<br># IN: 判断是否在集合中<br># 统计出过场的球员有哪些？player_id, player_name, team_id;<br>select player_id, player_name, team_id<br>from player<br>where player_id in (select distinct player_id from player_score);<br><br>select player_id, player_name, team_id<br>from player<br>where player_id in (select player_id from player_score where player_score.player_id = player.player_id);<br><br># 问题：哪一种性能比较好呢？<br>## SELECT * FROM A WHERE EXISTS (SELECT c FROM B WHERE B.c = A.c);<br>## SELECT * FROM A WHERE A.c IN (SELECT c FROM B)<br>## 1) 如果A表的数据比B表大, IN子查询效率比Exists要高。<br>## 2) 如果A表的数据比B表小, Exists子查询比IN子查询效率要高。<br><br># ANY (SOME) 一般和比较操作一起使用，与子查询集合的某个值比较<br># 找出所有比步行者中某一个球员身高要高的球员，并且不是步行者的球员。<br>select player_name, team_id, height from player<br>where height &gt; any(select distinct height from player where team_id = 1002) <br>and team_id != 1002;<br><br>select player_name, team_id, height from player<br>where height &gt; (select min(height) from player where team_id = 1002) <br>and team_id != 1002;<br><br># ALL 一般和比较操作一起使用，与子查询集合的所有值比较<br># 找出所有比步行者中所有球员身高要高的球员，并且不是步行者的球员。<br>select player_name, team_id, height from player<br>where height &gt; all(select distinct height from player where team_id = 1002) <br>and team_id != 1002;<br><br>select player_name, team_id, height from player<br>where height &gt; (select  max(height) from player where team_id = 1002) <br>and team_id != 1002;<br><br># 子查询作为计算字段<br># 查询每个球队的球员数<br>select team_id, team_name, (select count(*) from player where player.team_id = team.team_id) AS team_num from team;     <br><br></code></pre></td></tr></table></figure></li><li><p>连接查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># Cross Join<br>use nba;<br>select * from player;<br>select count(*) from player; # 37<br>select * from team;<br>select count(*) from team; # 3<br><br>select * from player cross join team; <br>select count(*) from player cross join team; # 111<br><br># 等值连接<br>## 自然连接 natural join<br>SELECT * FROM player NATURAL JOIN team;<br><br>## USING: 指定哪些相同的字段做等值判断。<br>SELECT * FROM player JOIN team USING(team_id);<br><br>## ON: 后面接连接的条件。<br>SELECT * FROM player JOIN team ON player.team_id = team.team_id;<br><br># 非等值连接<br># 我们想查询每个球员的身高级别<br>select * from player;<br>select * from height_grades;<br>select player_name, height, height_level from player join height_grades <br>on height between height_lowest and height_highest;<br><br># 外连接<br>create table t_boys (<br>id int primary key,<br>    name varchar(20) not null,<br>    gid int<br>);<br>insert into t_boys values (1, &#x27;Albert&#x27;, 1);<br>insert into t_boys values (2, &#x27;Ben&#x27;, 2);<br>insert into t_boys values (3, &#x27;Calvin&#x27;, 100);<br>insert into t_boys values (4, &#x27;David&#x27;, null);<br><br>create table t_girls (<br>id int primary key,<br>    name varchar(20) not null,<br>    bid int<br>);<br>insert into t_girls values (1, &#x27;Allen&#x27;, 1);<br>insert into t_girls values (2, &#x27;Beyonce&#x27;, 2);<br>insert into t_girls values (3, &#x27;Cindy&#x27;, 100);<br>insert into t_girls values (4, &#x27;Diana&#x27;, null);<br><br>## 左外连接 left [outer] join<br>## 查看所有男生的情况<br>select * from t_boys left join t_girls on t_boys.gid = t_girls.id;<br><br>## 右外连接 right [outer] join<br>## 查看所有女生的情况<br>select * from t_boys right join t_girls on t_girls.bid = t_boys.id;<br><br>## 全外连接 full [outer] join:  MySQL不支持全外连接。<br>## 查看boys and girls 的情况<br>select * from t_boys full join t_girls on t_girls.bid = t_boys.id;<br><br># 5. 自连接<br># 比如我们想要查看比布雷克-格里芬高的球员都有谁？<br>select * from player where player_name = &#x27;布雷克-格里芬&#x27;;<br># 子查询<br>select player_name, height from player <br>where height &gt; (select height from player where player_name = &#x27;布雷克-格里芬&#x27;);<br># 自连接<br>select a.player_name, a.height from player as a join player as b<br>on b.player_name = &#x27;布雷克-格里芬&#x27;<br>where a.height &gt; b.height;<br><br># 推荐使用自连接, DBMS会对自连接进行优化。<br><br># 联合查询<br>## 用左外连接和右外连接实现全外连接。<br>select * from t_boys left join t_girls on t_boys.gid = t_girls.id<br>union<br>select * from t_boys right join t_girls on t_girls.bid = t_boys.id;<br><br>## union all 不会去重。<br>select * from t_boys left join t_girls on t_boys.gid = t_girls.id<br>union all<br>select * from t_boys right join t_girls on t_girls.bid = t_boys.id;<br><br># 不同的DBMS在使用规范上会存在一些差异,并且对SQL标准的支持程度也不一样。<br># a. 不是所有的 DBMS 都支持全外连接。<br># b. Oracle 不能使用 AS 给表起别名。 player p;<br><br># 连接查询需要的注意事项：<br># a. 连接表的数量不能太多。<br># b. 不要忘记连接条件。<br># c. 自连接优于子查询<br></code></pre></td></tr></table></figure></li><li><p>事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select @@autocommit; # 默认等于1, <br># autocommit=1, 自动提交事务，会把每一条语句当成一条事务。<br>use nba;<br><br># 显示开启事务方式1, start transaction<br>start transaction;<br>insert into t_boys values (5, &#x27;Thomas_He&#x27;, null);<br>commit;<br><br># autocommit设置成0, 相当于开启了事务。<br><br>set @@autocommit=0;<br>insert into t_boys values (6, &#x27;Thomas_He&#x27;, null);<br>commit;<br><br><br>## rollback<br>start transaction;<br>use nba;<br>insert into t_boys values (7, &#x27;Thomas_He&#x27;, null);<br>rollback;<br>commit;<br><br>## rollback savepoint;<br>start transaction;<br>insert into t_boys values (7, &#x27;Thomas_He&#x27;, null);<br>savepoint sp1;<br>insert into t_boys values (8, &#x27;Thomas_He&#x27;, null);<br>rollback to sp1;<br>commit;<br><br>use nba;<br>show create table t_boys;<br>start transaction;<br>insert into t_boys values (8, &#x27;Thomas_He&#x27;, null);<br>insert into t_boys values (9, null, null);<br>insert into t_boys values (8, &#x27;Thomas_He&#x27;, null);<br>commit;<br><br>## 隔离级别<br>select @@tx_isolation; # 查询的会话的隔离级别。<br>select @@session.tx_isolation; # 查询的会话的隔离级别。<br>select @@global.tx_isolation; # 查询的全局的隔离级别。<br><br>set transaction isolation level read uncommitted; # 设置下一个事务的隔离级别。<br>set session transaction isolation level read uncommitted; # 设置会话的隔离级别。<br>set global transaction isolation level read uncommitted; # 设置全局的隔离级别。<br><br><br>select @@tx_isolation; ## RR<br>select @@global.tx_isolation; ## RR<br># global 隔离级别影响的是以后的会话，当前会话不会影响。<br>set global transaction isolation level repeatable read; <br>select @@tx_isolation; ## RR<br>select @@global.tx_isolation; ## RU<br><br># read uncommitted<br>set session transaction isolation level read uncommitted;<br>select @@tx_isolation;<br><br>use nba;<br>## 脏写(不存在)<br>start transaction;<br>select * from t_boys;<br>update t_boys set gid = gid + 100 where id = 1;<br>commit;<br><br>## 脏读(存在)<br>start transaction;<br>update t_boys set gid = gid + 100 where id = 1;<br>commit;<br><br># read committed<br>set session transaction isolation level read committed;<br>select @@tx_isolation;<br><br>## 脏写(不存在)<br>start transaction;<br>update t_boys set gid = gid + 100 where id = 1;<br>commit;<br><br>## 脏读(不存在)<br>start transaction;<br>update t_boys set gid = gid + 100 where id = 1;<br>commit;<br><br>## 不可重复读(存在)<br>## 幻读(存在)<br>start transaction;<br>insert into t_boys values (9, &#x27;Thomas_He&#x27;, null);<br>commit;<br><br># repeatable read<br>set session transaction isolation level repeatable read;<br>select @@tx_isolation;<br><br>## 脏写(不存在)<br>start transaction;<br>update t_boys set gid = gid + 100 where id = 1;<br>commit;<br><br>## 脏读(不存在)<br>start transaction;<br>update t_boys set gid = gid + 100 where id = 1;<br>commit;<br><br>## 不可重复读(不存在)<br>## 幻读<br>start transaction;<br>insert into t_boys values (10, &#x27;Thomas_He&#x27;, null);<br>commit;<br><br># 注意事项：MySQL的RR级别，在一定程度上避免幻读现象。<br><br># serialize <br><br>################################################ 练习 #####################################<br>create database stu_db;<br>use stu_db;<br>create table student(<br>sid varchar(10),<br>    sname varchar(10),<br>    sage datetime,<br>    sgender varchar(10)<br>);<br>insert into student values(&#x27;01&#x27; , &#x27;赵雷&#x27; , &#x27;1990-01-01&#x27; , &#x27;男&#x27;);<br>insert into student values(&#x27;02&#x27; , &#x27;钱电&#x27; , &#x27;1990-12-21&#x27; , &#x27;男&#x27;);<br>insert into student values(&#x27;03&#x27; , &#x27;孙风&#x27; , &#x27;1990-12-20&#x27; , &#x27;男&#x27;);<br>insert into student values(&#x27;04&#x27; , &#x27;李云&#x27; , &#x27;1990-12-06&#x27; , &#x27;男&#x27;);<br>insert into student values(&#x27;05&#x27; , &#x27;周梅&#x27; , &#x27;1991-12-01&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;06&#x27; , &#x27;吴兰&#x27; , &#x27;1992-01-01&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;07&#x27; , &#x27;郑竹&#x27; , &#x27;1989-01-01&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;09&#x27; , &#x27;张三&#x27; , &#x27;2017-12-20&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;10&#x27; , &#x27;李四&#x27; , &#x27;2017-12-25&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;11&#x27; , &#x27;李四&#x27; , &#x27;2012-06-06&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;12&#x27; , &#x27;赵六&#x27; , &#x27;2013-06-13&#x27; , &#x27;女&#x27;);<br>insert into student values(&#x27;13&#x27; , &#x27;孙七&#x27; , &#x27;2014-06-01&#x27; , &#x27;女&#x27;);<br><br>create table course(<br>cid varchar(10),<br>    cname varchar(10),<br>    tid varchar(10)<br>);<br>insert into course values(&#x27;01&#x27; , &#x27;语文&#x27; , &#x27;02&#x27;);<br>insert into course values(&#x27;02&#x27; , &#x27;数学&#x27; , &#x27;01&#x27;);<br>insert into course values(&#x27;03&#x27; , &#x27;英语&#x27; , &#x27;03&#x27;);<br><br>create table teacher(<br>tid varchar(10),<br>    tname varchar(10)<br>);<br>insert into teacher values(&#x27;01&#x27; , &#x27;张三&#x27;);<br>insert into teacher values(&#x27;02&#x27; , &#x27;李四&#x27;);<br>insert into teacher values(&#x27;03&#x27; , &#x27;王五&#x27;);<br><br>create table sc(<br>sid varchar(10),<br>    cid varchar(10),<br>    score float(5,2)<br>);<br>insert into sc values(&#x27;01&#x27; , &#x27;01&#x27; , 80);<br>insert into sc values(&#x27;01&#x27; , &#x27;02&#x27; , 90);<br>insert into sc values(&#x27;01&#x27; , &#x27;03&#x27; , 99);<br>insert into sc values(&#x27;02&#x27; , &#x27;01&#x27; , 70);<br>insert into sc values(&#x27;02&#x27; , &#x27;02&#x27; , 60);<br>insert into sc values(&#x27;02&#x27; , &#x27;03&#x27; , 80);<br>insert into sc values(&#x27;03&#x27; , &#x27;01&#x27; , 80);<br>insert into sc values(&#x27;03&#x27; , &#x27;02&#x27; , 80);<br>insert into sc values(&#x27;03&#x27; , &#x27;03&#x27; , 80);<br>insert into sc values(&#x27;04&#x27; , &#x27;01&#x27; , 50);<br>insert into sc values(&#x27;04&#x27; , &#x27;02&#x27; , 30);<br>insert into sc values(&#x27;04&#x27; , &#x27;03&#x27; , 20);<br>insert into sc values(&#x27;05&#x27; , &#x27;01&#x27; , 76);<br>insert into sc values(&#x27;05&#x27; , &#x27;02&#x27; , 87);<br>insert into sc values(&#x27;06&#x27; , &#x27;01&#x27; , 31);<br>insert into sc values(&#x27;06&#x27; , &#x27;03&#x27; , 34);<br>insert into sc values(&#x27;07&#x27; , &#x27;02&#x27; , 89);<br>insert into sc values(&#x27;07&#x27; , &#x27;03&#x27; , 98);<br><br>select * from student;<br>select * from course;<br>select * from teacher;<br>select * from sc;<br><br># 查询「李」姓老师的数量<br>select count(*) from teacher where tname like &#x27;李%&#x27;;<br><br># 查询选修「张三」老师课的同学的信息<br># 1. 涉及到哪些表？teacher, course, sc, student<br># 2. 张三老师叫的课程<br>  select cid, cname, tname<br>      from teacher join course using(tid) where tname=&#x27;张三&#x27;;<br># 3. <br>select sid from teacher <br>join course using(tid)<br>join sc using(cid)<br>where tname=&#x27;张三&#x27;;<br><br># 4. <br>select * from student where sid in(<br>select sid from teacher <br>        join course using(tid)<br>join sc using(cid)<br>where tname=&#x27;张三&#x27;<br>    );<br>    <br># 2. 查询 &quot;01&quot; 课程比 &quot;02&quot; 课程成绩高的学生的信息及课程分数 <br># 涉及到哪些表？student, sc<br># 上01课程有哪些学生？(sid, score1)<br>   select sid, score as score1 from sc where cid = &#x27;01&#x27;;    <br># 上02课程有哪些学生？(sid, score2)<br>   select sid, score as score2 from sc where cid = &#x27;02&#x27;;<br># 同时上&#x27;01&#x27;课程和&#x27;02&#x27;课程的同学有哪些？(sid, score1, score2);<br>   select sid, score1, score2 <br>   from (select sid, score as score1 from sc where cid = &#x27;01&#x27;) as t1<br>   join (select sid, score as score2 from sc where cid = &#x27;02&#x27;) as t2<br>   using(sid);<br><br># 关联student<br>   select student.*, score1, score2 from student<br>   join (select sid, score as score1 from sc where cid = &#x27;01&#x27;) as t1 using(sid)<br>   join (select sid, score as score2 from sc where cid = &#x27;02&#x27;) as t2 using(sid)<br>   where score1 &gt; score2;<br>   <br># 3. 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩<br>  # 涉及那些表？ student, sc<br>  select sid, sname, avg(score) as avg_score from student join sc using(sid)<br>  group by sid having avg_score &gt;= 60;<br></code></pre></td></tr></table></figure></li></ul><h2 id="二、MySQL架构"><a href="#二、MySQL架构" class="headerlink" title="二、MySQL架构"></a>二、MySQL架构</h2><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Ad1AO4Ny-1585737256383)(C:\Users\86133\Desktop\markdown\王道笔记\MySQL\图片1.png)]</p><p>MySQL分为server层和储存引擎层。</p><p>server层包括连接器，查询缓存，解析器，优化器和执行器涵盖了MySQL大多数核心服务功能。</p><p>存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持innoDB，MyISAM，Mermory等多个存储引擎。</p><p>Q：修改管理权限以后，可以立即生效吗？ A：不能，下一次生效。</p><p>Q：默认连接时长多少？A：28800s,8小时。</p><h2 id="三、MySQL是如何工作的？"><a href="#三、MySQL是如何工作的？" class="headerlink" title="三、MySQL是如何工作的？"></a>三、MySQL是如何工作的？</h2><ol><li><h6 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h6><p>当你在客户端输入 mysql –u $user –p $pwd 连接 mysql 的时候，接待你的就是连接器。连接器的作用就是和客户端建立连接、获取权限、维持和管理连接。</p></li><li><p>查询缓存</p><p>建立连接后，就可以执行select语句了。首先MySQL会去查看查询缓存，看下之前是否已经执行过这条查询语句。如果命中缓存，就直接返回。否则就扔给解析器。</p></li><li><p>解析器</p><p>MySQL需要知道你想做什么，因此我们就来到了解析器。解析器会做词法分析和语法分析。词法分析主要是分析每个词的含义，语法分析会判断你写的 SQL 语句是否满足 SQL 语法。</p></li><li><p>优化器</p><p>经过解析器，MySQL就知道你想做什么了。但是在开始执行之前，还需要经过优化器的处理。优化器会优化你的SQL语句。生成最终的执行方案 (execution plan)。然后进入执行器阶段。</p></li><li><p>执行器</p><p>执行器首先会判断你对这张表有没有相应的权限。如果没有，就报错。如果有，就调用相应的存储引擎接口，执行语句。然后将结果集返回给客户端。</p></li></ol><p>Q:为什么不使用查询缓存？</p><p>A：一条更新语句就可以清除查询缓存，辛辛苦苦建立起来的缓存容易被擦除掉。MySQL8以后直接取消了这个功能。默认关闭。只在不会更新的表里使用–（不建议使用）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看mysql支持哪些引擎<br>show engines;<br># 查看默认存储引擎<br>SHOW VARIABLES LIKE ‘%storage_engine%’;<br># 查看某张表的存储引擎<br>SELECT ENGINE FROM information_schema.TABLES<br>WHERE TABLE_SCHEMA=&#x27;$db&#x27;<br>AND TABLE_NAME=&#x27;$table&#x27;;<br></code></pre></td></tr></table></figure><h2 id="四、MyISAM"><a href="#四、MyISAM" class="headerlink" title="四、MyISAM"></a>四、MyISAM</h2><ol><li>特点：<ul><li>查询速度快</li><li>支持表锁</li><li>支持全文索引</li><li>不支持事务</li></ul></li><li>使用MyISAM储存表，会生成三个文件：<ul><li>frm   存储表结构，是任何存储引擎都有的。</li><li>mvd 存放数据</li><li>mvi 存放索引</li></ul></li><li>数据和索引分开存放，这样得索引叫非聚集索引。</li></ol><h2 id="五、Memory"><a href="#五、Memory" class="headerlink" title="五、Memory"></a>五、Memory</h2><ol><li>特点：<ul><li>所有数据都存放在内存中，因此数据库重启后会丢失</li><li>支持表锁</li><li>支持Hash和BTree索引</li><li>不支持Blob和Text字段</li></ul></li><li>Memory由于数据都放在内存中，以及支持Hash索引，它的查询速度是最快的。一般使用 Memory 存放临时表。临时表：在单个连接中可见，当连接断开时，临时表也将不复存在。</li></ol><h2 id="六、innoDB"><a href="#六、innoDB" class="headerlink" title="六、innoDB"></a>六、innoDB</h2><ol><li><p>MySQL 5.5 以及以后版本默认的存储引擎。没有特殊应用，Oracle官方推荐使用InnoDB引擎。</p></li><li><p>特点：</p><ul><li>支持事务</li><li>支持行锁    </li><li>支持MVCC</li><li>支持崩溃恢复</li><li>支持外键一致性约束</li></ul></li><li><p>使用 InnoDB 存储表，会生成两个文件.</p><p>.frm # 存储表结构，是任何存储引擎都有的</p><p>.ibd # 存放数据和索引</p><p>索引和数据存放在一起，这样的索引叫聚集索引。</p></li></ol><h2 id="七、磁盘IO原理"><a href="#七、磁盘IO原理" class="headerlink" title="七、磁盘IO原理"></a>七、磁盘IO原理</h2><blockquote><p>磁盘上的数据可以用一个三维地址标识: 柱面号, 盘号, 块号(磁道上的扇区)</p><p>读&#x2F;写数据的步骤：</p><ol><li>移动磁头到指定的柱面号，这个过程被称为定位或查找。</li></ol><p>​       由于是机械移动, 这部分耗时最高, 最大可达 0.1s.</p><ol start="2"><li><p>根据盘面号确定从哪个磁盘读取数据</p></li><li><p>盘组开始旋转，将指定的块号移动到读&#x2F;写头下</p></li></ol><p>​       磁盘旋转的速度很快, 一般为7200rpm。旋转一圈大约需要 0.0083s.</p><p>​    4. 读写数据</p><p>​       数据通过系统总线传送到内存。一般传输一个字节大概需要 0.02us.</p><p>​       读写 4KB 大约需要 80us.</p><p>磁盘读取数据是以盘块(block)为单位的, 一般为4KB。位于同一盘块的所有数据会被一次性全部读取出来。磁盘IO的代价主要花费在第 1 步。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-4xEvbCGC-1585737256385)(C:\Users\86133\Desktop\markdown\王道笔记\MySQL\图片2-1585475286999.jpg)]</p><p>结论：<em><strong>IO的速度是很慢很慢的，我们应该尽量少地读写磁盘！</strong></em></p><h2 id="八、innoDB数据页格式"><a href="#八、innoDB数据页格式" class="headerlink" title="八、innoDB数据页格式"></a>八、innoDB数据页格式</h2><blockquote><p>页是 InnoDB 磁盘管理的最小单位。在 InnoDB 存储引擎中, 页默认大小为16KB。</p><p>可以通过参数 innodb_page_size 将页的大小设置为 4K、8K 和 16K。</p><p>InnoDB 每次至少会将 1 个页的数据从磁盘读取到内存，每次至少也会将 1 个页的数据从内存写到磁盘。</p><p>在InnoDB存储引擎中，有很多种页类型。其中最重要的是数据页，也叫 B-tree Node。里面存储了索引和数据的信息。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ckAzRqlK-1585737256385)(C:\Users\86133\Desktop\markdown\王道笔记\MySQL\图片3-1585475286999.png)]</p><blockquote><p><strong>File Header</strong></p><p>​    主要存储表空间相关信息</p><p><strong>Page Header</strong></p><p>​    主要存储数据页的元信息</p><p><strong>Infimum + Supremum Records</strong></p><p>​    每个数据页中有两个虚拟行记录用来限定记录的边界，infimum record 是数据页上最小的记录，supremum record 是数据页上最大的记录。</p><p><strong>User Records</strong></p><p>​     用户数据，实际存储的行记录。</p><p><strong>Free Space</strong></p><p>​     空闲空间。</p><p><strong>Page Directory</strong></p><p>​     页目录，存放了记录的相对位置。</p><p><strong>File Trailer</strong></p><p>​     位于数据页的最后，用来检测页是否完整地写入磁盘。</p></blockquote><h2 id="九、索引"><a href="#九、索引" class="headerlink" title="九、索引"></a>九、索引</h2><ol><li><p>索引是什么</p><p>简单来说，索引的目的就是为了提高数据的查询效率，就像书的目录一样。</p><p>一本800页的书，如果想在书中查找某个知识点。在不借助目录的情况下，估计得找好一会儿。同样，对于数据库的表而言，索引就是它的 ”目录”。</p><p><strong>索引：</strong>在 MySQL 中也叫做键 (key)，是存储引擎用于快速找到记录的一种数据结构。</p></li><li><p>哪些数据结构可以作为索引？</p><ul><li>有序数组 </li><li>哈希表 </li><li>平衡二叉树</li><li>B树</li></ul></li></ol><p>​       数据通过系统总线传送到内存。一般传输一个字节大概需要 0.02us.</p><blockquote><p>​       读写 4KB 大约需要 80us.</p><p>磁盘读取数据是以盘块(block)为单位的, 一般为4KB。位于同一盘块的所有数据会被一次性全部读取出来。磁盘IO的代价主要花费在第 1 步。</p></blockquote><p>[外链图片转存中…(img-4xEvbCGC-1585737256385)]</p><p>结论：<em><strong>IO的速度是很慢很慢的，我们应该尽量少地读写磁盘！</strong></em></p><h2 id="八、innoDB数据页格式-1"><a href="#八、innoDB数据页格式-1" class="headerlink" title="八、innoDB数据页格式"></a>八、innoDB数据页格式</h2><blockquote><p>页是 InnoDB 磁盘管理的最小单位。在 InnoDB 存储引擎中, 页默认大小为16KB。</p><p>可以通过参数 innodb_page_size 将页的大小设置为 4K、8K 和 16K。</p><p>InnoDB 每次至少会将 1 个页的数据从磁盘读取到内存，每次至少也会将 1 个页的数据从内存写到磁盘。</p><p>在InnoDB存储引擎中，有很多种页类型。其中最重要的是数据页，也叫 B-tree Node。里面存储了索引和数据的信息。</p></blockquote><p>[外链图片转存中…(img-ckAzRqlK-1585737256385)]</p><blockquote><p><strong>File Header</strong></p><p>​    主要存储表空间相关信息</p><p><strong>Page Header</strong></p><p>​    主要存储数据页的元信息</p><p><strong>Infimum + Supremum Records</strong></p><p>​    每个数据页中有两个虚拟行记录用来限定记录的边界，infimum record 是数据页上最小的记录，supremum record 是数据页上最大的记录。</p><p><strong>User Records</strong></p><p>​     用户数据，实际存储的行记录。</p><p><strong>Free Space</strong></p><p>​     空闲空间。</p><p><strong>Page Directory</strong></p><p>​     页目录，存放了记录的相对位置。</p><p><strong>File Trailer</strong></p><p>​     位于数据页的最后，用来检测页是否完整地写入磁盘。</p></blockquote><h2 id="九、索引-1"><a href="#九、索引-1" class="headerlink" title="九、索引"></a>九、索引</h2><ol><li><p>索引是什么</p><p>简单来说，索引的目的就是为了提高数据的查询效率，就像书的目录一样。</p><p>一本800页的书，如果想在书中查找某个知识点。在不借助目录的情况下，估计得找好一会儿。同样，对于数据库的表而言，索引就是它的 ”目录”。</p><p><strong>索引：</strong>在 MySQL 中也叫做键 (key)，是存储引擎用于快速找到记录的一种数据结构。</p></li><li><p>哪些数据结构可以作为索引？</p><ul><li>有序数组 </li><li>哈希表 </li><li>平衡二叉树</li><li>B树</li><li>B+树</li></ul></li></ol><h1 id="未完待续——"><a href="#未完待续——" class="headerlink" title="未完待续——-"></a>未完待续——-</h1>]]></content>
    
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo搭建个人博客</title>
    <link href="/2024/05/27/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/05/27/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Hexo搭建个人博客"><a href="#使用Hexo搭建个人博客" class="headerlink" title="使用Hexo搭建个人博客"></a>使用Hexo搭建个人博客</h1><ol><li>安装Node.js</li></ol><p>​去 <code>https://nodejs.org/en</code> 下载Node.js 安装一直next即可。 </p><p><img src="/img/node.png"></p><ol start="2"><li>安装git</li></ol><p>​去git官网<code>https://git-scm.com/</code>下载安装git即可。</p><p><img src="/img/git.png"></p><ol start="3"><li>安装hexo</li></ol><p> <code>npm install hexo</code> 执行命令在你创建的博客目录下。会创建成功一个博客目录如下：</p><p><img src="/img/hexo.png"></p><ol start="4"><li><p>配置Github</p><p>  到Github的设置页面获取到token。进行git的配置。</p></li></ol><p><img src="/img/github.png"></p><ol start="5"><li>创建githubio仓库</li></ol><p>​创建一个名字为固定格式的仓库<code>username.github.io</code> ， 其中<code>username</code>是你github的用户名。</p><ol start="6"><li>上传博客</li></ol><p>​      本地git push 博客文件夹到仓库中。</p><ol start="7"><li>打开展示</li></ol><p>当然以上是我更换过主题后的页面。原始页面会比较简单。具体操作可以Google。</p><p><img src="/img/res.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/05/hello-world/"/>
    <url>/2024/05/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
